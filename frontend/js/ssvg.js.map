{"version":3,"sources":["webpack://SSVG/webpack/universalModuleDefinition","webpack://SSVG/webpack/bootstrap","webpack://SSVG/./canvasworker/drawingUtils.ts","webpack://SSVG/./frontend/exporter.ts","webpack://SSVG/./frontend/ssvg.ts","webpack://SSVG/./frontend/domhandler.ts","webpack://SSVG/./util/vdomManager.ts","webpack://SSVG/./canvasworker/canvasrenderer.ts","webpack://SSVG/./canvasworker/index.ts","webpack://SSVG/./canvasworker/canvasworker.ts","webpack://SSVG/./node_modules/worker-loader/dist/workers/InlineWorker.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DrawingUtils","[object Object]","transform","transformObject","translateX","translateY","scaleX","scaleY","rotate","translateBeforeScale","transformString","replace","translate","exec","parseFloat","scale","matrix","transformA","transformB","size","fallback","defaultValue","undefined","substr","Math","round","parseInt","match","console","warn","color","opacity","CssNamedColorToHex","test","substring","length","join","Error","g","b","rgb","hslToRgb","h","hue2rgb","q","selector","specificity","parts","concat","apply","split","map","part","start","countClasses","min","default","ssvg_1","domhandler_1","__importDefault","canvasrenderer_1","drawingUtils_1","canvasworker_1","options","this","unassignedNodes","interactionSelections","svgAssignedAndSizeSet","lastTenCanvasDrawTimes","enterExitQueue","safeMode","useWorker","getFps","onDrawn","maxPixelRatio","svgElement","svgElem","canvas","document","createElement","worker","onmessage","e","data","msg","logDrawn","updateCanvas","raf","updateFps","requestAnimationFrame","captureD3On","setupElementsIfSvgExists","addEventListener","propagateMouseEvent","lastHovered","hoveredElement","dispatchEvent","MouseEvent","propagateWheelEvent","replaceNativeRemoveChild","replaceNativeAttribute","replaceNativePathFunctions","replaceNativeCreateElement","replaceNativeAppendChild","replaceD3Attr","replaceNativeSelect","replaceNativeGetComputedStyle","replaceD3Select","replaceD3Remove","setTimeout","log","vdom","svgEl","svg","getElementsByTagName","urlConnector","location","href","indexOf","svgSwitchUrl","svgSwitchComment","createComment","parentElement","appendChild","domHandler","getVDom","setCanvasSize","useAttrQueue","queue","keys","sendUpdateToWorker","renderer","updatePropertiesFromQueue","draw","width","height","devicePixelRatio","style","offscreen","transferControlToOffscreen","sendToWorker","cmd","visData","element","isWithinSvg","parentEl","parentNode","d3","originalOn","selection","on","me","el","_parents","children","push","arguments","getReplacement","original","_groups","error","node","getVisNode","childElements","getVisNodesFromSelector","getElementFromNode","returnValue","forEach","childNode","childEl","selectAll","select","origFilter","filter","selectorString","elements","firstElement","getNodeFromElement","nodes","selectors","sel","trim","filteredNodes","matchingNodes","filterNodesBySelector","filteredElements","origGetComputedStyle","getComputedStyle","getPropertyValue","propertyName","origQuerySelector","Element","querySelector","childNodes","globalElementIndex","originalFct","prefix","els","returnVal","getAttributeFromSelector","getElementSelector","getVisNodeFromSelector","child","queueSetAttributeOnElement","queueSetAttributeOnSelection","origSelectionAttr","attr","origSelectionStyle","originalClassed","classed","className","enableFrontendDesignProperties","indexOfParent","childIndex","parentSelector","parent","getParentNodeFromSelector","prevClassNames","evaluatedValue","__data__","newClassNames","originalTransition","transition","originalText","text","newRemove","getNewRemoveChild","d3Remove","updateChildSelectors","remove","origCreate","createElementNS","newArgs","Array","from","getNewAppendChild","childElement","oldSelector","combineElementSelectors","type","updateNodeSelector","origRemoveChild","skipUpdateSelectors","writable","parentNodeSelector","removeNodeFromParent","removeChild","origAppend","appended","el2","keepChildren","getNodeDataFromEl","setProperty","styleProp","linkNodeToElement","addNodeToParent","addNode","index","splice","origAppendChild","newAppend","insertBefore","newChild","refChild","origGetTotalLength","SVGPathElement","getTotalLength","getAttribute","origSetAttribute","origSetAttr","setAttribute","origSetAttrNS","setAttributeNS","origGetAttr","evt","propagateEvent","WheelEvent","new_event","triggeredElement","interactionSel","j","vdomNode","nodeAtPosition","clientX","clientY","svgChildEl","visNode","x","y","cx","cy","parseTransform","sqrt","pow","elX","elY","centerX","centerY","distanceX","abs","distanceY","getTotalTransformation","matchAny","Date","now","shift","timeForTenDrawsMs","fps","enterExit","update","postMessage","vdomManager_1","drawingUtils_2","Domhandler","ignoreDesign","sharedArrays","setAttrQueue","nodesToElements","nodesToRestyle","useSharedArrayFor","VdomManager","display","addChildNodesToVisData","attrName","safeLog","checkAttrName","styleName","useSharedArray","self","BUFFER_PRECISION_FACTOR","useBuffer","buffer","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","values","cb","applyStyles","getRoundedAttr","val","tagName","toLowerCase","id","fill","x1","x2","y1","y2","stroke-width","textContent","font-size","font","text-anchor","styleSpecificity","obj","propNames","getOwnPropertyNames","propName","clean","styleSheets","sheet","rules","cssRules","rule","selectorText","applyRuleToMatchingNodes","newSelector","selectorPartsLooseStrict","parentsOfInterest","nodeToBeStyled","getNodeParent","getCssRuleSpecificityNumber","setStyle","longName","longSpecName","setValue","checkNode","currentNode","looseIndex","strictIndex","selPart","isCssRulePartialMatch","getNodeSelector","removedClass","removeRuleStylesFromNode","colorToRgba","removeNode","childEls","localName","elementType","elementIndex","getParentNode","parents","pop","totalTransform","addTransforms","safeLogCount","logContents","SetPropertyQueue","cachedListSelections","nodeData","applyParentStyles","styleValue","applyStyleToNodeAndChildren","attrNameStart","ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN","factor","specificityAttrName","matchingSpecificity","updateDeducedStyles","ROUNDED_ATTRS","stroke","strokeOpacity","lastSplitPos","lastIndexOf","selectorWithoutLast","lastPart","parentSel","nthChildPosition","selectedNodes","findMatchingChildren","addDirectChildrenIfMatch","matchIndex","selectedNodeSelectors","selParts","findChildrenOfType","matching","cssRuleSelectorPart","newSelPart","searchClassNames","allTrue","searchClassName","indexPart","targetIndex","cutoff","typeName","forceSingle","lastFullSecond","countSinceLastFullSecond","circlesByColor","rectsByColor","drawTexts","linesByColor","ctx","getContext","save","restore","clearRect","drawLine","drawCircle","drawRect","drawText","drawNodeAndChildren","fullSecond","performance","elData","applyTransform","drawSingleNode","drawFct","toUpperCase","fillOpacity","handle","getStrokeStyle","beginPath","fillStyle","strokeStyle","lineWidth","strokeWidth","arc","PI","fillAndStrokeColor","fillColor","strokeColor","sampleData","moveTo","fillOpacityStyle","fillRect","rect","drawSingle","fontSize","convertSizeToPx","align","textAlign","dx","dy","fillText","getFillStyle","Path2D","lineJoin","textAnchor","lineTo","CanvasWorkerImporter","URL","webkitURL","content","url","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","Blob","Worker","createObjectURL","encodeURIComponent"],"mappings":"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","file":"ssvg.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SSVG\"] = factory();\n\telse\n\t\troot[\"SSVG\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export type Transformation = {\r\n    translateX: number,\r\n    translateY: number,\r\n    scaleX: number,\r\n    scaleY: number,\r\n    rotate: number\r\n}\r\n\r\nexport default class DrawingUtils {\r\n    static parseTransform(transform: string|{}): Transformation {\r\n        const transformObject = {translateX: 0, translateY: 0, scaleX: 1, scaleY: 1, rotate: 0, translateBeforeScale: false};\r\n        \r\n        if (transform) {\r\n            if(typeof transform !== \"string\") {\r\n                transformObject.scaleX = transform['k'];\r\n                transformObject.scaleY = transform['k'];\r\n                transformObject.translateX = transform['x'];\r\n                transformObject.translateY = transform['y'];\r\n                return transformObject;\r\n            }\r\n            let transformString = <string> transform;\r\n            transformString = transformString.replace(/ /g, '');\r\n            \r\n            //let translate  = /translate\\((\\d+),(\\d+)\\)/.exec(transform);\r\n            const translate = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\r\n            if (translate) {\r\n                transformObject.translateX = parseFloat(translate[1]);\r\n                transformObject.translateY = parseFloat(translate[2]);\r\n            }\r\n            else {\r\n                //console.error('no translate found', transform);\r\n            }\r\n            \r\n            const scale = /\\s*scale\\(([-0-9.]+)\\)/.exec(transformString);\r\n            if (scale) {\r\n                transformObject.scaleX = parseFloat(scale[1]);\r\n                transformObject.scaleY = parseFloat(scale[1]);\r\n            }\r\n            else {\r\n                //console.error('no scale found', transform);\r\n            }\r\n            \r\n            const rotate = /\\s*rotate\\(([-0-9.]+)\\)/.exec(transformString);\r\n            if (rotate) {\r\n                transformObject.rotate = parseFloat(rotate[1]);\r\n            }\r\n            else {\r\n                //console.error('no rotate found', transform);\r\n            }\r\n            \r\n            const translateScale = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)scale\\(([-0-9.]+)\\)/.exec(transformString);\r\n            if (translateScale) {\r\n                transformObject.translateBeforeScale = true;\r\n            }\r\n            \r\n            const matrix = /\\s*matrix\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\r\n            if(matrix) {\r\n                transformObject.scaleX = parseFloat(matrix[1]);\r\n                // 2 is horizontal skewing\r\n                // 3 is vertical skewing\r\n                transformObject.scaleY = parseFloat(matrix[4]);\r\n                transformObject.translateX = parseFloat(matrix[5]);\r\n                transformObject.translateY = parseFloat(matrix[6]);\r\n            }\r\n        }\r\n        \r\n        return transformObject;\r\n    }\r\n\r\n    static addTransforms(transformA: Transformation, transformB: Transformation): Transformation {\r\n        return {\r\n            translateX: transformA.translateX + transformB.translateX,\r\n            translateY: transformA.translateY + transformB.translateY,\r\n            scaleX: transformA.scaleX * transformB.scaleX,\r\n            scaleY: transformA.scaleY * transformB.scaleY,\r\n            rotate: transformA.rotate + transformB.rotate\r\n        };\r\n    }\r\n\r\n    static convertSizeToPx(size: string|number, fallback = true): number|undefined {\r\n        const defaultValue = fallback ? 14 : undefined;\r\n        if(size === undefined) {\r\n            return defaultValue;\r\n        }\r\n        if(typeof size === \"number\") {\r\n            return size;\r\n        }\r\n        if(size.substr(-2) === 'em') {\r\n            return Math.round(parseFloat(size) * 12);\r\n        }\r\n        if(size.substr(-2) === 'px') {\r\n            return parseInt(size);\r\n        }\r\n        if(size.match(/^[0-9]+$/)) {\r\n            return parseInt(size);\r\n        }\r\n        console.warn('size in unsupported format: ', size);\r\n        return defaultValue;\r\n    }\r\n    \r\n    static colorToRgba(color: string|{r: number, g: number, b: number}|{h: number, s: number, l: number}, opacity: string|number = 1): string {\r\n        if(!color || color === 'none') {\r\n            return 'none';\r\n        }\r\n        color = DrawingUtils.CssNamedColorToHex(color);\r\n        if(opacity === 1 && typeof color === 'string') {\r\n            return color;\r\n        }\r\n        if(typeof color === 'string' && color[0] === '#') {\r\n            let c; // From https://stackoverflow.com/questions/21646738/convert-hex-to-rgba\r\n            if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(color)){\r\n                c = color.substring(1);\r\n                if(c.length == 3){\r\n                    c = c[0] + c[0] + c[1] + c[1] + c[2] + c[2];\r\n                }\r\n                c = '0x' + c;\r\n                return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',' + opacity + ')';\r\n            }\r\n            throw new Error('Bad Hex');\r\n        } else if(typeof color === 'object') {\r\n            if('r' in color) {\r\n                return 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')';\r\n            }\r\n            if('h' in color) {\r\n                const rgb = DrawingUtils.hslToRgb(color.h / 360, color.s, color.l);\r\n                return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\r\n            }\r\n        } else if(color.substr(0, 4) === 'rgb(') {\r\n            return color.substr(0, color.length - 1).replace('rgb','rgba') +\r\n                ', ' + opacity + ')';\r\n        }\r\n        return color;\r\n    }\r\n\r\n    // From https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\r\n    static hslToRgb(h, s, l) {\r\n        var r, g, b;\r\n\r\n        if(s == 0){\r\n            r = g = b = l; // achromatic\r\n        } else {\r\n            var hue2rgb = function hue2rgb(p, q, t){\r\n                if(t < 0) t += 1;\r\n                if(t > 1) t -= 1;\r\n                if(t < 1/6) return p + (q - p) * 6 * t;\r\n                if(t < 1/2) return q;\r\n                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n                return p;\r\n            };\r\n\r\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            var p = 2 * l - q;\r\n            r = hue2rgb(p, q, h + 1/3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1/3);\r\n        }\r\n\r\n        return {r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255)};\r\n    }\r\n\r\n    static CssNamedColorToHex(color: any) { // TODO put a somewhat complete list here..\r\n        if(color === 'red') {\r\n            return '#ff0000';\r\n        }\r\n        if(color === 'steelblue') {\r\n            return '#4682b4';\r\n        }\r\n        if(color === 'black') {\r\n            return '#000000';\r\n        }\r\n        //TODO add more colors.\r\n        return color;\r\n    }\r\n\r\n    /**\r\n     * Basic implementation to get a sense of specificity. Numbers are completely made up.\r\n     * Should eventually be more sophisticated, e.g. using https://github.com/keeganstreet/specificity.\r\n     * @param selector CSS rule as string.\r\n     */\r\n    static getCssRuleSpecificityNumber(selector: string) {\r\n        let specificity = 0;\r\n\r\n        selector = selector\r\n            .replace(/ >/g, '>')\r\n            .replace(/> /g, '>');\r\n\r\n        const parts = [].concat.apply([], selector.split(' ')\r\n            .map(part => part.split('>')));\r\n\r\n        // Rough logic: the more stuff, the more specific. IDs and classes are more specific than other things.\r\n        for(const part of parts) {\r\n            specificity += 100;\r\n            const start = part[0];\r\n\r\n            if(start === '#') {\r\n                specificity += 1000;\r\n            } else if(start === '.') {\r\n                // More classes are more specific, but never more specific than an ID.\r\n                const countClasses = part.split('.').length - 1;\r\n                specificity += Math.min(900, countClasses * 100);\r\n            }\r\n        }\r\n\r\n        return specificity;\r\n    }\r\n}","import SSVG from \"./ssvg\";\r\n\r\nexport = SSVG;","import {VdomManager, VdomNode} from \"../util/vdomManager\";\r\nimport {CanvasWorkerMessage, CanvasUpdateWorkerMessage, CanvasUpdateData} from \"../util/canvas-worker-message\"\r\nimport Domhandler from \"./domhandler\";\r\nimport CanvasWorker from \"../canvasworker/canvasworker\";\r\nimport Canvasrenderer from \"../canvasworker/canvasrenderer\";\r\nimport DrawingUtils from \"../canvasworker/drawingUtils\";\r\nimport CanvasWorkerImporter from '../canvasworker';\r\n\r\nexport default class SSVG {\r\n    private unassignedNodes: Node[] = [];\r\n    private worker: Worker;\r\n    private domHandler: Domhandler;\r\n    private vdom: VdomManager;\r\n    private interactionSelections: HTMLElement[] = [];\r\n    \r\n    private renderer: CanvasWorker;\r\n\r\n    private svg: SVGElement|undefined;\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private svgAssignedAndSizeSet = false;\r\n    \r\n    private lastTenCanvasDrawTimes: number[] = [];\r\n    \r\n    private enterExitQueue: CanvasUpdateData[] = [];\r\n\r\n    private readonly safeMode: boolean = false;\r\n    private readonly maxPixelRatio: number|undefined;\r\n    private readonly useWorker: boolean = true;\r\n    private readonly getFps: (fps: number) => void = () => {};\r\n    private readonly onDrawn: () => void = () => {};\r\n    private readonly svgElem: SVGElement;\r\n\r\n    private hoveredElement: Element|undefined;\r\n\r\n    constructor(options?: {\r\n        safeMode?: boolean,\r\n        maxPixelRatio?: number,\r\n        useWorker?: boolean,\r\n        getFps?: (fps: number) => void,\r\n        onDrawn?: () => void,\r\n        svgElement?: SVGElement\r\n    }) {\r\n        if(options) {\r\n            if(options.safeMode !== undefined) {\r\n                this.safeMode = options.safeMode;\r\n            }\r\n            this.maxPixelRatio = options.maxPixelRatio;\r\n            if(options.useWorker !== undefined) {\r\n                this.useWorker = options.useWorker;\r\n            }\r\n            if(options.getFps !== undefined) {\r\n                this.getFps = options.getFps;\r\n            }\r\n            if(options.onDrawn !== undefined) {\r\n                this.onDrawn = options.onDrawn;\r\n            }\r\n            if(options.svgElement !== undefined) {\r\n                this.svgElem = options.svgElement;\r\n            }\r\n        }\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        if(!('OffscreenCanvas' in window)) {\r\n            this.useWorker = false;\r\n        }\r\n        \r\n        if(this.useWorker) {\r\n            this.worker = new CanvasWorkerImporter();\r\n    \r\n            this.worker.onmessage = e => {\r\n                if(e.data && e.data.msg && e.data.msg === 'DRAWN') {\r\n                    this.logDrawn();\r\n                    this.updateCanvas();\r\n                }\r\n            };\r\n            const raf = () => {\r\n                this.updateFps();\r\n                requestAnimationFrame(raf);\r\n            };\r\n            raf();\r\n        } else {\r\n            const raf = () => {\r\n                this.updateFps();\r\n                this.updateCanvas();\r\n                requestAnimationFrame(raf);\r\n            };\r\n            raf();\r\n        }\r\n\r\n        this.captureD3On();\r\n        this.setupElementsIfSvgExists(this.svgElem ? this.svgElem : undefined);\r\n        //this.setupElementsIfSvgExists(this.svgElem ? this.svgElem : undefined);\r\n        \r\n        this.canvas.addEventListener('mousedown', e => this.propagateMouseEvent(e));\r\n        this.canvas.addEventListener('mousemove', e => {\r\n            const lastHovered = this.hoveredElement;\r\n            this.hoveredElement = this.propagateMouseEvent(e);\r\n            if(lastHovered !== this.hoveredElement) {\r\n                if(lastHovered) {\r\n                    lastHovered.dispatchEvent(new MouseEvent('mouseout', e));\r\n                }\r\n            }\r\n            this.propagateMouseEvent(e, 'mouseover');\r\n        });\r\n        this.canvas.addEventListener('mouseup', e => this.propagateMouseEvent(e));\r\n        this.canvas.addEventListener('click', e => this.propagateMouseEvent(e));\r\n        this.canvas.addEventListener('wheel', e => this.propagateWheelEvent(e));\r\n\r\n        this.replaceNativeRemoveChild();\r\n        this.replaceNativeAttribute();\r\n        this.replaceNativePathFunctions();\r\n        this.replaceNativeCreateElement();\r\n        this.replaceNativeAppendChild();\r\n        this.replaceD3Attr();\r\n        this.replaceNativeSelect();\r\n        this.replaceNativeGetComputedStyle();\r\n        this.replaceD3Select();\r\n        this.replaceD3Remove();\r\n\r\n        setTimeout(() => {\r\n            console.log(this.vdom.data);\r\n        }, 1000);\r\n    }\r\n    \r\n    private setupElementsIfSvgExists(svgEl?: SVGElement) {\r\n        \r\n        if(this.svg) {\r\n            return true;\r\n        }\r\n        \r\n        const svg = !svgEl ? document.getElementsByTagName('svg')[0] : svgEl;\r\n        \r\n        if(!svg) {\r\n            return false;\r\n        }\r\n\r\n        const urlConnector = document.location.href.indexOf('?') === -1 ? '?' : '&';\r\n        const svgSwitchUrl = document.location.href + urlConnector + 'svg';\r\n        const svgSwitchComment = document.createComment(' This project uses SSVG.io to render a SVG as Canvas.\\r\\n' +\r\n            'To inspect the SVG, please open the following URL:\\r\\n' +\r\n            svgSwitchUrl + '\\r\\n');\r\n        \r\n        this.svg = svg;\r\n        this.svg.parentElement.appendChild(svgSwitchComment);\r\n        this.svg.parentElement.appendChild(this.canvas);\r\n        this.domHandler = new Domhandler(this.svg, this.useWorker, this.useWorker);\r\n        this.vdom = this.domHandler.getVDom();\r\n\r\n        this.setCanvasSize();\r\n        \r\n        return true;\r\n    }\r\n    \r\n    private updateCanvas() {\r\n        if(!this.svgAssignedAndSizeSet) {\r\n            return;\r\n        }\r\n        if(this.useWorker) {\r\n            this.domHandler.useAttrQueue(queue => {\r\n                if(Object.keys(queue).length === 0) {\r\n                    //requestAnimationFrame(() => this.updateCanvas());\r\n                    setTimeout(() => this.updateCanvas(), 1);\r\n                    return;\r\n                }\r\n                this.sendUpdateToWorker(queue);\r\n            });\r\n        } else {\r\n            this.domHandler.useAttrQueue(queue => {\r\n                if(this.renderer.updatePropertiesFromQueue) {\r\n                    this.renderer.updatePropertiesFromQueue(queue);\r\n                }\r\n\r\n                if(Object.keys(queue).length === 0) {\r\n                    //requestAnimationFrame(() => this.updateCanvas());\r\n                    setTimeout(() => this.updateCanvas(), 1);\r\n                    return;\r\n                }\r\n                this.renderer.draw();\r\n                this.logDrawn();\r\n            });\r\n        }\r\n    }\r\n    \r\n    private setCanvasSize() {\r\n        if(!this.svg || !this.vdom.data.width || !this.vdom.data.height) {\r\n            return;\r\n        }\r\n        this.vdom.data.scale = window.devicePixelRatio;\r\n        if(this.maxPixelRatio !== undefined && this.vdom.data.scale > this.maxPixelRatio) {\r\n            this.vdom.data.scale = this.maxPixelRatio;\r\n        }\r\n    \r\n        this.canvas.style.width = this.vdom.data.width + 'px';\r\n        this.canvas.style.height = this.vdom.data.height + 'px';\r\n        this.canvas.width = this.vdom.data.width * this.vdom.data.scale;\r\n        this.canvas.height = this.vdom.data.height * this.vdom.data.scale;\r\n        \r\n        if(this.useWorker) {\r\n            const offscreen = (this.canvas as any).transferControlToOffscreen();\r\n            this.sendToWorker({cmd: 'INIT', data: {\r\n                    canvas: offscreen,\r\n                    visData: this.vdom.data,\r\n                    safeMode: this.safeMode\r\n                }\r\n            }, [offscreen]);\r\n        } else {\r\n            this.renderer = new Canvasrenderer(this.vdom, this.canvas, this.safeMode, () => {});\r\n        }\r\n        \r\n        this.svgAssignedAndSizeSet = true;\r\n    }\r\n\r\n    private isWithinSvg(element: Element) {\r\n        let isWithinSvg = false;\r\n        let parentEl = element;\r\n\r\n        while(parentEl && parentEl.parentNode) {\r\n            if(parentEl === this.svg) {\r\n                isWithinSvg = true;\r\n            }\r\n            parentEl = <Element> parentEl.parentNode;\r\n        }\r\n        return isWithinSvg;\r\n    }\r\n    \r\n    private captureD3On() {\r\n        if((window as any)['d3']) {\r\n            const d3 = (window as any)['d3'];\r\n            const originalOn = d3.selection.prototype.on;\r\n            const me = this;\r\n\r\n            d3.selection.prototype.on = function()\r\n            {\r\n                let el = this._parents && this._parents.length ? this._parents[0] : this[0].parentNode;\r\n                if(el === document.children[0]) {\r\n                    el = me.svg;\r\n                }\r\n                let isWithinSvg = me.isWithinSvg(el);\r\n\r\n                if(el && isWithinSvg && me.interactionSelections.indexOf(el) === -1)\r\n                {\r\n                    me.interactionSelections.push(el); // This one works for native get/setAttribute\r\n                    //interactionSelections.push(this); // This one works for d3 .attr.\r\n                }\r\n        \r\n                return originalOn.apply(this, arguments);\r\n            };\r\n        }\r\n    }\r\n    \r\n    private replaceD3Select() {\r\n        if((window as any)['d3']) {\r\n            const me = this;\r\n            const d3 = (window as any)['d3'];\r\n\r\n            const getReplacement = (original) => {\r\n                return function(selector: string|(()=>{})) {\r\n                    if(typeof selector === 'string') {\r\n\r\n                        let element: HTMLElement|SVGElement;\r\n                        if(this === d3) {\r\n                            element = me.svg;\r\n                        } else {\r\n                            element = this._groups ? this._groups[0][0] : this[0][0];\r\n                        }\r\n\r\n                        if(!element) {\r\n                            console.error('no element', this, selector);\r\n                            return original.apply(this, arguments);\r\n                        }\r\n                        const node = me.domHandler.getVisNode(element);\r\n\r\n                        if(!node) {\r\n                            console.warn('node not found', element);\r\n                            return original.apply(this, arguments);\r\n                        }\r\n\r\n                        const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\r\n                        const childElements = childNodes.map(node => {\r\n                            return me.domHandler.getElementFromNode(node);\r\n                        });\r\n\r\n                        const returnValue = original.apply(this, arguments);\r\n                        const elementsOutsideSvg: NodeList = returnValue._groups ? returnValue._groups[0]\r\n                            : returnValue[0];\r\n                        elementsOutsideSvg.forEach(childNode => {\r\n                            const childEl = <Element> <any> childNode;\r\n                            if(childElements.indexOf(childEl) === -1) {\r\n                                childElements.push();\r\n                            }\r\n                        });\r\n\r\n                        if(returnValue._groups) {\r\n                            returnValue._groups[0] = childElements;\r\n                        } else {\r\n                            // Older d3 versions\r\n                            const parentNode = returnValue[0].parentNode;\r\n                            returnValue[0] = childElements;\r\n                            returnValue[0].parentNode = parentNode;\r\n                        }\r\n\r\n                        return returnValue;\r\n                    }\r\n\r\n                    return original.apply(this, arguments);\r\n                }\r\n            };\r\n\r\n            d3.selection.prototype.selectAll = getReplacement(d3.selection.prototype.selectAll);\r\n            d3.selectAll = getReplacement(d3.selectAll);\r\n            d3.selection.prototype.select = getReplacement(d3.selection.prototype.select);\r\n            d3.select = getReplacement(d3.select);\r\n\r\n            const origFilter = d3.selection.prototype.filter;\r\n            d3.selection.prototype.filter = function(selectorString: string) {\r\n                const elements = this._groups ? this._groups[0] : this[0];\r\n                if(typeof selectorString !== 'string') {\r\n                    return origFilter.apply(this, arguments);\r\n                }\r\n                let firstElement = elements[0];\r\n                let i = 1;\r\n                while(!firstElement && i < elements.length) {\r\n                    i++;\r\n                    firstElement = elements[i];\r\n                }\r\n\r\n                const parentNode = firstElement ? me.domHandler.getNodeFromElement(firstElement.parentNode) : null;\r\n                const nodes = elements.map(element => me.domHandler.getNodeFromElement(element));\r\n\r\n                const selectors = selectorString.split(',').map(sel => sel.trim());\r\n                const filteredNodes = [];\r\n\r\n                for(const selector of selectors) {\r\n                    const matchingNodes = me.vdom.filterNodesBySelector(parentNode, nodes, selector);\r\n\r\n                    for(const node of matchingNodes) {\r\n                        if(filteredNodes.indexOf(node) === -1) {\r\n                            filteredNodes.push(node);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const filteredElements = filteredNodes.map(node => me.domHandler.getElementFromNode(node));\r\n\r\n                const returnValue = origFilter.apply(this, arguments);\r\n\r\n                if(returnValue._groups) {\r\n                    returnValue._groups[0] = filteredElements;\r\n                } else {\r\n                    // Older d3 versions\r\n                    const parentNode = returnValue[0].parentNode;\r\n                    returnValue[0] = filteredElements;\r\n                    returnValue[0].parentNode = parentNode;\r\n                }\r\n                return returnValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    private replaceNativeGetComputedStyle() {\r\n        const origGetComputedStyle = window.getComputedStyle;\r\n        const me = this;\r\n\r\n        window.getComputedStyle = function(element: HTMLElement) {\r\n            if(element && !me.isWithinSvg(element) && (<Window> <any> element) !== window) {\r\n                return origGetComputedStyle.call(this, element);\r\n            }\r\n\r\n            const node = me.domHandler.getNodeFromElement(element);\r\n            if(!node) {\r\n                console.warn('node not found for ', this, element);\r\n                return origGetComputedStyle.call(this, element);\r\n            }\r\n            return {\r\n                getPropertyValue(propertyName: string): string {\r\n                    //console.log(propertyName, node, node.style[propertyName]);\r\n                    return node.style[propertyName];\r\n                }\r\n            } as CSSStyleDeclaration;\r\n        };\r\n    }\r\n\r\n    private replaceNativeSelect() {\r\n        const origQuerySelector = Element.prototype.querySelector;\r\n        const me = this;\r\n\r\n        Element.prototype.querySelector = function(selector: string) {\r\n            if(!me.isWithinSvg(this)) {\r\n                return origQuerySelector.apply(this, arguments);\r\n            }\r\n\r\n            const node = me.domHandler.getVisNode(this);\r\n            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\r\n            if(childNodes.length === 0) {\r\n                console.warn('could not find selection', this, node, node.globalElementIndex, selector);\r\n                return null;\r\n            }\r\n            return me.domHandler.getElementFromNode(childNodes[0]);\r\n        };\r\n    }\r\n    \r\n    private replaceD3Attr() {\r\n\r\n        const me = this;\r\n\r\n        function getReplacement(originalFct, prefix = '') {\r\n            return function(name, value) {\r\n                \r\n                if(value === undefined) {\r\n\r\n                    if(me.unassignedNodes.indexOf(this) !== -1) {\r\n                        return originalFct.apply(this, arguments);\r\n                    } else {\r\n                        // Dealing with d3 v3.\r\n                        const els = this._groups ? this._groups[0] : this[0];\r\n                        if(els[0] && !me.isWithinSvg(els[0])) {\r\n                            return originalFct.apply(this, arguments);\r\n                        }\r\n                        if(els.length > 1) {\r\n                            const returnVal = [];\r\n                            for(const el of els) {\r\n                                returnVal.push(me.domHandler.getAttributeFromSelector(el, name))\r\n                            }\r\n                            return returnVal;\r\n                        } else {\r\n                            return me.domHandler.getAttributeFromSelector(els[0], name);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if(name === 'class' || !me.svg) {\r\n                        return originalFct.apply(this, arguments);\r\n                    }\r\n                    // For d3 v4, this would just be this.groups[0]. The rest is for\r\n                    // earlier versions, where selectAll() returned other values.\r\n                    let elements = this._groups ? this._groups[0] : this[0];\r\n\r\n                    if(typeof elements === 'object' && Object.keys(elements).length === 1 && elements.parentNode) {\r\n                        const parentElement = elements.parentNode;\r\n                        let parentNode: VdomNode;\r\n                        if(parentElement !== document.children[0]) {\r\n                            const selector = me.domHandler.getElementSelector(parentElement);\r\n                            if(selector === null) {\r\n                                console.error('selector not found', parentElement, elements);\r\n                                throw Error('selector not found');\r\n                            }\r\n                            parentNode = me.vdom.getVisNodeFromSelector(selector);\r\n                        } else {\r\n                            parentNode = me.vdom.data;\r\n                        }\r\n\r\n                        elements = [];\r\n                        for(const child of parentNode.children) {\r\n                            elements.push(me.domHandler.getElementFromNode(child));\r\n                        }\r\n                    }\r\n                    if(!elements) {\r\n                        return originalFct.apply(this, arguments);\r\n                    }\r\n                    const filteredElements = [];\r\n                    try {\r\n                        for (const element of elements) {\r\n                            if (element) {\r\n                                filteredElements.push(element);\r\n                            }\r\n                        }\r\n                    } catch(e) {\r\n                        console.error(elements, this);\r\n                        console.error(e);\r\n                    }\r\n                    if(filteredElements.length === 1) {\r\n                        const element = filteredElements[0];\r\n                        if(!element) {\r\n                            console.warn('element not found', this, name, value);\r\n                            return this;\r\n                        }\r\n                        if(!me.isWithinSvg(element)) {\r\n                            return originalFct.apply(this, arguments);\r\n                        }\r\n                        me.domHandler.queueSetAttributeOnElement(element, prefix + name, value);\r\n                    } else {\r\n                        if(!me.isWithinSvg(elements[0])) {\r\n                            return originalFct.apply(this, arguments);\r\n                        }\r\n                        me.domHandler.queueSetAttributeOnSelection(filteredElements, prefix + name, value);\r\n                    }\r\n                    \r\n                    if(filteredElements[0] === me.svg && (name === 'width' || name === 'height')) {\r\n                        me.vdom.data[name] = parseInt(value);\r\n                        me.setCanvasSize();\r\n                    }\r\n                \r\n                    return this;\r\n                }\r\n            };\r\n        }\r\n    \r\n        if((window as any)['d3']) {\r\n            const d3 = (window as any)['d3'];\r\n\r\n            const origSelectionAttr = d3.selection.prototype.attr;\r\n            d3.selection.prototype.attr = getReplacement(origSelectionAttr);\r\n\r\n            const origSelectionStyle = d3.selection.prototype.style;\r\n            d3.selection.prototype.style = getReplacement(origSelectionStyle, 'style;');\r\n\r\n            const originalClassed = d3.selection.prototype.classed;\r\n            d3.selection.prototype.classed = function(className: string,\r\n                                                      value?: boolean|((data: any, index: number) => boolean)) {\r\n                if(value !== undefined) {\r\n                    me.domHandler.enableFrontendDesignProperties();\r\n                    let elements = this._groups ? this._groups[0] : this[0];\r\n                    let i = 0;\r\n                    for(let element of elements) {\r\n                        if(element) {\r\n                            const indexOfParent = element.childIndex;\r\n                            const parentSelector = element['parentSelector'];\r\n                            const parent = me.vdom.getParentNodeFromSelector(parentSelector);\r\n                            const node = parent.children[indexOfParent];\r\n                            if(!node) {\r\n                                console.warn('node not found', element, parent, indexOfParent, className);\r\n                                continue;\r\n                            }\r\n                            const prevClassNames = node.className || '';\r\n                            const evaluatedValue = typeof value === \"function\" ? value((<any> element).__data__, i) : value;\r\n                            if(evaluatedValue === true) {\r\n                                if(prevClassNames.indexOf(className) === -1) {\r\n                                    let newClassNames = (prevClassNames + ' ' + className).trim();\r\n\r\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\r\n                                }\r\n                            } else if(evaluatedValue === false) {\r\n                                const containedPreviously = prevClassNames.indexOf(className) !== -1;\r\n                                if(containedPreviously) {\r\n                                    const newClassNames = prevClassNames.replace(className, '').replace('  ', ' ');\r\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\r\n\r\n                                    if(!node['removedClasses']) {\r\n                                        node['removedClasses'] = [];\r\n                                    }\r\n                                    node['removedClasses'].push(className); // For removing associated styles.\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        i++;\r\n                    }\r\n                }\r\n                return originalClassed.apply(this, arguments);\r\n            };\r\n\r\n            const originalTransition = d3.selection.prototype.transition;\r\n            d3.selection.prototype.transition = function() {\r\n                me.domHandler.enableFrontendDesignProperties();\r\n                return originalTransition.apply(this, arguments);\r\n            };\r\n\r\n            const originalText = d3.selection.prototype.text;\r\n            d3.selection.prototype.text = function(value?: boolean|((data: any, index: number) => boolean)) {\r\n                if(value !== undefined) {\r\n                    let elements = this._groups ? this._groups[0] : this[0];\r\n                    let i = 0;\r\n                    for(let element of elements) {\r\n                        if(element && me.isWithinSvg(element)) {\r\n                            const evaluatedValue = typeof value === \"function\" ? value((<any> element).__data__, i) : value;\r\n                            me.domHandler.queueSetAttributeOnElement(element, 'text', evaluatedValue);\r\n                        }\r\n\r\n                        i++;\r\n                    }\r\n                }\r\n                return originalText.apply(this, arguments);\r\n            };\r\n        }\r\n    }\r\n\r\n    private replaceD3Remove() {\r\n        if(window['d3']) {\r\n            const d3 = window['d3'];\r\n            const me = this;\r\n\r\n            const newRemove = this.getNewRemoveChild(() => {}, true);\r\n            const d3Remove = function() {\r\n                let elements = this._groups ? this._groups[0] : this[0];\r\n\r\n                if(elements.length) {\r\n                    let parentElement: HTMLElement = null;\r\n                    for(let i = elements.length - 1; i > -1; i--) {\r\n                        const element = elements[i];\r\n                        if(element) {\r\n                            parentElement = element.parentNode;\r\n                            if(!parentElement) {\r\n                                console.error('element has no parent node', element);\r\n                            }\r\n                            newRemove.call(parentElement, element);\r\n                        }\r\n\r\n                    }\r\n                    if(parentElement) {\r\n                        me.updateChildSelectors(parentElement);\r\n                    }\r\n                }\r\n                return this;\r\n            };\r\n            d3.selection.prototype.remove = d3Remove;\r\n            //d3.transition.prototype.remove = d3Remove;\r\n        }\r\n    }\r\n    \r\n    private replaceNativeCreateElement() {\r\n        const origCreate = document.createElementNS;\r\n        const me = this;\r\n        \r\n        document.createElementNS = function() {\r\n            let newArgs = Array.from(arguments);\r\n            const el = origCreate.apply(this, newArgs);\r\n            \r\n            /*el.appendChild = () => {\r\n                console.log('hi!!', el, arguments);\r\n                //return el;\r\n            };*/\r\n    \r\n            el.appendChild = me.getNewAppendChild(el.appendChild);\r\n            \r\n            me.unassignedNodes.push(el);\r\n    \r\n            //console.log(me.unassignedNodes);\r\n            \r\n            return el;\r\n        }\r\n    }\r\n\r\n    private updateChildSelectors(parentElement: Element, parentNode?: VdomNode) {\r\n        const parentSelector = parentElement['selector'];\r\n        if(!parentSelector) {\r\n            console.error('this node has no selector', parentElement)\r\n        }\r\n        if(!parentNode) {\r\n            parentNode = this.vdom.getParentNodeFromSelector(parentSelector);\r\n        }\r\n        for(let i = 0; i < parentNode.children.length; i++) {\r\n            const childNode: VdomNode = parentNode.children[i];\r\n            const childElement = this.domHandler.getElementFromNode(childNode);\r\n            if(!childElement) {\r\n                console.error('element not found', childNode, parentNode.children.length, i);\r\n                continue;\r\n            }\r\n            const oldSelector = childElement['selector'];\r\n\r\n            childElement['childIndex'] = i;\r\n            childElement['parentSelector'] = parentSelector;\r\n            childElement['selector'] = this.domHandler.combineElementSelectors(parentSelector, childNode.type, i+1);\r\n\r\n            this.domHandler.updateNodeSelector(oldSelector, childElement['selector']);\r\n\r\n            this.updateChildSelectors(childElement, childNode);\r\n        }\r\n    }\r\n\r\n    private getNewRemoveChild(origRemoveChild: ((<T extends Node>(oldChild: T) => T)|(() => void)),\r\n        skipUpdateSelectors = false) {\r\n        const me = this;\r\n\r\n        return function<T extends Node>(this: Element, el: T) {\r\n            if(!this) {\r\n                console.error('context not defined');\r\n                return el;\r\n            }\r\n            if(!me.isWithinSvg(<Element> <any> el)) {\r\n                return origRemoveChild.apply(this, arguments);\r\n            }\r\n            const parentNode = me.domHandler.getNodeFromElement(<Element> <any> this);\r\n            const parentSelector = this['selector'];\r\n            const node = me.domHandler.getNodeFromElement(<Element> <any> el);\r\n\r\n            if(!node) {\r\n                console.error('node not found', node, el, this, parentNode);\r\n                return origRemoveChild.apply(this, arguments);\r\n            }\r\n\r\n            // Remove all child elements.\r\n            for(const childNode of node.children) {\r\n                const childEl = me.domHandler.getElementFromNode(childNode);\r\n                //el.removeChild(childEl);\r\n            }\r\n\r\n            // Remove from current parent first.\r\n            Object.defineProperty(el, 'parentNode', {\r\n                writable: true,\r\n                value: undefined\r\n            });\r\n\r\n            //console.log('remove')\r\n            me.enterExitQueue.push({\r\n                cmd: 'EXIT',\r\n                childIndex: el['childIndex'],\r\n                parentNodeSelector: parentSelector\r\n            });\r\n\r\n            me.domHandler.removeNodeFromParent(<Element> <any> el, node);\r\n\r\n            // Fix child indices of all children.\r\n            if(!skipUpdateSelectors) {\r\n                if(!parentSelector) {\r\n                    console.error('parent not found', parentNode, parentSelector, this, el);\r\n                }\r\n                me.updateChildSelectors(this);\r\n            }\r\n\r\n            delete el['selector'];\r\n\r\n            return el;\r\n        };\r\n    }\r\n\r\n    private replaceNativeRemoveChild() {\r\n        Element.prototype.removeChild = this.getNewRemoveChild(Element.prototype.removeChild);\r\n    }\r\n    \r\n    private getNewAppendChild(origAppend) {\r\n        const me = this;\r\n        \r\n        return function<T extends Node>(this: Element, el: T) {\r\n            if(!me.svgAssignedAndSizeSet) {\r\n                if(!me.svg && el['tagName'] === 'svg') {\r\n                    const appended = origAppend.apply(this, arguments);\r\n                    me.setupElementsIfSvgExists(<SVGElement> <any> el);\r\n                    return appended;\r\n                    \r\n                } else {\r\n                    return origAppend.apply(this, arguments);\r\n                }\r\n            }\r\n            \r\n            if(!me.isWithinSvg(this)) {\r\n                return origAppend.apply(this, arguments);\r\n            }\r\n\r\n            Object.defineProperty(el, 'ownerSVGElement', {\r\n                writable: true,\r\n                value: me.svg\r\n            });\r\n            el['appendChild'] = <T extends Node>(el2: T) => {\r\n                return me.getNewAppendChild(origAppend).call(el, el2);\r\n            };\r\n            const parentSelector = me.domHandler.getElementSelector(this);\r\n            if(parentSelector === null) {\r\n                return origAppend.apply(this, arguments);\r\n            }\r\n\r\n            const parentNode = me.domHandler.getNodeFromElement(this);\r\n            if(!parentNode) {\r\n                return console.error('parent node not found', parentSelector, this);\r\n            }\r\n            let node: VdomNode;\r\n            let keepChildren = false;\r\n\r\n            if(el['parentSelector']) {\r\n                node = me.domHandler.getVisNode(<Element> <any> el);\r\n\r\n                me.getNewRemoveChild(() => {}).call(this, el);\r\n                keepChildren = true; // If the element is being moved around, keep children.\r\n            } else {\r\n                node = me.domHandler.getNodeDataFromEl(<HTMLElement><any> el);\r\n            }\r\n\r\n            (el as any)['parentSelector'] = parentSelector;\r\n            (el as any)['selector'] = me.domHandler.getElementSelector(<Element><any> el, parentNode);\r\n            (el as any)['childIndex'] = parentNode.children.length;\r\n\r\n            Object.defineProperty(el, 'style', {\r\n                writable: true,\r\n                value: {\r\n                    setProperty: function(styleProp: string, value: string) {\r\n                        me.domHandler.queueSetAttributeOnElement(el as any, 'style;' + styleProp, value);\r\n                    },\r\n                    getPropertyValue: function(styleProp) {\r\n                        me.domHandler.enableFrontendDesignProperties();\r\n                        return node.style[styleProp];\r\n                    }\r\n                }\r\n            });\r\n\r\n            Object.defineProperty(el, 'parentNode', {\r\n                writable: true,\r\n                value: this\r\n            });\r\n    \r\n            me.domHandler.linkNodeToElement(node, el);\r\n            me.domHandler.addNodeToParent(parentNode, node);\r\n            me.updateChildSelectors(el as unknown as Element, node);\r\n            \r\n            if(me.useWorker) {\r\n                me.enterExitQueue.push({\r\n                    cmd: 'ENTER',\r\n                    node: node,\r\n                    parentNodeSelector: parentSelector,\r\n                    keepChildren: keepChildren\r\n                });\r\n            } else {\r\n                if(me.renderer.addNode) {\r\n                    me.renderer.addNode(node);\r\n                }\r\n            }\r\n    \r\n            if(me.unassignedNodes.indexOf(el) !== -1) {\r\n                const index = me.unassignedNodes.indexOf(el);\r\n                me.unassignedNodes.splice(index, 1);\r\n            }\r\n    \r\n            return el;\r\n        };\r\n    }\r\n    \r\n    private replaceNativeAppendChild() {\r\n        const origAppendChild = Element.prototype.appendChild;\r\n        const newAppend = this.getNewAppendChild(origAppendChild);\r\n    \r\n        Element.prototype.appendChild = newAppend;\r\n        Element.prototype.insertBefore = function<T extends Node>(newChild: T, refChild: Node|null) {\r\n    \r\n            newAppend.call(this, newChild);\r\n            \r\n            return newChild;\r\n        };\r\n    }\r\n\r\n    private replaceNativePathFunctions() {\r\n        const me = this;\r\n        //const origGetPointAtLength = SVGPathElement.prototype.getPointAtLength;\r\n        const origGetTotalLength = SVGPathElement.prototype.getTotalLength;\r\n\r\n        /*SVGPathElement.prototype.getPointAtLength = function() {\r\n            if(me.isWithinSvg(this)) {\r\n                const d = this.getAttribute('d');\r\n                me.origSetAttribute.call(this, 'd', d);\r\n            }\r\n            return origGetPointAtLength.apply(this, arguments);\r\n        };*/\r\n        SVGPathElement.prototype.getTotalLength = function() {\r\n            if(me.isWithinSvg(this)) {\r\n                const d = this.getAttribute('d');\r\n                me.origSetAttribute.call(this, 'd', d);\r\n            }\r\n\r\n            return origGetTotalLength.apply(this, arguments);\r\n        };\r\n    }\r\n\r\n    private origSetAttribute;\r\n\r\n    private replaceNativeAttribute() {\r\n        const origSetAttr = Element.prototype.setAttribute;\r\n        this.origSetAttribute = origSetAttr;\r\n        const origSetAttrNS = Element.prototype.setAttributeNS;\r\n        const origGetAttr = Element.prototype.getAttribute;\r\n        const me = this;\r\n    \r\n        Element.prototype.setAttribute = function(name: string, value: any) {\r\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\r\n                // Update the original SVG\r\n                origSetAttr.apply(this, arguments);\r\n                return;\r\n            }\r\n            if(name === 'class') {\r\n                origSetAttr.apply(this, arguments);\r\n            }\r\n            if(!me.isWithinSvg(this)) {\r\n                return origSetAttr.apply(this, arguments);\r\n            }\r\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\r\n        };\r\n        //TODO: Figure out how to access the element when setting a style property.\r\n        /*CSSStyleDeclaration.prototype.setProperty = function(name: string, value: any) {\r\n            safeLog(this, arguments);\r\n            me.elementHandler.queueSetAttributeOnElement(this, 'style;' + name, value);\r\n        };*/\r\n        Element.prototype.setAttributeNS = function(name: string, value: any) {\r\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\r\n                // Update the original SVG\r\n                origSetAttrNS.apply(this, arguments);\r\n                return;\r\n            }\r\n            if(name === 'class') {\r\n                origSetAttrNS.apply(this, arguments);\r\n            }\r\n            if(!me.isWithinSvg(this)) {\r\n                return origSetAttrNS.apply(this, arguments);\r\n            }\r\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\r\n        };\r\n    \r\n        Element.prototype.getAttribute = function(name) {\r\n            if(me.unassignedNodes.indexOf(this) !== -1) {\r\n                return origGetAttr.apply(this, arguments);\r\n            } else {\r\n                try {\r\n                    return me.domHandler.getAttributeFromSelector(this, name);\r\n                } catch(e) {\r\n                    console.error(e);\r\n                    return origGetAttr.apply(this, arguments);\r\n                }\r\n            }\r\n        };\r\n    }\r\n    \r\n    private propagateMouseEvent(evt: MouseEvent, type?: string) {\r\n        return this.propagateEvent(new MouseEvent(type? type : evt.type, evt));\r\n    }\r\n    \r\n    private propagateWheelEvent(evt: WheelEvent) {\r\n        return this.propagateEvent(new WheelEvent(evt.type, evt));\r\n    }\r\n    \r\n    private propagateEvent(new_event: MouseEvent|WheelEvent): undefined|Element {\r\n        this.svg.dispatchEvent(new_event); // for EasyPZ\r\n\r\n        let triggeredElement: undefined|Element;\r\n\r\n        for(let interactionSel of this.interactionSelections)\r\n        {\r\n            let parentSelector = this.domHandler.getElementSelector(interactionSel);\r\n            let parentNode = this.vdom.getVisNodeFromSelector(parentSelector);\r\n            \r\n            //let matchingVisParent = selectedNodes[i];\r\n            let j = 1;\r\n            \r\n            if(!parentNode) {\r\n                //console.error(interactionSel, parentSelector, parentNode);\r\n            } else {\r\n                for(let vdomNode of parentNode.children)\r\n                {\r\n                    let childNode = this.nodeAtPosition(vdomNode, new_event.clientX-10, new_event.clientY-10);\r\n                    if(childNode)\r\n                    {\r\n                        /*let selector = parentSelector + ' > :nth-child(' + j + ')';\r\n                        let svgEl = this.svg.querySelector(selector);*/\r\n                        const svgEl = this.domHandler.getElementFromNode(vdomNode);\r\n                        const svgChildEl = this.domHandler.getElementFromNode(childNode);\r\n\r\n                        if(svgChildEl) {\r\n                            Object.defineProperty(new_event, 'target', {\r\n                                writable: true,\r\n                                value: svgChildEl\r\n                            });\r\n                        }\r\n\r\n                        if(svgChildEl) {\r\n                            triggeredElement = svgChildEl;\r\n                            svgChildEl.dispatchEvent(new_event);\r\n                        }\r\n\r\n                        if(svgEl) {\r\n                            if(!triggeredElement) {\r\n                                triggeredElement = svgEl;\r\n                            }\r\n                            svgEl.dispatchEvent(new_event);\r\n                        }\r\n                    }\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n        return triggeredElement;\r\n    }\r\n    \r\n    private nodeAtPosition(visNode: VdomNode, x: number, y: number): false|VdomNode {\r\n        if (visNode.type === 'circle') {\r\n            let cx = visNode.cx || 0;\r\n            let cy = visNode.cy || 0;\r\n            if (visNode.transform) {\r\n                const transform = DrawingUtils.parseTransform(visNode.transform);\r\n                if (transform.translateX) {\r\n                    cx += transform.translateX;\r\n                }\r\n                if (transform.translateY) {\r\n                    cy += transform.translateY;\r\n                }\r\n            }\r\n            const distance = Math.sqrt(Math.pow(cx - x, 2) + Math.pow(cy - y, 2));\r\n            return distance < visNode.r ? visNode : false;\r\n        } else if(visNode.type === 'rect') {\r\n\r\n            let elX = visNode.x || 0;\r\n            let elY = visNode.y || 0;\r\n            const width = visNode.width;\r\n            const height = visNode.height;\r\n\r\n            if (visNode.transform) {\r\n                const transform = DrawingUtils.parseTransform(visNode.transform);\r\n                if (transform.translateX) {\r\n                    elX += transform.translateX;\r\n                }\r\n                if (transform.translateY) {\r\n                    elY += transform.translateY;\r\n                }\r\n            }\r\n\r\n            const centerX = elX + width / 2;\r\n            const centerY = elY + height / 2;\r\n\r\n            const distanceX = Math.abs(centerX - x);\r\n            const distanceY = Math.abs(centerY - y);\r\n\r\n            return distanceX < width / 2 && distanceY < height / 2 ? visNode : false;\r\n\r\n        } else if(visNode.type === 'g') {\r\n\r\n            const transform = this.domHandler.getTotalTransformation(visNode);\r\n            if(transform.translateX) {\r\n                x -= transform.translateX;\r\n            }\r\n            if(transform.translateY) {\r\n                y -= transform.translateY;\r\n            }\r\n\r\n            let matchAny: false|VdomNode = false;\r\n            for(let i = 0; i < visNode.children.length; i++) {\r\n                if(this.nodeAtPosition(visNode.children[i], x, y)) {\r\n                    matchAny = visNode.children[i];\r\n                }\r\n            }\r\n            return matchAny;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    private logDrawn() {\r\n        this.lastTenCanvasDrawTimes.push(Date.now());\r\n        \r\n        if(this.lastTenCanvasDrawTimes.length > 100) {\r\n            this.lastTenCanvasDrawTimes.shift(); // Remove first item\r\n        }\r\n        this.onDrawn();\r\n    }\r\n    \r\n    private updateFps() {\r\n        if(this.lastTenCanvasDrawTimes.length) {\r\n            const timeForTenDrawsMs = Date.now() - this.lastTenCanvasDrawTimes[0];\r\n            const fps = Math.round(this.lastTenCanvasDrawTimes.length / timeForTenDrawsMs * 1000);\r\n            this.getFps(fps);\r\n        }\r\n    }\r\n\r\n    private sendUpdateToWorker(queue) {\r\n        const msg: CanvasUpdateWorkerMessage = {\r\n            cmd: 'UPDATE_NODES',\r\n            data: {\r\n                enterExit: this.enterExitQueue,\r\n                update: queue,\r\n            }\r\n        };\r\n\r\n        this.sendToWorker(msg);\r\n\r\n        this.enterExitQueue = [];\r\n    }\r\n\r\n    private sendToWorker(msg: CanvasWorkerMessage, data?: any) {\r\n        this.worker.postMessage(msg, data);\r\n        //console.log(roughSizeOfObject(msg));\r\n    }\r\n}\r\n\r\n\r\nlet safeLogCount = 0;\r\nfunction safeLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.log(...logContents);\r\n    }\r\n}\r\nfunction safeErrorLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.error(...logContents);\r\n    }\r\n}","import {VdomManager, VdomNode, VdomNodeType} from \"../util/vdomManager\";\r\nimport DrawingUtils, {Transformation} from \"../canvasworker/drawingUtils\";\r\nimport drawingUtils from \"../canvasworker/drawingUtils\";\r\n\r\nexport default class Domhandler {\r\n    \r\n    private vdom: VdomManager;\r\n    private sharedArrays: {[parentSelector: string]: { [attrName: string]: Int32Array}} = {};\r\n    private setAttrQueue: {[parentSelector: string]: { [attrName: string]: (string[]|SharedArrayBuffer)}} = {};\r\n    private nodesToElements: { nodes: VdomNode[], elements: Element[]} = { nodes: [], elements: []};\r\n    private nodesToRestyle: VdomNode[] = [];\r\n    private static BUFFER_PRECISION_FACTOR = 10;\r\n    \r\n    constructor(private svg: SVGElement, useWorker: boolean, private ignoreDesign = true) {\r\n        const visData: any = {\r\n            width: this.svg.getAttribute('width'),\r\n            height: this.svg.getAttribute('height'),\r\n            scale: 1,\r\n            children: []\r\n        };\r\n\r\n        this.vdom = new VdomManager(visData, ignoreDesign);\r\n        this.svg.style.display = 'none';\r\n        this.svg['selector'] = 'svg';\r\n\r\n        this.addChildNodesToVisData(this.svg.childNodes, this.vdom.data);\r\n\r\n        window.setTimeout(() => {\r\n            // Re-do the styles.\r\n            this.nodesToRestyle = [];\r\n            // Can not use this.nodesToRestyle = this.nodesToElements.nodes because this links the object and adding\r\n            // to this.nodesToRestyle would break the nodesToElements mapping.\r\n            for(const node of this.nodesToElements.nodes) {\r\n                this.nodesToRestyle.push(node);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    enableFrontendDesignProperties() {\r\n        this.ignoreDesign = false;\r\n        this.vdom.enableFrontendDesignProperties();\r\n    }\r\n    \r\n    getVDom() {\r\n        return this.vdom;\r\n    }\r\n    \r\n    queueSetAttributeOnElement(element: Element, attrName: string, value: any) {\r\n        //TODO: merge with updatePropertiesFromQueue from VdomManager?\r\n        const parent = element.parentNode;\r\n        let parentSelector = parent === this.svg ? \"svg\" : (element as any)['parentSelector'] as string;\r\n        let childIndex = (element as any)['childIndex'];\r\n    \r\n        if(!parentSelector && element === this.svg) {\r\n            parentSelector = 'SVG_PARENT';\r\n            childIndex = 0;\r\n        }\r\n    \r\n        if(!parentSelector) {\r\n            safeLog(element, parent);\r\n            console.error('selector not found');\r\n            return;\r\n        }\r\n\r\n        if(element === this.svg && attrName.indexOf('style;') === 0) {\r\n            attrName = attrName.substr('style;'.length);\r\n        }\r\n        attrName = this.checkAttrName(parentSelector, attrName, false);\r\n        const evaluatedValue = typeof value === \"function\" ? value.call(<any> element, (<any> element).__data__, childIndex) : value;\r\n        this.setAttrQueue[parentSelector][attrName][childIndex] = evaluatedValue;\r\n\r\n        if(attrName === 'className' || attrName.indexOf('style') !== -1) {\r\n            // Apply classes immediately so styles can be applied correctly.\r\n            const node = this.getNodeFromElement(element);\r\n\r\n            if(attrName === 'className') {\r\n                node.className = evaluatedValue;\r\n                this.nodesToRestyle.push(node);\r\n            } else {\r\n                const styleName = attrName.substr(6);\r\n                if(!node.style) {\r\n                    console.error('no styles on node ', node);\r\n                }\r\n                node.style[styleName] = evaluatedValue;\r\n            }\r\n        }\r\n    }\r\n    \r\n    queueSetAttributeOnSelection(elements, attrName, value) {\r\n        if(!elements.length) return;\r\n        if(!elements[0]) {\r\n            //console.error('selection elements not found', elements);\r\n            return;\r\n        }\r\n        const useSharedArray = 'SharedArrayBuffer' in self;\r\n\r\n        let parentElement = elements[0].parentNode;\r\n        let parentNode = this.getNodeFromElement(parentElement);\r\n        let parentSelector = parentElement === this.svg ? \"svg\" : parentElement['selector'];\r\n        if(!parentSelector) {\r\n            safeLog(elements, parentElement);\r\n            console.error('selector not found');\r\n        }\r\n\r\n        attrName = this.checkAttrName(parentSelector, attrName, useSharedArray, parentNode);\r\n        \r\n        for(let i = 0; i < elements.length; i++) {\r\n            const svgEl = elements[i];\r\n            const indexOfParent = svgEl.childIndex;\r\n\r\n            if(svgEl.parentNode !== parentElement) {\r\n                parentElement = svgEl.parentNode;\r\n                parentNode = this.getNodeFromElement(parentElement);\r\n                parentSelector = parentElement === this.svg ? \"svg\" : parentElement['selector'];\r\n                attrName = this.checkAttrName(parentSelector, attrName, useSharedArray, parentNode);\r\n            }\r\n\r\n            const evaluatedValue = typeof value === \"function\" ? value(svgEl.__data__, i) : value;\r\n            if(this.useSharedArrayFor.indexOf(attrName) === -1 || !useSharedArray) {\r\n                this.setAttrQueue[parentSelector][attrName][indexOfParent] = evaluatedValue;\r\n            } else {\r\n                this.sharedArrays[parentSelector][attrName][indexOfParent] = evaluatedValue * Domhandler.BUFFER_PRECISION_FACTOR;\r\n            }\r\n        }\r\n\r\n        if(attrName === 'className' || attrName.indexOf('style') !== -1) {\r\n            // Apply classes immediately so styles can be applied correctly.\r\n            for(let i = 0; i < elements.length; i++) {\r\n                const node = this.getNodeFromElement(elements[i]);\r\n                const evaluatedValue = typeof value === \"function\" ? value(elements[i].__data__, i) : value;\r\n\r\n                if(attrName === 'className') {\r\n                    node.className = evaluatedValue;\r\n                    this.nodesToRestyle.push(node);\r\n                } else {\r\n                    const styleName = attrName.substr(6);\r\n                    node.style[styleName] = evaluatedValue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    private useSharedArrayFor = ['cx', 'cy', 'x1', 'x2', 'y1', 'y2', 'x', 'y'];\r\n    \r\n    private checkAttrName(parentSelector: string, attrName: string, useBuffer = false, parentNode?: VdomNode) {\r\n        if(attrName === 'class') {\r\n            attrName = 'className';\r\n        }\r\n\r\n        if(!this.setAttrQueue[parentSelector]) {\r\n            this.setAttrQueue[parentSelector] = {};\r\n            this.sharedArrays[parentSelector] = {};\r\n        }\r\n\r\n        if(!useBuffer || this.useSharedArrayFor.indexOf(attrName) === -1) {\r\n            if(!this.setAttrQueue[parentSelector][attrName]) {\r\n                this.setAttrQueue[parentSelector][attrName] = [];\r\n            }\r\n        } else {\r\n            if(!this.sharedArrays[parentSelector][attrName]) {\r\n                if(!parentNode) {\r\n                    parentNode = this.vdom.getParentNodeFromSelector(parentSelector)\r\n                }\r\n                const length = parentNode.children.length;\r\n                const buffer = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * length);\r\n                const values = new Int32Array(buffer);\r\n\r\n                // If values have been previously set without a buffer, transfer them.\r\n                if(this.setAttrQueue[parentSelector][attrName] &&\r\n                    !(this.setAttrQueue[parentSelector][attrName] instanceof SharedArrayBuffer)) {\r\n                    const prevData: string[] = <any> this.setAttrQueue[parentSelector][attrName];\r\n\r\n                    prevData.forEach((value, index) => {\r\n                        values[index] = parseFloat(value) * Domhandler.BUFFER_PRECISION_FACTOR;\r\n                    });\r\n                }\r\n\r\n                this.setAttrQueue[parentSelector][attrName] = buffer;\r\n                this.sharedArrays[parentSelector][attrName] = values;\r\n            }\r\n        }\r\n\r\n        return attrName;\r\n    }\r\n    \r\n    useAttrQueue(cb: (data) => void = () => {}) {\r\n        if(this.nodesToRestyle) {\r\n            this.applyStyles();\r\n        }\r\n\r\n        cb(this.setAttrQueue);\r\n        this.vdom.updatePropertiesFromQueue(this.setAttrQueue);\r\n        \r\n        this.setAttrQueue = {};\r\n    }\r\n    \r\n    getAttributesFromSelector(selection, name: string) {\r\n        // Dealing with d3 v3.\r\n        const els = selection._groups ? selection._groups[0] : selection[0];\r\n        \r\n        return els.map(el => this.getAttributeFromSelector(el, name));\r\n    }\r\n    \r\n    getAttributeFromSelector(element: Element, name: string) {\r\n        const node = this.getNodeFromElement(element);\r\n        \r\n        if(!node) {\r\n            console.error('trying to get attribute for unfit selection', node, element, name);\r\n            throw Error('element not found');\r\n        }\r\n        \r\n        return node[name];\r\n    }\r\n    \r\n    getVisNode(element: Element): VdomNode|null {\r\n        const selector = this.getElementSelector(element);\r\n\r\n        if(selector === null) {\r\n            return null;\r\n        }\r\n        \r\n        return this.vdom.getVisNodeFromSelector(selector);\r\n    }\r\n    \r\n    getNodeDataFromEl(el: HTMLElement): VdomNode {\r\n        const getRoundedAttr = (el: Element, attrName: string) => {\r\n            const val = el.getAttribute(attrName);\r\n            return val ? parseFloat(val) : null;\r\n        };\r\n        \r\n        const node = {\r\n            type: el.tagName.toLowerCase() as VdomNodeType,\r\n            transform: el.getAttribute('transform'),\r\n            d: el.getAttribute('d'),\r\n            className: el.getAttribute('class'),\r\n            id: el.getAttribute('id'),\r\n            r: getRoundedAttr(el, 'r'),\r\n            fill: el.getAttribute('fill'),\r\n            cx: getRoundedAttr(el, 'cx'),\r\n            cy: getRoundedAttr(el, 'cy'),\r\n            x: getRoundedAttr(el, 'x'),\r\n            y: getRoundedAttr(el, 'y'),\r\n            x1: getRoundedAttr(el, 'x1'),\r\n            x2: getRoundedAttr(el, 'x2'),\r\n            y1: getRoundedAttr(el, 'y1'),\r\n            y2: getRoundedAttr(el, 'y2'),\r\n            \"stroke-width\": getRoundedAttr(el, 'stroke-width'),\r\n            text: !el.childNodes || (el.childNodes.length === 1 && !(el.childNodes[0] as HTMLElement).tagName) ? el.textContent : undefined,\r\n            'font-size': el.getAttribute('font-size'),\r\n            'font': el.getAttribute('font'),\r\n            'text-anchor': el.getAttribute('text-anchor'),\r\n            style: {},\r\n            styleSpecificity: {},\r\n            children: [],\r\n            globalElementIndex: -1,\r\n        };\r\n        \r\n        const clean = obj => {\r\n            const propNames = Object.getOwnPropertyNames(obj);\r\n            for (let i = 0; i < propNames.length; i++) {\r\n                const propName = propNames[i];\r\n                if (obj[propName] === null || obj[propName] === undefined) {\r\n                    delete obj[propName];\r\n                }\r\n            }\r\n        };\r\n        \r\n        clean(node);\r\n        \r\n        return node;\r\n    }\r\n\r\n    private applyStyles() {\r\n        for (let i = 0; i < document.styleSheets.length; i++) {\r\n            const sheet = document.styleSheets[i] as any;\r\n            const rules = (sheet.rules ? sheet.rules : sheet.cssRules) as CSSRuleList;\r\n        \r\n            for (let j = 0; j < rules.length; j++) {\r\n                const rule = rules[j] as any;\r\n                const selector = rule.selectorText as string;\r\n                if(!selector) {\r\n                    continue; // Skip @imports etc.\r\n                }\r\n                this.applyRuleToMatchingNodes(selector, rule);\r\n            }\r\n        }\r\n\r\n        this.nodesToRestyle = [];\r\n    }\r\n\r\n    updateNodeSelector(oldSelector: string, newSelector: string) {\r\n        if(oldSelector === newSelector) {\r\n            return;\r\n        }\r\n        if(this.setAttrQueue[newSelector]) {\r\n            console.warn('having problems rearranging the elements! old:', oldSelector, ', new:', newSelector,\r\n                this.setAttrQueue[oldSelector], this.setAttrQueue[newSelector]);\r\n            delete this.setAttrQueue[oldSelector];\r\n        } else {\r\n            this.setAttrQueue[newSelector] = this.setAttrQueue[oldSelector];\r\n            delete this.setAttrQueue[oldSelector];\r\n        }\r\n    }\r\n\r\n    private applyRuleToMatchingNodes(selectorString: string, rule: {style: {[settingName: string]: string}}): boolean {\r\n        selectorString = selectorString.trim();\r\n\r\n        const selector = selectorString\r\n            .replace(' >', '>')\r\n            .replace('> ', '>')\r\n            .replace('svg>', '');\r\n        \r\n        const selectorPartsLooseStrict = selector.split(' ')\r\n            .map(part => part.split('>'));\r\n\r\n\r\n        const parentsOfInterest = [];\r\n        for(const nodeToBeStyled of this.nodesToRestyle) {\r\n            let parent = this.getNodeParent(nodeToBeStyled);\r\n            while(parent && parentsOfInterest.indexOf(parent) === -1) {\r\n                parentsOfInterest.push(parent);\r\n                parent = this.getNodeParent(parent);\r\n            }\r\n        }\r\n        const specificity = DrawingUtils.getCssRuleSpecificityNumber(selectorString);\r\n\r\n        const setStyle = (parentSelector: string, styleName: string, rule: {style: {[settingName: string]: string}},\r\n                          childIndex: number, child: VdomNode) => {\r\n            if(rule.style[styleName]) {\r\n                const longName = 'style;' + styleName;\r\n                const longSpecName = 'styleSpecificity;' + styleName;\r\n                this.checkAttrName(parentSelector, longName);\r\n                this.checkAttrName(parentSelector, longSpecName);\r\n                let setValue = false;\r\n\r\n                if(!this.setAttrQueue[parentSelector][longName][childIndex] && !child.style[styleName]) {\r\n                    setValue = true;\r\n                } else {\r\n                    if(child.styleSpecificity[styleName]) {\r\n                        // If a later rule has the same or higher specificity, apply.\r\n                        // Hence, later rules override earlier rules.\r\n                        if(child.styleSpecificity[styleName] <= specificity) {\r\n                            if(this.setAttrQueue[parentSelector][longSpecName][childIndex]) {\r\n                                setValue = this.setAttrQueue[parentSelector][longSpecName][childIndex] <= specificity;\r\n                            } else {\r\n                                setValue = true;\r\n                            }\r\n                        } else {\r\n                            setValue = this.setAttrQueue[parentSelector][longSpecName][childIndex] <= specificity;\r\n                        }\r\n                    } else {\r\n                        setValue = this.setAttrQueue[parentSelector][longSpecName][childIndex] <= specificity;\r\n                    }\r\n                }\r\n\r\n                if(setValue) {\r\n                    this.setAttrQueue[parentSelector][longName][childIndex] = rule.style[styleName];\r\n                    this.setAttrQueue[parentSelector][longSpecName][childIndex] = specificity;\r\n                }\r\n            }\r\n        };\r\n\r\n        const checkNode = (currentNode: VdomNode, looseIndex = 0, strictIndex = 0): boolean => {\r\n            const selPart = selectorPartsLooseStrict[looseIndex][strictIndex];\r\n\r\n            for(let childIndex = 0; childIndex < currentNode.children.length; childIndex++) {\r\n                const child = currentNode.children[childIndex];\r\n                if(parentsOfInterest.indexOf(child) === -1 && this.nodesToRestyle.indexOf(child) === -1) {\r\n                    continue;\r\n                }\r\n                let partialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\r\n\r\n                if(partialMatch) {\r\n                    if(selectorPartsLooseStrict[looseIndex].length > strictIndex + 1) {\r\n                        checkNode(child, looseIndex, strictIndex + 1);\r\n                    } else if(selectorPartsLooseStrict.length > looseIndex + 1) {\r\n                        checkNode(child, looseIndex + 1, strictIndex);\r\n                    } else {\r\n                        const parentSelector = this.getNodeSelector(currentNode);\r\n\r\n                        setStyle(parentSelector, 'stroke', rule, childIndex, child);\r\n                        setStyle(parentSelector, 'stroke-opacity', rule, childIndex, child);\r\n                        setStyle(parentSelector, 'stroke-width', rule, childIndex, child);\r\n                        setStyle(parentSelector, 'stroke-linejoin', rule, childIndex, child);\r\n                        setStyle(parentSelector, 'fill', rule, childIndex, child);\r\n                        setStyle(parentSelector, 'fill-opacity', rule, childIndex, child);\r\n                        setStyle(parentSelector, 'font', rule, childIndex, child);\r\n                    }\r\n                } else {\r\n                    if(child['removedClasses']) {\r\n                        // temporarily add the class, see if it matches this rule, and if so, un-apply its stuff.\r\n                        for(const removedClass of child['removedClasses']) {\r\n                            child.className += ' ' + removedClass;\r\n\r\n                            let newPartialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\r\n                            if(newPartialMatch) {\r\n                                const parentSelector = this.getNodeSelector(currentNode);\r\n                                this.removeRuleStylesFromNode(parentSelector, child, childIndex, rule);\r\n                            }\r\n\r\n                            child.className = child.className.substr(0, child.className.length -\r\n                                removedClass.length - 1);\r\n                        }\r\n                        setTimeout(() => {\r\n                            delete child['removedClasses'];\r\n                        }); // After this frame, reset which classes have been removed.\r\n                    }\r\n                    checkNode(child, looseIndex, strictIndex);\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        return checkNode(this.vdom.data);\r\n    }\r\n\r\n    removeRuleStylesFromNode(parentSelector: string, child: VdomNode, childIndex: number,\r\n                             rule: {style: {[settingName: string]: string}}) {\r\n        if(rule.style['stroke']) {\r\n            const color = drawingUtils.colorToRgba(rule.style['stroke']);\r\n            if(child.style['stroke'] === color || child.style['stroke-rgba'] === color) {\r\n                this.checkAttrName(parentSelector, 'style;stroke');\r\n                this.setAttrQueue[parentSelector]['style;stroke'][childIndex] = '';\r\n                this.checkAttrName(parentSelector, 'style;stroke-rgba');\r\n                this.setAttrQueue[parentSelector]['style;stroke-rgba'][childIndex] = '';\r\n            }\r\n        }\r\n        //TODO remove other styles.\r\n    }\r\n\r\n    removeNodeFromParent(element: Element, node: VdomNode) {\r\n        const parentSelector = element['parentSelector'];\r\n        const childIndex = element['childIndex'];\r\n        this.vdom.removeNode(childIndex, parentSelector);\r\n        let index = this.nodesToElements.nodes.indexOf(node);\r\n        if(index === -1) {\r\n            return console.error('node not found', node);\r\n        }\r\n\r\n        this.nodesToElements.nodes.splice(index, 1);\r\n        this.nodesToElements.elements.splice(index, 1);\r\n\r\n        // Remove all pending changes on this element\r\n        const selector = element['selector'];\r\n        delete this.setAttrQueue[selector];\r\n\r\n        // Update indices\r\n        for(let i = index; i < this.nodesToElements.nodes.length; i++) {\r\n            this.nodesToElements.nodes[i].globalElementIndex = i;\r\n        }\r\n\r\n        for(let attrName in this.setAttrQueue[parentSelector]) {\r\n            for(let i = childIndex + 1; i < this.setAttrQueue[parentSelector][attrName].length; i++) {\r\n                this.setAttrQueue[parentSelector][attrName][i-1] = this.setAttrQueue[parentSelector][attrName][i];\r\n            }\r\n        }\r\n    }\r\n\r\n    addNodeToParent(parentNode, node) {\r\n        parentNode.children.push(node);\r\n        this.nodesToRestyle.push(node);\r\n    }\r\n    \r\n    private addChildNodesToVisData(childEls: HTMLElement[]|NodeList, parentNode: VdomNode): void {\r\n        const parentEl = this.getElementFromNode(parentNode);\r\n\r\n        for(let i  = 0; i < childEls.length; i++) {\r\n            let el = childEls[i] as HTMLElement;\r\n            \r\n            try\r\n            {\r\n                const node = this.getNodeDataFromEl(el);\r\n\r\n                (el as any)['parentSelector'] = this.getElementSelector(parentEl);\r\n                (el as any)['selector'] = this.getElementSelector(<Element><any> el);\r\n                (el as any)['childIndex'] = parentNode.children.length;\r\n\r\n                parentNode.children.push(node);\r\n                this.linkNodeToElement(node, el);\r\n                this.nodesToRestyle.push(node);\r\n                \r\n                if(el.childNodes)\r\n                {\r\n                    this.addChildNodesToVisData(el.childNodes, node);\r\n                }\r\n                if(node.type === 'tspan')\r\n                {\r\n                    //console.log(node, el, el.childNodes, el.textContent);\r\n                    //console.log(el.childNodes[0])\r\n                    //console.log(node, style.textAnchor);\r\n                }\r\n                if(node.type === 'text')\r\n                {\r\n                    //console.log(node, el, el.childNodes, el.textContent);\r\n                }\r\n            }\r\n            catch(e)\r\n            {\r\n                //console.log(e);\r\n                //console.log(el);\r\n            }\r\n        }\r\n    }\r\n\r\n    getNodeSelector(node: VdomNode): string {\r\n        if(node === this.vdom.data) {\r\n            return 'svg';\r\n        }\r\n        const element = this.getElementFromNode(node);\r\n        if(!element) {\r\n            console.error('could not find element for node ', node);\r\n            return '';\r\n        }\r\n        return this.getElementSelector(element, undefined, node);\r\n    }\r\n    \r\n    getElementSelector(element: Element, parentNode?: VdomNode, node?: VdomNode): string|null {\r\n        let sel = (element as any)['selector'];\r\n        \r\n        if(sel)\r\n        {\r\n            return sel;\r\n        }\r\n        else\r\n        {\r\n            if(element === this.svg) {\r\n                sel = 'svg';\r\n            } else {\r\n                let parentSelector = (element as any)['parentSelector'] ?\r\n                    (element as any)['parentSelector'] as string : '';\r\n\r\n                if(!parentNode) {\r\n                    parentNode = this.vdom.getVisNodeFromSelector(parentSelector);\r\n                }\r\n                if(!parentNode) {\r\n                    console.warn('Element not found', element, parentSelector, parentSelector.length, this.vdom.data);\r\n                    return null;\r\n                }\r\n                let index = parentNode.children.length + 1;\r\n                if(node && parentNode.children.indexOf(node) !== -1) {\r\n                    index = parentNode.children.indexOf(node) + 1;\r\n                }\r\n                let name = element.localName;\r\n                if (!name) {\r\n                    console.error(parentNode);\r\n                    throw Error('name is null');\r\n                }\r\n                name = name.toLowerCase();\r\n                sel = this.combineElementSelectors(parentSelector, name, index);\r\n            }\r\n            \r\n            return sel;\r\n        }\r\n    }\r\n\r\n    combineElementSelectors(parentSelector: string, elementType: string, childIndex: number) {\r\n        return parentSelector + ' > ' + elementType + ':nth-child(' + childIndex + ')';\r\n    }\r\n\r\n    getNodeParent(node:VdomNode): VdomNode|null {\r\n        if(node === this.vdom.data) {\r\n            return null;\r\n        }\r\n        const el = this.getElementFromNode(node);\r\n        if(!el) {\r\n            return null;\r\n        }\r\n        const parentEl = el.parentNode as Element;\r\n        return this.getNodeFromElement(parentEl);\r\n    }\r\n\r\n    linkNodeToElement(node: VdomNode, element: Node) {\r\n        this.nodesToElements.nodes.push(node);\r\n        node.globalElementIndex = this.nodesToElements.elements.length;\r\n        this.nodesToElements.elements.push(element as Element);\r\n    }\r\n\r\n    getElementFromNode(node: VdomNode): Element {\r\n        if(node === this.vdom.data) {\r\n            return this.svg;\r\n        }\r\n        return this.nodesToElements.elements[node.globalElementIndex];\r\n    }\r\n\r\n    getNodeFromElement(element: Element): VdomNode {\r\n        if(element === this.svg) {\r\n            return this.vdom.data;\r\n        }\r\n        const elementIndex = this.nodesToElements.elements.indexOf(element);\r\n        return this.nodesToElements.nodes[elementIndex];\r\n    }\r\n\r\n    getParentNode(node: VdomNode): VdomNode|null {\r\n        const element = this.getElementFromNode(node);\r\n        const parentElement = element.parentNode as Element;\r\n        return this.getNodeFromElement(parentElement);\r\n    }\r\n\r\n    getTotalTransformation(node: VdomNode): Transformation {\r\n        let parent = this.getParentNode(node);\r\n        const parents = [node];\r\n\r\n        while(parent) {\r\n            parents.push(parent);\r\n            parent = this.getParentNode(parent);\r\n        }\r\n\r\n        parent = parents.pop();\r\n        let totalTransform: Transformation = {\r\n            translateX: 0,\r\n            translateY: 0,\r\n            scaleX: 0,\r\n            scaleY: 0,\r\n            rotate: 0,\r\n        };\r\n\r\n        while(parent) {\r\n            const transform = DrawingUtils.parseTransform(parent.transform);\r\n            totalTransform = DrawingUtils.addTransforms(totalTransform, transform);\r\n            parent = parents.pop();\r\n        }\r\n\r\n        return totalTransform;\r\n    }\r\n}\r\n\r\nlet safeLogCount = 0;\r\nfunction safeLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.log(...logContents);\r\n    }\r\n}\r\nfunction safeErrorLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.error(...logContents);\r\n    }\r\n}","import DrawingUtils from \"../canvasworker/drawingUtils\";\r\n\r\nexport class SetPropertyQueue {\r\n    [parentSelector: string]: {\r\n        [attrName: string]:\r\n            string[]|SharedArrayBuffer\r\n        \r\n    }\r\n}\r\n\r\nexport type VDOM = {\r\n    width: number;\r\n    height: number;\r\n    scale: number;\r\n} & VdomNode;\r\n\r\nexport type VdomNodeType = 'svg'|'g'|'rect'|'circle'|'path'|'title'|'tspan'|'text';\r\n\r\nexport type VdomNode = {\r\n    style: {[styleName: string]: string},\r\n    styleSpecificity: {[styleName: string]: number},\r\n    type: VdomNodeType,\r\n    children: VdomNode[],\r\n    globalElementIndex: number,\r\n    transform?: string,\r\n    fill?: string,\r\n    d?: string,\r\n    stroke?: string,\r\n    strokeWidth?: string,\r\n    cx?: number,\r\n    cy?: number,\r\n    r?: number,\r\n    x?: number,\r\n    y?: number,\r\n    x1?: number,\r\n    y1?: number,\r\n    x2?: number,\r\n    y2?: number,\r\n    dx?: string,\r\n    dy?: string,\r\n    width?: number,\r\n    height?: number,\r\n    textAlign?: string,\r\n    text?: string,\r\n    className?: string,\r\n    id?: string,\r\n}\r\n\r\nexport class VdomManager {\r\n\r\n    private static ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN = ['fill', 'stroke', 'opacity', 'x1', 'x2', 'y1', 'y2', 'x',\r\n        'y'];\r\n    \r\n    constructor(public data: VDOM, private ignoreDesign = false) {\r\n        //console.log(data);\r\n    }\r\n\r\n    enableFrontendDesignProperties() {\r\n        this.ignoreDesign = false;\r\n    }\r\n    \r\n    addNode(nodeData: VdomNode, parentNodeSelector: string) {\r\n        let parentNode = this.getVisNodeFromSelector(parentNodeSelector);\r\n        if(!parentNode) {\r\n            if(parentNodeSelector === \"\") {\r\n                parentNode = this.data;\r\n            } else {\r\n                console.error(parentNode, parentNodeSelector);\r\n            }\r\n        }\r\n        this.applyParentStyles(parentNode, nodeData);\r\n        \r\n        if(!parentNode || !parentNode.children) {\r\n            console.error('parent node not found or no children: ', parentNode, parentNodeSelector, this.data);\r\n        }\r\n        \r\n        parentNode.children.push(nodeData);\r\n        return nodeData;\r\n    }\r\n\r\n    removeNode(childIndex: number, parentNodeSelector: string) {\r\n        let parentNode = this.getVisNodeFromSelector(parentNodeSelector);\r\n        if(!parentNode) {\r\n            if(parentNodeSelector === \"\") {\r\n                parentNode = this.data;\r\n            } else {\r\n                console.error(parentNode, parentNodeSelector);\r\n            }\r\n        }\r\n\r\n        parentNode.children.splice(childIndex, 1);\r\n        this.cachedListSelections = {}; //TODO only remove relevant cache.\r\n    }\r\n\r\n    applyParentStyles(parentNode: VdomNode, childNode: VdomNode) {\r\n        for(const style in parentNode.style) {\r\n            if(!childNode.style[style]) {\r\n                childNode.style[style] = parentNode.style[style];\r\n            }\r\n        }\r\n    }\r\n    \r\n    getParentNodeFromSelector(parentSelector: string) {\r\n        if(!parentSelector) {\r\n            console.error('no parent selector', parentSelector);\r\n        }\r\n        //if(setAttrQueue.hasOwnProperty(parentSelector)) {\r\n        let parentNode;\r\n        if(parentSelector === 'SVG_PARENT') {\r\n            parentNode = {children: [this.data]};\r\n        } else {\r\n            parentNode = this.getVisNodeFromSelector(parentSelector);\r\n        }\r\n        if(!parentNode) {\r\n            console.error('parent node not found with selector', parentSelector);\r\n        }\r\n        return parentNode;\r\n    }\r\n\r\n    applyStyleToNodeAndChildren(node: VdomNode, styleName: string, styleValue: string, specificity: number) {\r\n        if(!node['styleSpecificity'][styleName] || node['styleSpecificity'][styleName] <= specificity) {\r\n            node['style'][styleName] = styleValue;\r\n            node['styleSpecificity'][styleName] = specificity;\r\n        }\r\n\r\n        if(node.children) {\r\n            for(let child of node.children) {\r\n                this.applyStyleToNodeAndChildren(child, styleName, styleValue, specificity);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static ROUNDED_ATTRS = ['cx', 'cy'];\r\n\r\n    updatePropertiesFromQueue(setAttrQueue: SetPropertyQueue) {\r\n        for(let parentSelector in setAttrQueue) {\r\n            if(!setAttrQueue[parentSelector]) {\r\n                continue;\r\n            }\r\n            const parentNode = this.getParentNodeFromSelector(parentSelector);\r\n            if(!parentNode) {\r\n                console.error('parent not found', parentSelector, setAttrQueue[parentSelector]);\r\n                continue;\r\n            }\r\n                \r\n            for(let attrName in setAttrQueue[parentSelector]) {\r\n                const attrNameStart = attrName.substr(0, 'style;'.length);\r\n\r\n                if(this.ignoreDesign && (attrNameStart === 'style;' ||\r\n                    VdomManager.ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN.indexOf(attrName) !== -1)) {\r\n                    continue;\r\n                }\r\n                \r\n                let values: string[]|Int32Array;\r\n                let factor: number;\r\n                \r\n                if('SharedArrayBuffer' in self &&\r\n                    setAttrQueue[parentSelector][attrName] instanceof SharedArrayBuffer) {\r\n                    values = new Int32Array(<ArrayBuffer> setAttrQueue[parentSelector][attrName]);\r\n                    factor = 0.1;\r\n                } else {\r\n                    values = setAttrQueue[parentSelector][attrName] as string[];\r\n                }\r\n                \r\n                for(let childIndex in values) {\r\n                    const childNode = parentNode.children[childIndex];\r\n                    if(!childNode) {\r\n                        continue;\r\n                    }\r\n                    let value = factor ? factor * <number> values[childIndex] : values[childIndex];\r\n                    if(attrNameStart === 'style;') {\r\n                        const styleName = attrName.substr('style;'.length);\r\n                        const specificityAttrName = 'styleSpecificity;' + styleName;\r\n                        try {\r\n                            const matchingSpecificity: number = setAttrQueue[parentSelector][specificityAttrName][childIndex];\r\n                            this.applyStyleToNodeAndChildren(childNode, styleName, <string> value, matchingSpecificity);\r\n                            this.updateDeducedStyles(childNode, styleName, <string> value);\r\n                        } catch (e) {\r\n                            console.error(setAttrQueue, specificityAttrName, parentSelector, childIndex)\r\n                            this.applyStyleToNodeAndChildren(childNode, styleName, <string> value, -1);\r\n                        }\r\n\r\n                    } else {\r\n                        if(VdomManager.ROUNDED_ATTRS.indexOf(attrName) !== -1) {\r\n                            value = Math.round(<number> value);\r\n                        }\r\n                        childNode[attrName] = value;\r\n                        this.updateDeducedStyles(childNode, attrName, <string> value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateDeducedStyles(node: VdomNode, attrName: string, value: string) {\r\n        if(['opacity', 'fill-opacity', 'stroke-opacity', 'stroke', 'fill'].indexOf(attrName) !== -1) {\r\n            let stroke = node.style.stroke ? node.style.stroke : node.stroke;\r\n            if(stroke) {\r\n                let strokeOpacity = node.style['stroke-opacity'] === undefined ? node.style['opacity']\r\n                    : node.style['stroke-opacity'];\r\n                if(strokeOpacity === undefined) {\r\n                    strokeOpacity = node['stroke-opacity'] === undefined ? node['opacity'] : node['stroke-opacity'];\r\n                }\r\n\r\n                node.style['stroke-rgba'] = DrawingUtils.colorToRgba(stroke, strokeOpacity);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private cachedListSelections: {[selector: string]: {[index: number]: VdomNode}} = {};\r\n    public getVisNodeFromSelector(selector: string): VdomNode|null {\r\n        const lastSplitPos = selector.lastIndexOf('>');\r\n        const selectorWithoutLast = selector.substr(0, lastSplitPos);\r\n        const lastPart = selector.substr(lastSplitPos + 1);\r\n        const parentSel = selectorWithoutLast ? this.cachedListSelections[selectorWithoutLast] : null;\r\n        let index = -1;\r\n        const nthChildPosition = lastPart.indexOf(':nth-child(');\r\n        if(nthChildPosition !== -1) {\r\n            index = parseInt(lastPart.substr(nthChildPosition + 11)); // length of ':nth-child('\r\n            if(parentSel && parentSel[index]) {\r\n                return parentSel[index];\r\n            }\r\n        }\r\n        \r\n        const selectedNodes: VdomNode[] = [];\r\n        this.findMatchingChildren(this.data, selector, 0, selectedNodes);\r\n        \r\n        if(selectedNodes && selectedNodes.length === 1) {\r\n            const el = selectedNodes[0];\r\n            if(index !== -1) {\r\n                if(!this.cachedListSelections[selectorWithoutLast]) {\r\n                    this.cachedListSelections[selectorWithoutLast] = {};\r\n                }\r\n                this.cachedListSelections[selectorWithoutLast][index] = el;\r\n            }\r\n            return el;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    public getVisNodesFromSelector(visNode: VdomNode, selector: string) {\r\n        const selectedNodes = [];\r\n        this.findMatchingChildren(visNode, selector, 0, selectedNodes);\r\n        return selectedNodes;\r\n    }\r\n\r\n    private findChildrenOfType(visNode: VdomNode, type: string, selectedNodes: VdomNode[]) {\r\n        const addDirectChildrenIfMatch = (node: VdomNode) => {\r\n            for(const child of node.children) {\r\n                if(child.type === type) {\r\n                    selectedNodes.push(child);\r\n                }\r\n                if(node.children.length !== 0) {\r\n                    addDirectChildrenIfMatch(child);\r\n                }\r\n            }\r\n        };\r\n        addDirectChildrenIfMatch(visNode);\r\n    }\r\n\r\n    public filterNodesBySelector(parentNode: VdomNode, nodes: VdomNode[], selector: string) {\r\n        return nodes.filter(node => VdomManager.isCssRulePartialMatch(selector, node, parentNode));\r\n    }\r\n    \r\n    private findMatchingChildren(visNode: VdomNode, selector: string, matchIndex: number, selectedNodes: VdomNode[],\r\n                                 selectedNodeSelectors: string[] = []) {\r\n        if(!selector && selector !== '') {\r\n            console.error(visNode, selector, matchIndex, selectedNodes, selectedNodeSelectors);\r\n            throw Error('undefined selector');\r\n        }\r\n\r\n        let selParts = selector.split('>').map(s => s.trim());\r\n        let selPart = selParts[matchIndex];\r\n        \r\n        if(matchIndex === 0 && selPart === 'svg') {\r\n            matchIndex++;\r\n            selPart = selParts[matchIndex];\r\n            if(matchIndex === selParts.length) {\r\n                selectedNodes.push(visNode);\r\n                selectedNodeSelectors.push(selector);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if(selector.match(/^[a-z]+$/)) {\r\n            return this.findChildrenOfType(visNode, selector, selectedNodes);\r\n        }\r\n        \r\n        for(let i = 0; i < visNode.children.length; i++) {\r\n            let node = visNode.children[i];\r\n            let matching = false;\r\n            \r\n            if(VdomManager.isCssRulePartialMatch(selPart, node, visNode)) {\r\n                if(matchIndex === selParts.length - 1) {\r\n                    selectedNodes.push(node);\r\n                    selectedNodeSelectors.push(selector);\r\n                } else {\r\n                    matching = true;\r\n                }\r\n            }\r\n            \r\n            if(node.children && (matching || selParts.length < 2) && matchIndex + 1 < selParts.length) {\r\n                this.findMatchingChildren(node, selector, matchIndex + 1, selectedNodes, selectedNodeSelectors);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static isCssRulePartialMatch(cssRuleSelectorPart: string, node: VdomNode, parentNode: VdomNode): boolean {\r\n        if(cssRuleSelectorPart.substr(0, 5) === ':not(') {\r\n            const newSelPart = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.length - 1).substr(5);\r\n            return !VdomManager.isCssRulePartialMatch(newSelPart, node, parentNode);\r\n        }\r\n        if(cssRuleSelectorPart[0] === '.') { // Example: .className or .classnameA.classnameB\r\n            const searchClassNames = cssRuleSelectorPart.split('.');\r\n            searchClassNames.shift(); // remove empty first string.\r\n            if(node.className) {\r\n                let allTrue = true;\r\n                for(const searchClassName of searchClassNames) {\r\n                    if(node.className.split(' ').indexOf(searchClassName) === -1) {\r\n                        allTrue = false;\r\n                    }\r\n                }\r\n                return allTrue;\r\n            }\r\n        } else if(cssRuleSelectorPart[0] === '#') { // Example: #id\r\n            if(cssRuleSelectorPart.substr(1) === node.id) {\r\n                return true;\r\n            }\r\n        } else if(cssRuleSelectorPart.match(/^[a-z]+$/)) { // Example: rect\r\n            if(cssRuleSelectorPart === node.type) {\r\n                return true;\r\n            }\r\n        } else if(cssRuleSelectorPart.indexOf(':nth-child(') !== -1) {\r\n            let type = 'any';\r\n            let indexPart = cssRuleSelectorPart;\r\n\r\n            if(cssRuleSelectorPart[0] !== ':') {\r\n                type = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.indexOf(':'));\r\n                indexPart = cssRuleSelectorPart.substr(cssRuleSelectorPart.indexOf(':'));\r\n            }\r\n\r\n            const targetIndex = parseInt(indexPart.substr(':nth-child('.length));\r\n            const index = parentNode.children.indexOf(node);\r\n\r\n            return (index === targetIndex - 1 && (type === 'any' || node.type === type));\r\n        }\r\n        else if(cssRuleSelectorPart.indexOf('.') !== -1) { // Example: rect.className\r\n            const cutoff = cssRuleSelectorPart.indexOf('.');\r\n            const typeName = cssRuleSelectorPart.substr(0, cutoff);\r\n            const className = cssRuleSelectorPart.substr(cutoff + 1);\r\n            if(typeName === node.type && node.className && node.className.split(' ').indexOf(className) !== -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nlet safeLogCount = 0;\r\nfunction safeLog(...logContents) {\r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.log(...logContents);\r\n    }\r\n}\r\nfunction safeErrorLog(...logContents) {\r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.error(...logContents);\r\n    }\r\n}","import {VdomManager, VdomNode} from \"../util/vdomManager\";\r\nimport DrawingUtils from \"./drawingUtils\";\r\nimport CanvasWorker from \"./canvasworker\";\r\n\r\nexport default class Canvasrenderer implements CanvasWorker {\r\n    \r\n    private ctx: CanvasRenderingContext2D;\r\n    \r\n    constructor(private vdom: VdomManager, private canvas: HTMLCanvasElement,\r\n                private forceSingle = false, private onDrawn = () => {}) {\r\n        const ctx = canvas.getContext('2d');\r\n        if(!ctx) throw new Error('could not create canvas context');\r\n        \r\n        this.ctx = ctx;\r\n        this.ctx.scale(this.vdom.data.scale, this.vdom.data.scale);\r\n        this.ctx.save();\r\n        \r\n        this.draw();\r\n        \r\n        setTimeout(() => {\r\n            console.log(this.forceSingle, this.vdom.data);\r\n            this.draw();\r\n        }, 1000);\r\n    }\r\n    \r\n    //private lastDrawn: VdomNode = null;\r\n    private lastFullSecond = 0;\r\n    private countSinceLastFullSecond = 0;\r\n    \r\n    draw() {\r\n        const ctx = this.ctx;\r\n        \r\n        ctx.restore();\r\n        ctx.save();\r\n        \r\n        //ctx.fillStyle = '#fff';\r\n        //ctx.fillRect(0, 0, this.vdom.data.width, this.vdom.data.height);\r\n        ctx.clearRect(0, 0, this.vdom.data.width, this.vdom.data.height);\r\n    \r\n        //this.lastDrawn = null;\r\n        this.drawLine(null, 'start');\r\n        this.drawCircle(null, 'start');\r\n        this.drawRect(null, 'start');\r\n        this.drawText(null, 'start');\r\n\r\n        this.drawNodeAndChildren(this.vdom.data, this.forceSingle);\r\n\r\n        this.drawLine(null, 'end');\r\n        this.drawCircle(null, 'end');\r\n        this.drawRect(null, 'end');\r\n        this.drawText(null, 'end');\r\n        \r\n        this.onDrawn();\r\n    \r\n        const fullSecond = Math.round(performance.now() / 1000);\r\n        if(fullSecond !== this.lastFullSecond) {\r\n            this.lastFullSecond = fullSecond;\r\n            //console.log(this.countSinceLastFullSecond);\r\n            this.countSinceLastFullSecond = 0;\r\n        }\r\n        this.countSinceLastFullSecond++;\r\n    }\r\n    \r\n    private drawNodeAndChildren(elData: VdomNode, forceSingle: boolean) {\r\n        const ctx = this.ctx;\r\n\r\n        ctx.save();\r\n        const hasTransformed = this.applyTransform(elData.transform);\r\n\r\n        if(elData.transform) {\r\n            forceSingle = true;\r\n        }\r\n        \r\n        if(elData.type && elData.type !== 'g' && (!elData.style.display || elData.style.display !== 'none')) {\r\n            if(elData.type === 'title') {\r\n                return;\r\n            }\r\n            \r\n            if(!forceSingle) {\r\n                /*if(!this.lastDrawn || (this.lastDrawn && this.lastDrawn.type !== elData.type)) {\r\n                    if(this.lastDrawn) {\r\n                        this.drawSingleNode(this.lastDrawn, 'end');\r\n                    }\r\n                    this.drawSingleNode(elData, 'start');\r\n                }*/\r\n    \r\n                this.drawSingleNode(elData);\r\n            } else {\r\n                this.drawSingleNode(elData, 'forcesingle');\r\n            }\r\n            \r\n            //this.lastDrawn = elData;\r\n        }\r\n        \r\n        if(elData.children) {\r\n            for(let i = 0; i < elData.children.length; i++) {\r\n                this.drawNodeAndChildren(elData.children[i], forceSingle);\r\n            }\r\n        }\r\n        ctx.restore();\r\n        if(hasTransformed) {\r\n            //ctx.restore();\r\n        }\r\n    }\r\n    \r\n    private drawSingleNode(elData: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        const type: string = elData.type;\r\n        const drawFct = this['draw' + type.substr(0,1).toUpperCase() + type.substr(1)];\r\n        if(!drawFct) {\r\n            return console.error('no draw function yet for ', type);\r\n        }\r\n        drawFct.call(this, elData, mode);\r\n    }\r\n\r\n    private drawClippath(elData: VdomNode) {\r\n        console.warn('clippaths can not be rendered yet.')\r\n    }\r\n    \r\n    private circlesByColor: {[color: string]: VdomNode[]} = {};\r\n    private drawCircle(elData: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        if(mode === 'normal') {\r\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\r\n            let fillOpacity = elData.style['fill-opacity'] ? elData.style['fill-opacity'] : elData.style['opacity'];\r\n            if(!fill) fill = 'rgb(0,0,0)';\r\n            const fillRgba = DrawingUtils.colorToRgba(fill, fillOpacity);\r\n            const stroke = this.getStrokeStyle(elData);\r\n            const handle = fillRgba + ';' + stroke;\r\n            if(!this.circlesByColor[handle]) {\r\n                this.circlesByColor[handle] = [];\r\n            }\r\n            this.circlesByColor[handle].push(elData);\r\n        }\r\n        if(mode === 'start') {\r\n            this.circlesByColor = {};\r\n            return;\r\n        }\r\n        if(mode === 'end') {\r\n            for(let fillAndStrokeColor in this.circlesByColor) {\r\n                if(this.circlesByColor.hasOwnProperty(fillAndStrokeColor)) {\r\n                    const split = fillAndStrokeColor.split(';');\r\n                    const fillColor = split[0];\r\n                    const strokeColor = split[1];\r\n\r\n                    this.ctx.fillStyle = fillColor;\r\n                    let sampleData = this.circlesByColor[fillAndStrokeColor][0];\r\n                    const lineWidth = sampleData.style['stroke-width'] ?\r\n                        parseFloat(sampleData.style['stroke-width']) : parseFloat(sampleData.strokeWidth);\r\n                    this.ctx.lineWidth = lineWidth ? lineWidth : 1;\r\n                    this.ctx.strokeStyle = strokeColor;\r\n\r\n                    this.ctx.beginPath();\r\n                    for(let elData of this.circlesByColor[fillAndStrokeColor]) {\r\n                        const cx = elData.cx ? elData.cx : 0;\r\n                        const cy = elData.cy ? elData.cy : 0;\r\n                        const r = elData.r;\r\n                        this.ctx.save();\r\n                        this.applyTransform(elData.transform);\r\n                        this.ctx.moveTo(cx + r, cy);\r\n                        this.ctx.arc(cx, cy, r, 0, 2 * Math.PI);\r\n                        this.ctx.restore();\r\n                        //this.ctx.restore();\r\n                    }\r\n\r\n                    if(fillColor !== 'none'){\r\n                        this.ctx.fill();\r\n                    }\r\n\r\n                    if(sampleData.style['stroke-rgba'] && sampleData.style['stroke-rgba'] !== 'none') {\r\n                        this.ctx.stroke();\r\n                    }\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        if(mode === 'forcesingle') {\r\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\r\n            if(!fill) fill = '#000';\r\n            let fillOpacity = elData.style['fill-opacity'] ? elData.style['fill-opacity'] : elData.style['opacity'];\r\n\r\n            const cx = elData.cx || 0;\r\n            const cy = elData.cy || 0;\r\n\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = DrawingUtils.colorToRgba(fill, fillOpacity);\r\n            this.ctx.strokeStyle = this.getStrokeStyle(elData);\r\n            this.ctx.lineWidth = elData.style['stroke-width'] ?\r\n                parseFloat(elData.style['stroke-width']) : parseFloat(elData.strokeWidth);\r\n            this.ctx.arc(cx, cy, elData.r, 0, 2 * Math.PI);\r\n            if(fill !== 'none'){\r\n                this.ctx.fill();\r\n            }\r\n\r\n            if(elData.style['stroke-rgba'] && elData.style['stroke-rgba'] !== 'none') {\r\n                this.ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getFillStyle(node: VdomNode): string {\r\n        let fill = node.style.fill ? node.style.fill : node.fill;\r\n        let opacity = node.style['fill-opacity'] ? node.style['fill-opacity'] : node.style['opacity'];\r\n        fill = DrawingUtils.colorToRgba(fill, opacity);\r\n        return fill;\r\n    }\r\n\r\n    private getStrokeStyle(node: VdomNode): string {\r\n        if(node.style['stroke-rgba']) {\r\n            return node.style['stroke-rgba'];\r\n        }\r\n        let stroke = node.style.stroke ? node.style.stroke : node.stroke;\r\n        if(stroke) {\r\n            let strokeOpacity = node.style['stroke-opacity'] === undefined ? node.style['opacity']\r\n                : node.style['stroke-opacity'];\r\n            if(strokeOpacity === undefined) {\r\n                strokeOpacity = node['stroke-opacity'] === undefined ? node['opacity'] : node['stroke-opacity'];\r\n            }\r\n\r\n            node.style['stroke-rgba'] = DrawingUtils.colorToRgba(stroke, strokeOpacity);\r\n            return node.style['stroke-rgba'];\r\n        }\r\n        return 'none';\r\n    }\r\n\r\n    private rectsByColor = {};\r\n\r\n    private drawRect(elData: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n\r\n        if(mode === 'normal') {\r\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\r\n            let fillOpacity = elData['fill-opacity'] ? elData['fill-opacity'] : elData['opacity'];\r\n            let fillOpacityStyle = elData.style['fill-opacity'] ? elData.style['fill-opacity'] : elData.style['opacity'];\r\n\r\n            if(fillOpacityStyle !== undefined) {\r\n                fillOpacity = fillOpacityStyle;\r\n            }\r\n\r\n            //if(!fill) fill = '#000';\r\n            const fillRgba = DrawingUtils.colorToRgba(fill, fillOpacity);\r\n            const stroke = this.getStrokeStyle(elData);\r\n            const handle = fillRgba + ';' + stroke;\r\n            if(!this.rectsByColor[handle]) {\r\n                this.rectsByColor[handle] = [];\r\n            }\r\n            this.rectsByColor[handle].push(elData);\r\n        }\r\n        if(mode === 'start') {\r\n            this.rectsByColor = {};\r\n            return;\r\n        }\r\n        if(mode === 'end') {\r\n            for(let fillAndStrokeColor in this.rectsByColor) {\r\n                if(this.rectsByColor.hasOwnProperty(fillAndStrokeColor)) {\r\n                    const split = fillAndStrokeColor.split(';');\r\n                    const fillColor = split[0];\r\n                    const strokeColor = split[1];\r\n                    this.ctx.fillStyle = fillColor;\r\n\r\n                    let sampleData = this.rectsByColor[fillAndStrokeColor][0];\r\n                    const lineWidth = sampleData.style['stroke-width'] ?\r\n                        parseFloat(sampleData.style['stroke-width']) : parseFloat(sampleData.strokeWidth);\r\n                    this.ctx.lineWidth = lineWidth ? lineWidth : 1;\r\n                    this.ctx.strokeStyle = strokeColor;\r\n\r\n                    this.ctx.beginPath();\r\n                    for(let elData of this.rectsByColor[fillAndStrokeColor]) {\r\n                        const cx = elData.cx ? elData.cx : 0;\r\n                        const cy = elData.cy ? elData.cy : 0;\r\n                        const r = elData.r;\r\n                        this.ctx.save();\r\n                        this.applyTransform(elData.transform);\r\n                        this.ctx.moveTo(cx + r, cy);\r\n                        this.ctx.rect(elData.x, elData.y, elData.width, elData.height);\r\n                        this.ctx.restore();\r\n                        //this.ctx.restore();\r\n                    }\r\n                    if(fillColor !== 'none'){\r\n                        this.ctx.fill();\r\n                    }\r\n\r\n                    if(sampleData.style['stroke-rgba'] && sampleData.style['stroke-rgba'] !== 'none') {\r\n                        this.ctx.stroke();\r\n                    }\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        if(mode === 'forcesingle') {\r\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\r\n            if(fill) {\r\n                fill = DrawingUtils.colorToRgba(fill, elData.style['fill-opacity']);\r\n            }\r\n\r\n            if(fill && fill !== 'none') {\r\n                this.ctx.fillStyle = elData.style.fill ? elData.style.fill : elData.fill;\r\n                this.ctx.fillRect(elData.x, elData.y, elData.width, elData.height);\r\n            }\r\n\r\n            let stroke = elData.style.stroke ? elData.style.stroke : elData.stroke;\r\n            if(stroke) {\r\n                stroke = DrawingUtils.colorToRgba(stroke, elData.style['stroke-opacity']);\r\n                this.ctx.strokeStyle = stroke;\r\n                this.ctx.beginPath();\r\n                this.ctx.rect(elData.x, elData.y, elData.width, elData.height);\r\n                this.ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawTexts: VdomNode[] = [];\r\n\r\n    private drawText(node: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        const drawSingle = (elData: VdomNode) => {\r\n            if(elData.text === '') {\r\n                return;\r\n            }\r\n            const fontFamily = 'Arial';\r\n            const fontSize = elData['font-size'] ? DrawingUtils.convertSizeToPx(elData['font-size']) + 'px' : '30px';\r\n            let font = elData.style['font'] ? elData.style['font'] : elData['font'];\r\n            if(!font) {\r\n                font = fontSize + ' ' + fontFamily;\r\n            }\r\n            if(elData['text-anchor']) {\r\n                const align = elData['text-anchor'] === 'middle' ? 'center' : elData['text-anchor'];\r\n                this.ctx.textAlign = align;\r\n            }\r\n            let fill = elData['fill'] ? elData['fill'] : elData.style['fill'];\r\n            if(!fill) fill = '#000';\r\n            this.ctx.font = font;\r\n            this.ctx.fillStyle = fill;\r\n            let x = elData.x || 0;\r\n            let y = elData.y || 0;\r\n            let dx = DrawingUtils.convertSizeToPx(elData.dx, false) || 0;\r\n            let dy = DrawingUtils.convertSizeToPx(elData.dy, false) || 0;\r\n            this.ctx.fillText(elData.text, x + dx, y + dy);\r\n        };\r\n        if(mode === 'start') {\r\n            this.drawTexts = [];\r\n            return;\r\n        }\r\n        if(mode === 'normal') {\r\n            this.drawTexts.push(node);\r\n            return;\r\n        }\r\n        if(mode === 'forcesingle') {\r\n            return drawSingle(node);\r\n        }\r\n        if(mode === 'end') {\r\n            for(const currentNode of this.drawTexts) {\r\n                drawSingle(currentNode);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    private drawPath(elData: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\r\n\r\n        const fill = this.getFillStyle(elData);\r\n        const stroke = this.getStrokeStyle(elData);\r\n        const strokeWidth = elData.style['stroke-width'] ? elData.style['stroke-width'] : elData['stroke-width'];\r\n\r\n        let p = new Path2D(elData.d);\r\n        this.ctx.fillStyle = fill;\r\n        if(stroke && stroke !== 'none') {\r\n            if(strokeWidth) {\r\n                this.ctx.lineWidth = strokeWidth;\r\n                this.ctx.strokeStyle = stroke;\r\n            } else {\r\n                this.ctx.strokeStyle = stroke;\r\n            }\r\n            if(elData.style['stroke-linejoin']) {\r\n                const lineJoin = elData.style['stroke-linejoin'];\r\n                if(lineJoin === 'bevel' || lineJoin === 'round' || lineJoin === 'miter') {\r\n                    this.ctx.lineJoin = lineJoin;\r\n                } else {\r\n                    console.error('unknown line join value:', lineJoin)\r\n                }\r\n            }\r\n            this.ctx.stroke(p);\r\n        }\r\n\r\n        if(fill && fill !== 'none') {\r\n            this.ctx.fill(p);\r\n        }\r\n    }\r\n    \r\n    private drawTspan(elData: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\r\n        \r\n        this.ctx.font = \"10px Arial\";\r\n        this.ctx.fillStyle = \"#000000\";\r\n        const textAlign = <CanvasTextAlign> (elData.style.textAnchor === \"middle\" ? \"center\" : elData.style.textAnchor);\r\n        this.ctx.textAlign = textAlign;\r\n        this.ctx.fillText(elData.text, elData.x, elData.y);\r\n    }\r\n\r\n    private drawTextpath(elData: VdomNode) {\r\n        console.warn('no draw function yet for textpath');\r\n    }\r\n\r\n    private linesByColor: {[color: string]: VdomNode[]} = {};\r\n    private drawLine(elData, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        if(this.vdom.data.scale > 1) {\r\n            //mode = 'forcesingle';\r\n            // In my tests, drawing a long connected path is very slow for high DPI devices.\r\n        }\r\n        if(mode === 'normal') {\r\n            const stroke = this.getStrokeStyle(elData);\r\n            if(stroke === 'none') {\r\n                return;\r\n            }\r\n            if(!this.linesByColor[stroke]) {\r\n                this.linesByColor[stroke] = [];\r\n            }\r\n            this.linesByColor[stroke].push(elData);\r\n        }\r\n        if(mode === 'start') {\r\n            this.linesByColor = {};\r\n            return;\r\n        }\r\n        if(mode === 'end') {\r\n            for(let strokeColor in this.linesByColor) {\r\n                if(this.linesByColor.hasOwnProperty(strokeColor)) {\r\n                    this.ctx.strokeStyle = strokeColor;\r\n\r\n                    let sampleData = this.linesByColor[strokeColor][0];\r\n                    this.ctx.lineWidth = sampleData.style['stroke-width'] ?\r\n                        parseFloat(sampleData.style['stroke-width']) : parseFloat(sampleData['stroke-width']);\r\n\r\n                    this.ctx.beginPath();\r\n                    for(let elData of this.linesByColor[strokeColor]) {\r\n                        this.ctx.save();\r\n                        this.applyTransform(elData.transform);\r\n                        this.ctx.moveTo(elData.x1, elData.y1);\r\n                        this.ctx.lineTo(elData.x2, elData.y2);\r\n                        this.ctx.restore();\r\n                        //this.ctx.restore();\r\n                    }\r\n\r\n                    this.ctx.stroke();\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        if(mode === 'forcesingle') {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(elData.x1, elData.y1);\r\n            this.ctx.lineTo(elData.x2, elData.y2);\r\n\r\n            this.ctx.strokeStyle = elData.style['stroke-rgba'];\r\n            //safeLog(stroke, this.ctx.strokeStyle);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n\r\n    private drawDefs(node: VdomNode) {\r\n        //TODO figure out.\r\n    }\r\n\r\n    private drawMarker(node: VdomNode) {\r\n        //TODO figure out.\r\n    }\r\n    \r\n    private applyTransform(transformString: string) {\r\n        const transform = transformString ? DrawingUtils.parseTransform(transformString) : null;\r\n        if(transform) {\r\n            if(transform.rotate) {\r\n                //console.log(transform.rotate);\r\n            }\r\n            //console.log(transformString);\r\n            this.ctx.transform(transform.scaleX, 0, 0, transform.scaleY, transform.translateX, transform.translateY);\r\n            //ctx.rotate(transform.rotate / 2 / Math.PI);\r\n            this.ctx.rotate(transform.rotate * Math.PI / 180);\r\n            //console.log(transform.rotate);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nlet safeLogCount = 0;\r\nfunction safeLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.log(...logContents);\r\n    }\r\n}\r\nfunction safeErrorLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.error(...logContents);\r\n    }\r\n}","import './custom';\r\nimport CanvasWorkerImporter = require('worker-loader?inline=true!./canvasworker');\r\n\r\nexport default CanvasWorkerImporter;","module.exports = function() {\n  return require(\"!!C:\\\\Users\\\\Tom Horak\\\\research\\\\wristvis\\\\ssvg\\\\node_modules\\\\worker-loader\\\\dist\\\\workers\\\\InlineWorker.js\")(\"!function(t){var e={};function s(r){if(e[r])return e[r].exports;var l=e[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,s),l.l=!0,l.exports}s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&\\\"object\\\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,\\\"default\\\",{enumerable:!0,value:t}),2&e&&\\\"string\\\"!=typeof t)for(var l in t)s.d(r,l,function(e){return t[e]}.bind(null,l));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,\\\"a\\\",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p=\\\"\\\",s(s.s=1)}([function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{static parseTransform(t){const e={translateX:0,translateY:0,scaleX:1,scaleY:1,rotate:0,translateBeforeScale:!1};if(t){if(\\\"string\\\"!=typeof t)return e.scaleX=t.k,e.scaleY=t.k,e.translateX=t.x,e.translateY=t.y,e;let s=t;s=s.replace(/ /g,\\\"\\\");const r=/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);r&&(e.translateX=parseFloat(r[1]),e.translateY=parseFloat(r[2]));const l=/\\\\s*scale\\\\(([-0-9.]+)\\\\)/.exec(s);l&&(e.scaleX=parseFloat(l[1]),e.scaleY=parseFloat(l[1]));const o=/\\\\s*rotate\\\\(([-0-9.]+)\\\\)/.exec(s);o&&(e.rotate=parseFloat(o[1])),/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)scale\\\\(([-0-9.]+)\\\\)/.exec(s)&&(e.translateBeforeScale=!0);const i=/\\\\s*matrix\\\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);i&&(e.scaleX=parseFloat(i[1]),e.scaleY=parseFloat(i[4]),e.translateX=parseFloat(i[5]),e.translateY=parseFloat(i[6]))}return e}static addTransforms(t,e){return{translateX:t.translateX+e.translateX,translateY:t.translateY+e.translateY,scaleX:t.scaleX*e.scaleX,scaleY:t.scaleY*e.scaleY,rotate:t.rotate+e.rotate}}static convertSizeToPx(t,e=!0){const s=e?14:void 0;return void 0===t?s:\\\"number\\\"==typeof t?t:\\\"em\\\"===t.substr(-2)?Math.round(12*parseFloat(t)):\\\"px\\\"===t.substr(-2)?parseInt(t):t.match(/^[0-9]+$/)?parseInt(t):(console.warn(\\\"size in unsupported format: \\\",t),s)}static colorToRgba(t,e=1){if(!t||\\\"none\\\"===t)return\\\"none\\\";if(t=r.CssNamedColorToHex(t),1===e&&\\\"string\\\"==typeof t)return t;if(\\\"string\\\"==typeof t&&\\\"#\\\"===t[0]){let s;if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(t))return 3==(s=t.substring(1)).length&&(s=s[0]+s[0]+s[1]+s[1]+s[2]+s[2]),\\\"rgba(\\\"+[(s=\\\"0x\\\"+s)>>16&255,s>>8&255,255&s].join(\\\",\\\")+\\\",\\\"+e+\\\")\\\";throw new Error(\\\"Bad Hex\\\")}if(\\\"object\\\"==typeof t){if(\\\"r\\\"in t)return\\\"rgba(\\\"+t.r+\\\",\\\"+t.g+\\\",\\\"+t.b+\\\",\\\"+e+\\\")\\\";if(\\\"h\\\"in t){const s=r.hslToRgb(t.h/360,t.s,t.l);return\\\"rgba(\\\"+s.r+\\\",\\\"+s.g+\\\",\\\"+s.b+\\\",\\\"+e+\\\")\\\"}}else if(\\\"rgb(\\\"===t.substr(0,4))return t.substr(0,t.length-1).replace(\\\"rgb\\\",\\\"rgba\\\")+\\\", \\\"+e+\\\")\\\";return t}static hslToRgb(t,e,s){var r,l,o;if(0==e)r=l=o=s;else{var i=function(t,e,s){return s<0&&(s+=1),s>1&&(s-=1),s<1/6?t+6*(e-t)*s:s<.5?e:s<2/3?t+(e-t)*(2/3-s)*6:t},n=s<.5?s*(1+e):s+e-s*e,a=2*s-n;r=i(a,n,t+1/3),l=i(a,n,t),o=i(a,n,t-1/3)}return{r:Math.round(255*r),g:Math.round(255*l),b:Math.round(255*o)}}static CssNamedColorToHex(t){return\\\"red\\\"===t?\\\"#ff0000\\\":\\\"steelblue\\\"===t?\\\"#4682b4\\\":\\\"black\\\"===t?\\\"#000000\\\":t}static getCssRuleSpecificityNumber(t){let e=0;t=t.replace(/ >/g,\\\">\\\").replace(/> /g,\\\">\\\");const s=[].concat.apply([],t.split(\\\" \\\").map(t=>t.split(\\\">\\\")));for(const t of s){e+=100;const s=t[0];if(\\\"#\\\"===s)e+=1e3;else if(\\\".\\\"===s){const s=t.split(\\\".\\\").length-1;e+=Math.min(900,100*s)}}return e}}e.default=r},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const l=s(2),o=r(s(3));let i;const n=self;let a;n.onmessage=function(t){const e=t.data;if(e&&e.cmd)switch(e.cmd){case\\\"INIT\\\":a=new l.VdomManager(e.data.visData);const t=!!e.data.safeMode;i=new o.default(a,e.data.canvas,t,()=>{n.postMessage({msg:\\\"DRAWN\\\"})});break;case\\\"UPDATE_NODES\\\":const s=e;for(let t of s.data.enterExit)if(\\\"ENTER\\\"===t.cmd){t.keepChildren||(t.node.children=[]);const e=a.addNode(t.node,t.parentNodeSelector);i.addNode&&i.addNode(e)}else\\\"EXIT\\\"===t.cmd&&a.removeNode(t.childIndex,t.parentNodeSelector);i.updatePropertiesFromQueue?i.updatePropertiesFromQueue(s.data.update):a.updatePropertiesFromQueue(s.data.update),i.draw();break;default:console.error(\\\"did not find command \\\",e.cmd)}}},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const l=r(s(0));e.SetPropertyQueue=class{};class o{constructor(t,e=!1){this.data=t,this.ignoreDesign=e,this.cachedListSelections={}}enableFrontendDesignProperties(){this.ignoreDesign=!1}addNode(t,e){let s=this.getVisNodeFromSelector(e);return s||(\\\"\\\"===e?s=this.data:console.error(s,e)),this.applyParentStyles(s,t),s&&s.children||console.error(\\\"parent node not found or no children: \\\",s,e,this.data),s.children.push(t),t}removeNode(t,e){let s=this.getVisNodeFromSelector(e);s||(\\\"\\\"===e?s=this.data:console.error(s,e)),s.children.splice(t,1),this.cachedListSelections={}}applyParentStyles(t,e){for(const s in t.style)e.style[s]||(e.style[s]=t.style[s])}getParentNodeFromSelector(t){let e;return t||console.error(\\\"no parent selector\\\",t),(e=\\\"SVG_PARENT\\\"===t?{children:[this.data]}:this.getVisNodeFromSelector(t))||console.error(\\\"parent node not found with selector\\\",t),e}applyStyleToNodeAndChildren(t,e,s,r){if((!t.styleSpecificity[e]||t.styleSpecificity[e]<=r)&&(t.style[e]=s,t.styleSpecificity[e]=r),t.children)for(let l of t.children)this.applyStyleToNodeAndChildren(l,e,s,r)}updatePropertiesFromQueue(t){for(let e in t){if(!t[e])continue;const s=this.getParentNodeFromSelector(e);if(s)for(let r in t[e]){const l=r.substr(0,\\\"style;\\\".length);if(this.ignoreDesign&&(\\\"style;\\\"===l||-1!==o.ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN.indexOf(r)))continue;let i,n;\\\"SharedArrayBuffer\\\"in self&&t[e][r]instanceof SharedArrayBuffer?(i=new Int32Array(t[e][r]),n=.1):i=t[e][r];for(let a in i){const c=s.children[a];if(!c)continue;let h=n?n*i[a]:i[a];if(\\\"style;\\\"===l){const s=r.substr(\\\"style;\\\".length),l=\\\"styleSpecificity;\\\"+s;try{const r=t[e][l][a];this.applyStyleToNodeAndChildren(c,s,h,r),this.updateDeducedStyles(c,s,h)}catch(r){console.error(t,l,e,a),this.applyStyleToNodeAndChildren(c,s,h,-1)}}else-1!==o.ROUNDED_ATTRS.indexOf(r)&&(h=Math.round(h)),c[r]=h,this.updateDeducedStyles(c,r,h)}}else console.error(\\\"parent not found\\\",e,t[e])}}updateDeducedStyles(t,e,s){if(-1!==[\\\"opacity\\\",\\\"fill-opacity\\\",\\\"stroke-opacity\\\",\\\"stroke\\\",\\\"fill\\\"].indexOf(e)){let e=t.style.stroke?t.style.stroke:t.stroke;if(e){let s=void 0===t.style[\\\"stroke-opacity\\\"]?t.style.opacity:t.style[\\\"stroke-opacity\\\"];void 0===s&&(s=void 0===t[\\\"stroke-opacity\\\"]?t.opacity:t[\\\"stroke-opacity\\\"]),t.style[\\\"stroke-rgba\\\"]=l.default.colorToRgba(e,s)}}}getVisNodeFromSelector(t){const e=t.lastIndexOf(\\\">\\\"),s=t.substr(0,e),r=t.substr(e+1),l=s?this.cachedListSelections[s]:null;let o=-1;const i=r.indexOf(\\\":nth-child(\\\");if(-1!==i&&(o=parseInt(r.substr(i+11)),l&&l[o]))return l[o];const n=[];if(this.findMatchingChildren(this.data,t,0,n),n&&1===n.length){const t=n[0];return-1!==o&&(this.cachedListSelections[s]||(this.cachedListSelections[s]={}),this.cachedListSelections[s][o]=t),t}return null}getVisNodesFromSelector(t,e){const s=[];return this.findMatchingChildren(t,e,0,s),s}findChildrenOfType(t,e,s){const r=t=>{for(const l of t.children)l.type===e&&s.push(l),0!==t.children.length&&r(l)};r(t)}filterNodesBySelector(t,e,s){return e.filter(e=>o.isCssRulePartialMatch(s,e,t))}findMatchingChildren(t,e,s,r,l=[]){if(!e&&\\\"\\\"!==e)throw console.error(t,e,s,r,l),Error(\\\"undefined selector\\\");let i=e.split(\\\">\\\").map(t=>t.trim()),n=i[s];if(0===s&&\\\"svg\\\"===n&&(n=i[++s],s===i.length))return r.push(t),void l.push(e);if(e.match(/^[a-z]+$/))return this.findChildrenOfType(t,e,r);for(let a=0;a<t.children.length;a++){let c=t.children[a],h=!1;o.isCssRulePartialMatch(n,c,t)&&(s===i.length-1?(r.push(c),l.push(e)):h=!0),c.children&&(h||i.length<2)&&s+1<i.length&&this.findMatchingChildren(c,e,s+1,r,l)}}static isCssRulePartialMatch(t,e,s){if(\\\":not(\\\"===t.substr(0,5)){const r=t.substr(0,t.length-1).substr(5);return!o.isCssRulePartialMatch(r,e,s)}if(\\\".\\\"===t[0]){const s=t.split(\\\".\\\");if(s.shift(),e.className){let t=!0;for(const r of s)-1===e.className.split(\\\" \\\").indexOf(r)&&(t=!1);return t}}else if(\\\"#\\\"===t[0]){if(t.substr(1)===e.id)return!0}else if(t.match(/^[a-z]+$/)){if(t===e.type)return!0}else{if(-1!==t.indexOf(\\\":nth-child(\\\")){let r=\\\"any\\\",l=t;\\\":\\\"!==t[0]&&(r=t.substr(0,t.indexOf(\\\":\\\")),l=t.substr(t.indexOf(\\\":\\\")));const o=parseInt(l.substr(\\\":nth-child(\\\".length));return s.children.indexOf(e)===o-1&&(\\\"any\\\"===r||e.type===r)}if(-1!==t.indexOf(\\\".\\\")){const s=t.indexOf(\\\".\\\"),r=t.substr(0,s),l=t.substr(s+1);if(r===e.type&&e.className&&-1!==e.className.split(\\\" \\\").indexOf(l))return!0}}return!1}}o.ATTRIBUTES_NOT_IGNORED_WITH_IGNOREDESIGN=[\\\"fill\\\",\\\"stroke\\\",\\\"opacity\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\",\\\"x\\\",\\\"y\\\"],o.ROUNDED_ATTRS=[\\\"cx\\\",\\\"cy\\\"],e.VdomManager=o},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const l=r(s(0));e.default=class{constructor(t,e,s=!1,r=(()=>{})){this.vdom=t,this.canvas=e,this.forceSingle=s,this.onDrawn=r,this.lastFullSecond=0,this.countSinceLastFullSecond=0,this.circlesByColor={},this.rectsByColor={},this.drawTexts=[],this.linesByColor={};const l=e.getContext(\\\"2d\\\");if(!l)throw new Error(\\\"could not create canvas context\\\");this.ctx=l,this.ctx.scale(this.vdom.data.scale,this.vdom.data.scale),this.ctx.save(),this.draw(),setTimeout(()=>{console.log(this.forceSingle,this.vdom.data),this.draw()},1e3)}draw(){const t=this.ctx;t.restore(),t.save(),t.clearRect(0,0,this.vdom.data.width,this.vdom.data.height),this.drawLine(null,\\\"start\\\"),this.drawCircle(null,\\\"start\\\"),this.drawRect(null,\\\"start\\\"),this.drawText(null,\\\"start\\\"),this.drawNodeAndChildren(this.vdom.data,this.forceSingle),this.drawLine(null,\\\"end\\\"),this.drawCircle(null,\\\"end\\\"),this.drawRect(null,\\\"end\\\"),this.drawText(null,\\\"end\\\"),this.onDrawn();const e=Math.round(performance.now()/1e3);e!==this.lastFullSecond&&(this.lastFullSecond=e,this.countSinceLastFullSecond=0),this.countSinceLastFullSecond++}drawNodeAndChildren(t,e){const s=this.ctx;if(s.save(),this.applyTransform(t.transform),t.transform&&(e=!0),t.type&&\\\"g\\\"!==t.type&&(!t.style.display||\\\"none\\\"!==t.style.display)){if(\\\"title\\\"===t.type)return;e?this.drawSingleNode(t,\\\"forcesingle\\\"):this.drawSingleNode(t)}if(t.children)for(let s=0;s<t.children.length;s++)this.drawNodeAndChildren(t.children[s],e);s.restore()}drawSingleNode(t,e=\\\"normal\\\"){const s=t.type,r=this[\\\"draw\\\"+s.substr(0,1).toUpperCase()+s.substr(1)];if(!r)return console.error(\\\"no draw function yet for \\\",s);r.call(this,t,e)}drawClippath(t){console.warn(\\\"clippaths can not be rendered yet.\\\")}drawCircle(t,e=\\\"normal\\\"){if(\\\"normal\\\"===e){let e=t.style.fill?t.style.fill:t.fill,s=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;e||(e=\\\"rgb(0,0,0)\\\");const r=l.default.colorToRgba(e,s)+\\\";\\\"+this.getStrokeStyle(t);this.circlesByColor[r]||(this.circlesByColor[r]=[]),this.circlesByColor[r].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=t.style.fill?t.style.fill:t.fill;e||(e=\\\"#000\\\");let s=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;const r=t.cx||0,o=t.cy||0;this.ctx.beginPath(),this.ctx.fillStyle=l.default.colorToRgba(e,s),this.ctx.strokeStyle=this.getStrokeStyle(t),this.ctx.lineWidth=t.style[\\\"stroke-width\\\"]?parseFloat(t.style[\\\"stroke-width\\\"]):parseFloat(t.strokeWidth),this.ctx.arc(r,o,t.r,0,2*Math.PI),\\\"none\\\"!==e&&this.ctx.fill(),t.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==t.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else for(let t in this.circlesByColor)if(this.circlesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let l=this.circlesByColor[t][0];const o=l.style[\\\"stroke-width\\\"]?parseFloat(l.style[\\\"stroke-width\\\"]):parseFloat(l.strokeWidth);this.ctx.lineWidth=o||1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.circlesByColor[t]){const t=e.cx?e.cx:0,s=e.cy?e.cy:0,r=e.r;this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t+r,s),this.ctx.arc(t,s,r,0,2*Math.PI),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),l.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==l.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else this.circlesByColor={}}getFillStyle(t){let e=t.style.fill?t.style.fill:t.fill,s=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;return e=l.default.colorToRgba(e,s)}getStrokeStyle(t){if(t.style[\\\"stroke-rgba\\\"])return t.style[\\\"stroke-rgba\\\"];let e=t.style.stroke?t.style.stroke:t.stroke;if(e){let s=void 0===t.style[\\\"stroke-opacity\\\"]?t.style.opacity:t.style[\\\"stroke-opacity\\\"];return void 0===s&&(s=void 0===t[\\\"stroke-opacity\\\"]?t.opacity:t[\\\"stroke-opacity\\\"]),t.style[\\\"stroke-rgba\\\"]=l.default.colorToRgba(e,s),t.style[\\\"stroke-rgba\\\"]}return\\\"none\\\"}drawRect(t,e=\\\"normal\\\"){if(\\\"normal\\\"===e){let e=t.style.fill?t.style.fill:t.fill,s=t[\\\"fill-opacity\\\"]?t[\\\"fill-opacity\\\"]:t.opacity,r=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;void 0!==r&&(s=r);const o=l.default.colorToRgba(e,s)+\\\";\\\"+this.getStrokeStyle(t);this.rectsByColor[o]||(this.rectsByColor[o]=[]),this.rectsByColor[o].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=t.style.fill?t.style.fill:t.fill;e&&(e=l.default.colorToRgba(e,t.style[\\\"fill-opacity\\\"])),e&&\\\"none\\\"!==e&&(this.ctx.fillStyle=t.style.fill?t.style.fill:t.fill,this.ctx.fillRect(t.x,t.y,t.width,t.height));let s=t.style.stroke?t.style.stroke:t.stroke;s&&(s=l.default.colorToRgba(s,t.style[\\\"stroke-opacity\\\"]),this.ctx.strokeStyle=s,this.ctx.beginPath(),this.ctx.rect(t.x,t.y,t.width,t.height),this.ctx.stroke())}}else for(let t in this.rectsByColor)if(this.rectsByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let l=this.rectsByColor[t][0];const o=l.style[\\\"stroke-width\\\"]?parseFloat(l.style[\\\"stroke-width\\\"]):parseFloat(l.strokeWidth);this.ctx.lineWidth=o||1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.rectsByColor[t]){const t=e.cx?e.cx:0,s=e.cy?e.cy:0,r=e.r;this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t+r,s),this.ctx.rect(e.x,e.y,e.width,e.height),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),l.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==l.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else this.rectsByColor={}}drawText(t,e=\\\"normal\\\"){const s=t=>{if(\\\"\\\"===t.text)return;const e=t[\\\"font-size\\\"]?l.default.convertSizeToPx(t[\\\"font-size\\\"])+\\\"px\\\":\\\"30px\\\";let s=t.style.font?t.style.font:t.font;if(s||(s=e+\\\" Arial\\\"),t[\\\"text-anchor\\\"]){const e=\\\"middle\\\"===t[\\\"text-anchor\\\"]?\\\"center\\\":t[\\\"text-anchor\\\"];this.ctx.textAlign=e}let r=t.fill?t.fill:t.style.fill;r||(r=\\\"#000\\\"),this.ctx.font=s,this.ctx.fillStyle=r;let o=t.x||0,i=t.y||0,n=l.default.convertSizeToPx(t.dx,!1)||0,a=l.default.convertSizeToPx(t.dy,!1)||0;this.ctx.fillText(t.text,o+n,i+a)};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return s(t);if(\\\"end\\\"!==e);else for(const t of this.drawTexts)s(t)}else this.drawTexts.push(t);else this.drawTexts=[]}drawPath(t,e=\\\"normal\\\"){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;const s=this.getFillStyle(t),r=this.getStrokeStyle(t),l=t.style[\\\"stroke-width\\\"]?t.style[\\\"stroke-width\\\"]:t[\\\"stroke-width\\\"];let o=new Path2D(t.d);if(this.ctx.fillStyle=s,r&&\\\"none\\\"!==r){if(l?(this.ctx.lineWidth=l,this.ctx.strokeStyle=r):this.ctx.strokeStyle=r,t.style[\\\"stroke-linejoin\\\"]){const e=t.style[\\\"stroke-linejoin\\\"];\\\"bevel\\\"===e||\\\"round\\\"===e||\\\"miter\\\"===e?this.ctx.lineJoin=e:console.error(\\\"unknown line join value:\\\",e)}this.ctx.stroke(o)}s&&\\\"none\\\"!==s&&this.ctx.fill(o)}drawTspan(t,e=\\\"normal\\\"){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;this.ctx.font=\\\"10px Arial\\\",this.ctx.fillStyle=\\\"#000000\\\";const s=\\\"middle\\\"===t.style.textAnchor?\\\"center\\\":t.style.textAnchor;this.ctx.textAlign=s,this.ctx.fillText(t.text,t.x,t.y)}drawTextpath(t){console.warn(\\\"no draw function yet for textpath\\\")}drawLine(t,e=\\\"normal\\\"){if(this.vdom.data.scale,\\\"normal\\\"===e){const e=this.getStrokeStyle(t);if(\\\"none\\\"===e)return;this.linesByColor[e]||(this.linesByColor[e]=[]),this.linesByColor[e].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e)\\\"forcesingle\\\"===e&&(this.ctx.beginPath(),this.ctx.moveTo(t.x1,t.y1),this.ctx.lineTo(t.x2,t.y2),this.ctx.strokeStyle=t.style[\\\"stroke-rgba\\\"],this.ctx.stroke());else for(let t in this.linesByColor)if(this.linesByColor.hasOwnProperty(t)){this.ctx.strokeStyle=t;let e=this.linesByColor[t][0];this.ctx.lineWidth=e.style[\\\"stroke-width\\\"]?parseFloat(e.style[\\\"stroke-width\\\"]):parseFloat(e[\\\"stroke-width\\\"]),this.ctx.beginPath();for(let e of this.linesByColor[t])this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(e.x1,e.y1),this.ctx.lineTo(e.x2,e.y2),this.ctx.restore();this.ctx.stroke()}}else this.linesByColor={}}drawDefs(t){}drawMarker(t){}applyTransform(t){const e=t?l.default.parseTransform(t):null;return!!e&&(e.rotate,this.ctx.transform(e.scaleX,0,0,e.scaleY,e.translateX,e.translateY),this.ctx.rotate(e.rotate*Math.PI/180),!0)}}}]);\\n//# sourceMappingURL=a0e671b10a1c998f5023.worker.js.map\", __webpack_public_path__ + \"a0e671b10a1c998f5023.worker.js\");\n};","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};"],"sourceRoot":""}