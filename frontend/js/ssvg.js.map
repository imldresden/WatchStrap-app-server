{"version":3,"sources":["webpack://SSVG/webpack/universalModuleDefinition","webpack://SSVG/webpack/bootstrap","webpack://SSVG/./canvasworker/drawingUtils.ts","webpack://SSVG/./frontend/exporter.ts","webpack://SSVG/./frontend/ssvg.ts","webpack://SSVG/./frontend/domhandler.ts","webpack://SSVG/./util/vdomManager.ts","webpack://SSVG/./canvasworker/canvasrenderer.ts","webpack://SSVG/./canvasworker/index.ts","webpack://SSVG/./canvasworker/canvasworker.ts","webpack://SSVG/./node_modules/worker-loader/dist/workers/InlineWorker.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DrawingUtils","[object Object]","transform","transformObject","translateX","translateY","scaleX","scaleY","rotate","translateBeforeScale","transformString","replace","translate","exec","parseFloat","scale","matrix","transformA","transformB","size","fallback","defaultValue","undefined","substr","Math","round","parseInt","match","console","warn","color","opacity","CssNamedColorToHex","test","substring","length","join","Error","g","b","rgb","hslToRgb","h","hue2rgb","q","default","ssvg_1","domhandler_1","__importDefault","canvasrenderer_1","drawingUtils_1","canvasworker_1","options","this","unassignedNodes","interactionSelections","svgAssignedAndSizeSet","lastTenCanvasDrawTimes","enterExitQueue","safeMode","useWorker","getFps","onDrawn","maxPixelRatio","canvas","document","createElement","worker","onmessage","e","data","msg","logDrawn","updateCanvas","raf","updateFps","requestAnimationFrame","captureD3On","setupElementsIfSvgExists","addEventListener","propagateMouseEvent","lastHovered","hoveredElement","dispatchEvent","MouseEvent","propagateWheelEvent","replaceNativeRemoveChild","replaceNativeAttribute","replaceNativePathFunctions","replaceNativeCreateElement","replaceNativeAppendChild","replaceD3Attr","replaceNativeSelect","replaceNativeGetComputedStyle","replaceD3Select","replaceD3Remove","svgEl","svg","getElementsByTagName","urlConnector","location","href","indexOf","svgSwitchUrl","svgSwitchComment","createComment","parentElement","appendChild","domHandler","vdom","getVDom","setCanvasSize","useAttrQueue","queue","keys","sendUpdateToWorker","setTimeout","renderer","updatePropertiesFromQueue","draw","width","height","devicePixelRatio","style","offscreen","transferControlToOffscreen","sendToWorker","cmd","visData","element","isWithinSvg","parentEl","parentNode","d3","originalOn","selection","on","me","el","_parents","children","push","apply","arguments","getReplacement","original","selector","_groups","error","node","getVisNode","childElements","getVisNodesFromSelector","map","getElementFromNode","returnValue","forEach","childNode","childEl","selectAll","select","origFilter","filter","selectorString","elements","firstElement","getNodeFromElement","nodes","selectors","split","sel","trim","filteredNodes","matchingNodes","filterNodesBySelector","filteredElements","origGetComputedStyle","getComputedStyle","getPropertyValue","propertyName","origQuerySelector","Element","querySelector","childNodes","globalElementIndex","originalFct","prefix","els","returnVal","getAttributeFromSelector","getElementSelector","getVisNodeFromSelector","child","queueSetAttributeOnElement","queueSetAttributeOnSelection","origSelectionAttr","attr","origSelectionStyle","originalClassed","classed","className","enableFrontendDesignProperties","indexOfParent","childIndex","parentSelector","parent","getParentNodeFromSelector","prevClassNames","evaluatedValue","__data__","newClassNames","originalTransition","transition","originalText","text","newRemove","getNewRemoveChild","d3Remove","updateChildSelectors","remove","origCreate","createElementNS","newArgs","Array","from","getNewAppendChild","childElement","oldSelector","combineElementSelectors","type","updateNodeSelector","origRemoveChild","skipUpdateSelectors","removeChild","writable","parentNodeSelector","removeNodeFromParent","origAppend","appended","el2","keepChildren","getNodeDataFromEl","setProperty","styleProp","linkNodeToElement","addNodeToParent","addNode","index","splice","origAppendChild","newAppend","insertBefore","newChild","refChild","origGetTotalLength","SVGPathElement","getTotalLength","getAttribute","origSetAttribute","origSetAttr","setAttribute","origSetAttrNS","setAttributeNS","origGetAttr","evt","propagateEvent","WheelEvent","new_event","triggeredElement","interactionSel","j","vdomNode","nodeAtPosition","clientX","clientY","svgChildEl","visNode","x","y","cx","cy","parseTransform","sqrt","pow","elX","elY","centerX","centerY","distanceX","abs","distanceY","getTotalTransformation","matchAny","Date","now","shift","timeForTenDrawsMs","fps","enterExit","update","postMessage","vdomManager_1","drawingUtils_2","ignoreDesign","sharedArrays","setAttrQueue","nodesToElements","nodesToRestyle","useSharedArrayFor","VdomManager","display","addChildNodesToVisData","attrName","safeLog","checkAttrName","fetch","origin","then","resp","blob","createImageBitmap","bitmap","log","styleName","useSharedArray","self","useBuffer","buffer","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","cb","applyStyles","getRoundedAttr","val","tagName","toLowerCase","id","fill","x1","x2","y1","y2","stroke-width","textContent","font-size","font","text-anchor","obj","propNames","getOwnPropertyNames","propName","clean","styleSheets","sheet","rules","cssRules","rule","selectorText","applyRuleToMatchingNodes","newSelector","selectorPartsLooseStrict","part","parentsOfInterest","nodeToBeStyled","getNodeParent","checkNode","currentNode","looseIndex","strictIndex","selPart","isCssRulePartialMatch","getNodeSelector","stroke","removeRuleStylesFromNode","colorToRgba","removeNode","childEls","localName","elementType","elementIndex","getParentNode","parents","pop","totalTransform","addTransforms","safeLogCount","logContents","SetPropertyQueue","cachedListSelections","nodeData","applyParentStyles","styleValue","applyStyleToNodeAndChildren","attrNameStart","values","factor","updateDeducedStyles","ROUNDED_ATTRS","strokeOpacity","lastSplitPos","lastIndexOf","selectorWithoutLast","lastPart","parentSel","nthChildPosition","selectedNodes","findMatchingChildren","addDirectChildrenIfMatch","matchIndex","selectedNodeSelectors","selParts","findChildrenOfType","matching","cssRuleSelectorPart","newSelPart","indexPart","targetIndex","cutoff","typeName","forceSingle","lastFullSecond","countSinceLastFullSecond","circlesByColor","rectsByColor","drawTexts","drawImages","linesByColor","ctx","getContext","save","restore","clearRect","drawLine","drawCircle","drawRect","drawText","drawImage","drawNodeAndChildren","fullSecond","performance","elData","applyTransform","drawSingleNode","drawFct","toUpperCase","fillOpacity","handle","getStrokeStyle","beginPath","fillStyle","strokeStyle","lineWidth","strokeWidth","arc","PI","fillAndStrokeColor","fillColor","strokeColor","sampleData","moveTo","fillOpacityStyle","fillRect","rect","drawSingle","fontSize","convertSizeToPx","align","textAlign","dx","dy","fillText","image","getFillStyle","Path2D","lineJoin","textAnchor","lineTo","CanvasWorkerImporter","URL","webkitURL","content","url","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","Blob","Worker","createObjectURL","encodeURIComponent"],"mappings":"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","file":"ssvg.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SSVG\"] = factory();\n\telse\n\t\troot[\"SSVG\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export type Transformation = {\r\n    translateX: number,\r\n    translateY: number,\r\n    scaleX: number,\r\n    scaleY: number,\r\n    rotate: number\r\n}\r\n\r\nexport default class DrawingUtils {\r\n    static parseTransform(transform: string|{}): Transformation {\r\n        const transformObject = {translateX: 0, translateY: 0, scaleX: 1, scaleY: 1, rotate: 0, translateBeforeScale: false};\r\n        \r\n        if (transform) {\r\n            if(typeof transform !== \"string\") {\r\n                transformObject.scaleX = transform['k'];\r\n                transformObject.scaleY = transform['k'];\r\n                transformObject.translateX = transform['x'];\r\n                transformObject.translateY = transform['y'];\r\n                return transformObject;\r\n            }\r\n            let transformString = <string> transform;\r\n            transformString = transformString.replace(/ /g, '');\r\n            \r\n            //let translate  = /translate\\((\\d+),(\\d+)\\)/.exec(transform);\r\n            const translate = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\r\n            if (translate) {\r\n                transformObject.translateX = parseFloat(translate[1]);\r\n                transformObject.translateY = parseFloat(translate[2]);\r\n            }\r\n            else {\r\n                //console.error('no translate found', transform);\r\n            }\r\n            \r\n            const scale = /\\s*scale\\(([-0-9.]+)\\)/.exec(transformString);\r\n            if (scale) {\r\n                transformObject.scaleX = parseFloat(scale[1]);\r\n                transformObject.scaleY = parseFloat(scale[1]);\r\n            }\r\n            else {\r\n                //console.error('no scale found', transform);\r\n            }\r\n            \r\n            const rotate = /\\s*rotate\\(([-0-9.]+)\\)/.exec(transformString);\r\n            if (rotate) {\r\n                transformObject.rotate = parseFloat(rotate[1]);\r\n            }\r\n            else {\r\n                //console.error('no rotate found', transform);\r\n            }\r\n            \r\n            const translateScale = /\\s*translate\\(([-0-9.]+),([-0-9.]+)\\)scale\\(([-0-9.]+)\\)/.exec(transformString);\r\n            if (translateScale) {\r\n                transformObject.translateBeforeScale = true;\r\n            }\r\n            \r\n            const matrix = /\\s*matrix\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\)/.exec(transformString);\r\n            if(matrix) {\r\n                transformObject.scaleX = parseFloat(matrix[1]);\r\n                // 2 is horizontal skewing\r\n                // 3 is vertical skewing\r\n                transformObject.scaleY = parseFloat(matrix[4]);\r\n                transformObject.translateX = parseFloat(matrix[5]);\r\n                transformObject.translateY = parseFloat(matrix[6]);\r\n            }\r\n        }\r\n        \r\n        return transformObject;\r\n    }\r\n\r\n    static addTransforms(transformA: Transformation, transformB: Transformation): Transformation {\r\n        return {\r\n            translateX: transformA.translateX + transformB.translateX,\r\n            translateY: transformA.translateY + transformB.translateY,\r\n            scaleX: transformA.scaleX * transformB.scaleX,\r\n            scaleY: transformA.scaleY * transformB.scaleY,\r\n            rotate: transformA.rotate + transformB.rotate\r\n        };\r\n    }\r\n\r\n    static convertSizeToPx(size: string|number, fallback = true): number|undefined {\r\n        const defaultValue = fallback ? 14 : undefined;\r\n        if(size === undefined) {\r\n            return defaultValue;\r\n        }\r\n        if(typeof size === \"number\") {\r\n            return size;\r\n        }\r\n        if(size.substr(-2) === 'em') {\r\n            return Math.round(parseFloat(size) * 12);\r\n        }\r\n        if(size.substr(-2) === 'px') {\r\n            return parseInt(size);\r\n        }\r\n        if(size.match(/^[0-9]+$/)) {\r\n            return parseInt(size);\r\n        }\r\n        console.warn('size in unsupported format: ', size);\r\n        return defaultValue;\r\n    }\r\n    \r\n    static colorToRgba(color: string|{r: number, g: number, b: number}|{h: number, s: number, l: number}, opacity: string|number = 1): string {\r\n        if(!color || color === 'none') {\r\n            return 'none';\r\n        }\r\n        color = DrawingUtils.CssNamedColorToHex(color);\r\n        if(opacity === 1 && typeof color === 'string') {\r\n            return color;\r\n        }\r\n        if(typeof color === 'string' && color[0] === '#') {\r\n            let c; // From https://stackoverflow.com/questions/21646738/convert-hex-to-rgba\r\n            if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(color)){\r\n                c = color.substring(1);\r\n                if(c.length == 3){\r\n                    c = c[0] + c[0] + c[1] + c[1] + c[2] + c[2];\r\n                }\r\n                c = '0x' + c;\r\n                return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',' + opacity + ')';\r\n            }\r\n            throw new Error('Bad Hex');\r\n        } else if(typeof color === 'object') {\r\n            if('r' in color) {\r\n                return 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')';\r\n            }\r\n            if('h' in color) {\r\n                const rgb = DrawingUtils.hslToRgb(color.h / 360, color.s, color.l);\r\n                return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\r\n            }\r\n        } else if(color.substr(0, 4) === 'rgb(') {\r\n            return color.substr(0, color.length - 1).replace('rgb','rgba') +\r\n                ', ' + opacity + ')';\r\n        }\r\n        return color;\r\n    }\r\n\r\n    // From https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\r\n    static hslToRgb(h, s, l) {\r\n        var r, g, b;\r\n\r\n        if(s == 0){\r\n            r = g = b = l; // achromatic\r\n        } else {\r\n            var hue2rgb = function hue2rgb(p, q, t){\r\n                if(t < 0) t += 1;\r\n                if(t > 1) t -= 1;\r\n                if(t < 1/6) return p + (q - p) * 6 * t;\r\n                if(t < 1/2) return q;\r\n                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n                return p;\r\n            };\r\n\r\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            var p = 2 * l - q;\r\n            r = hue2rgb(p, q, h + 1/3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1/3);\r\n        }\r\n\r\n        return {r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255)};\r\n    }\r\n\r\n    static CssNamedColorToHex(color: any) { // TODO put a somewhat complete list here..\r\n        if(color === 'red') {\r\n            return '#ff0000';\r\n        }\r\n        if(color === 'steelblue') {\r\n            return '#4682b4';\r\n        }\r\n        if(color === 'black') {\r\n            return '#000000';\r\n        }\r\n        //TODO add more colors.\r\n        return color;\r\n    }\r\n}","import SSVG from \"./ssvg\";\r\n\r\nexport = SSVG;","import {VdomManager, VdomNode} from \"../util/vdomManager\";\r\nimport {CanvasWorkerMessage, CanvasUpdateWorkerMessage, CanvasUpdateData} from \"../util/canvas-worker-message\"\r\nimport Domhandler from \"./domhandler\";\r\nimport CanvasWorker from \"../canvasworker/canvasworker\";\r\nimport Canvasrenderer from \"../canvasworker/canvasrenderer\";\r\nimport DrawingUtils from \"../canvasworker/drawingUtils\";\r\nimport CanvasWorkerImporter from '../canvasworker';\r\n\r\nexport default class SSVG {\r\n    private unassignedNodes: Node[] = [];\r\n    private worker: Worker;\r\n    private domHandler: Domhandler;\r\n    private vdom: VdomManager;\r\n    private interactionSelections: HTMLElement[] = [];\r\n    \r\n    private renderer: CanvasWorker;\r\n\r\n    private svg: SVGElement|undefined;\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private svgAssignedAndSizeSet = false;\r\n    \r\n    private lastTenCanvasDrawTimes: number[] = [];\r\n    \r\n    private enterExitQueue: CanvasUpdateData[] = [];\r\n\r\n    private readonly safeMode: boolean = false;\r\n    private readonly maxPixelRatio: number|undefined;\r\n    private readonly useWorker: boolean = true;\r\n    private readonly getFps: (fps: number) => void = () => {};\r\n    private readonly onDrawn: () => void = () => {};\r\n\r\n    private hoveredElement: Element|undefined;\r\n\r\n    constructor(options?: {\r\n        safeMode?: boolean,\r\n        maxPixelRatio?: number,\r\n        useWorker?: boolean,\r\n        getFps?: (fps: number) => void,\r\n        onDrawn?: () => void\r\n    }) {\r\n        if(options) {\r\n            if(options.safeMode !== undefined) {\r\n                this.safeMode = options.safeMode;\r\n            }\r\n            this.maxPixelRatio = options.maxPixelRatio;\r\n            if(options.useWorker !== undefined) {\r\n                this.useWorker = options.useWorker;\r\n            }\r\n            if(options.getFps !== undefined) {\r\n                this.getFps = options.getFps;\r\n            }\r\n            if(options.onDrawn !== undefined) {\r\n                this.onDrawn = options.onDrawn;\r\n            }\r\n        }\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        if(!('OffscreenCanvas' in window)) {\r\n            this.useWorker = false;\r\n        }\r\n        \r\n        if(this.useWorker) {\r\n            this.worker = new CanvasWorkerImporter();\r\n    \r\n            this.worker.onmessage = e => {\r\n                if(e.data && e.data.msg && e.data.msg === 'DRAWN') {\r\n                    this.logDrawn();\r\n                    this.updateCanvas();\r\n                }\r\n            };\r\n            const raf = () => {\r\n                this.updateFps();\r\n                requestAnimationFrame(raf);\r\n            };\r\n            raf();\r\n        } else {\r\n            const raf = () => {\r\n                this.updateFps();\r\n                this.updateCanvas();\r\n                requestAnimationFrame(raf);\r\n            };\r\n            raf();\r\n        }\r\n\r\n        this.captureD3On();\r\n        this.setupElementsIfSvgExists();\r\n        \r\n        this.canvas.addEventListener('mousedown', e => this.propagateMouseEvent(e));\r\n        this.canvas.addEventListener('mousemove', e => {\r\n            const lastHovered = this.hoveredElement;\r\n            this.hoveredElement = this.propagateMouseEvent(e);\r\n            if(lastHovered !== this.hoveredElement) {\r\n                if(lastHovered) {\r\n                    lastHovered.dispatchEvent(new MouseEvent('mouseout', e));\r\n                }\r\n            }\r\n            this.propagateMouseEvent(e, 'mouseover');\r\n        });\r\n        this.canvas.addEventListener('mouseup', e => this.propagateMouseEvent(e));\r\n        this.canvas.addEventListener('click', e => this.propagateMouseEvent(e));\r\n        this.canvas.addEventListener('wheel', e => this.propagateWheelEvent(e));\r\n\r\n        this.replaceNativeRemoveChild();\r\n        this.replaceNativeAttribute();\r\n        this.replaceNativePathFunctions();\r\n        this.replaceNativeCreateElement();\r\n        this.replaceNativeAppendChild();\r\n        this.replaceD3Attr();\r\n        this.replaceNativeSelect();\r\n        this.replaceNativeGetComputedStyle();\r\n        this.replaceD3Select();\r\n        this.replaceD3Remove();\r\n\r\n        /*setTimeout(() => {\r\n            console.log(this.vdom.data);\r\n        }, 1000);*/\r\n    }\r\n    \r\n    private setupElementsIfSvgExists(svgEl?: SVGElement) {\r\n        \r\n        if(this.svg) {\r\n            return true;\r\n        }\r\n        \r\n        const svg = !svgEl ? document.getElementsByTagName('svg')[0] : svgEl;\r\n        \r\n        if(!svg) {\r\n            return false;\r\n        }\r\n\r\n        const urlConnector = document.location.href.indexOf('?') === -1 ? '?' : '&';\r\n        const svgSwitchUrl = document.location.href + urlConnector + 'svg';\r\n        const svgSwitchComment = document.createComment(' This project uses SSVG.io to render a SVG as Canvas.\\r\\n' +\r\n            'To inspect the SVG, please open the following URL:\\r\\n' +\r\n            svgSwitchUrl + '\\r\\n');\r\n        \r\n        this.svg = svg;\r\n        this.svg.parentElement.appendChild(svgSwitchComment);\r\n        this.svg.parentElement.appendChild(this.canvas);\r\n        this.domHandler = new Domhandler(this.svg, this.useWorker, this.useWorker);\r\n        this.vdom = this.domHandler.getVDom();\r\n\r\n        this.setCanvasSize();\r\n        \r\n        return true;\r\n    }\r\n    \r\n    private updateCanvas() {\r\n        if(!this.svgAssignedAndSizeSet) {\r\n            return;\r\n        }\r\n        if(this.useWorker) {\r\n            this.domHandler.useAttrQueue(queue => {\r\n                if(Object.keys(queue).length === 0) {\r\n                    //requestAnimationFrame(() => this.updateCanvas());\r\n                    setTimeout(() => this.updateCanvas(), 1);\r\n                    return;\r\n                }\r\n                this.sendUpdateToWorker(queue);\r\n            });\r\n        } else {\r\n            this.domHandler.useAttrQueue(queue => {\r\n                if(this.renderer.updatePropertiesFromQueue) {\r\n                    this.renderer.updatePropertiesFromQueue(queue);\r\n                }\r\n\r\n                if(Object.keys(queue).length === 0) {\r\n                    //requestAnimationFrame(() => this.updateCanvas());\r\n                    setTimeout(() => this.updateCanvas(), 1);\r\n                    return;\r\n                }\r\n                this.renderer.draw();\r\n                this.logDrawn();\r\n            });\r\n        }\r\n    }\r\n    \r\n    private setCanvasSize() {\r\n        if(!this.svg || !this.vdom.data.width || !this.vdom.data.height) {\r\n            return;\r\n        }\r\n        this.vdom.data.scale = window.devicePixelRatio;\r\n        if(this.maxPixelRatio !== undefined && this.vdom.data.scale > this.maxPixelRatio) {\r\n            this.vdom.data.scale = this.maxPixelRatio;\r\n        }\r\n    \r\n        this.canvas.style.width = this.vdom.data.width + 'px';\r\n        this.canvas.style.height = this.vdom.data.height + 'px';\r\n        this.canvas.width = this.vdom.data.width * this.vdom.data.scale;\r\n        this.canvas.height = this.vdom.data.height * this.vdom.data.scale;\r\n        \r\n        if(this.useWorker) {\r\n            const offscreen = (this.canvas as any).transferControlToOffscreen();\r\n            this.sendToWorker({cmd: 'INIT', data: {\r\n                    canvas: offscreen,\r\n                    visData: this.vdom.data,\r\n                    safeMode: this.safeMode\r\n                }\r\n            }, [offscreen]);\r\n        } else {\r\n            this.renderer = new Canvasrenderer(this.vdom, this.canvas, this.safeMode, () => {});\r\n        }\r\n        \r\n        this.svgAssignedAndSizeSet = true;\r\n    }\r\n\r\n    private isWithinSvg(element: Element) {\r\n        let isWithinSvg = false;\r\n        let parentEl = element;\r\n\r\n        while(parentEl && parentEl.parentNode) {\r\n            if(parentEl === this.svg) {\r\n                isWithinSvg = true;\r\n            }\r\n            parentEl = <Element> parentEl.parentNode;\r\n        }\r\n        return isWithinSvg;\r\n    }\r\n    \r\n    private captureD3On() {\r\n        if((window as any)['d3']) {\r\n            const d3 = (window as any)['d3'];\r\n            const originalOn = d3.selection.prototype.on;\r\n            const me = this;\r\n\r\n            d3.selection.prototype.on = function()\r\n            {\r\n                let el = this._parents && this._parents.length ? this._parents[0] : this[0].parentNode;\r\n                if(el === document.children[0]) {\r\n                    el = me.svg;\r\n                }\r\n                let isWithinSvg = me.isWithinSvg(el);\r\n\r\n                if(el && isWithinSvg && me.interactionSelections.indexOf(el) === -1)\r\n                {\r\n                    me.interactionSelections.push(el); // This one works for native get/setAttribute\r\n                    //interactionSelections.push(this); // This one works for d3 .attr.\r\n                }\r\n        \r\n                return originalOn.apply(this, arguments);\r\n            };\r\n        }\r\n    }\r\n    \r\n    private replaceD3Select() {\r\n        if((window as any)['d3']) {\r\n            const me = this;\r\n            const d3 = (window as any)['d3'];\r\n\r\n            const getReplacement = (original) => {\r\n                return function(selector: string|(()=>{})) {\r\n                    if(typeof selector === 'string') {\r\n\r\n                        let element: HTMLElement|SVGElement;\r\n                        if(this === d3) {\r\n                            element = me.svg;\r\n                        } else {\r\n                            element = this._groups ? this._groups[0][0] : this[0][0];\r\n                        }\r\n\r\n                        if(!element) {\r\n                            console.error('no element', this, selector);\r\n                            return original.apply(this, arguments);\r\n                        }\r\n                        const node = me.domHandler.getVisNode(element);\r\n\r\n                        if(!node) {\r\n                            console.warn('node not found', element);\r\n                            return original.apply(this, arguments);\r\n                        }\r\n\r\n                        const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\r\n                        const childElements = childNodes.map(node => {\r\n                            return me.domHandler.getElementFromNode(node);\r\n                        });\r\n\r\n                        const returnValue = original.apply(this, arguments);\r\n                        const elementsOutsideSvg: NodeList = returnValue._groups ? returnValue._groups[0]\r\n                            : returnValue[0];\r\n                        elementsOutsideSvg.forEach(childNode => {\r\n                            const childEl = <Element> <any> childNode;\r\n                            if(childElements.indexOf(childEl) === -1) {\r\n                                childElements.push();\r\n                            }\r\n                        });\r\n\r\n                        if(returnValue._groups) {\r\n                            returnValue._groups[0] = childElements;\r\n                        } else {\r\n                            // Older d3 versions\r\n                            const parentNode = returnValue[0].parentNode;\r\n                            returnValue[0] = childElements;\r\n                            returnValue[0].parentNode = parentNode;\r\n                        }\r\n\r\n                        return returnValue;\r\n                    }\r\n\r\n                    return original.apply(this, arguments);\r\n                }\r\n            };\r\n\r\n            d3.selection.prototype.selectAll = getReplacement(d3.selection.prototype.selectAll);\r\n            d3.selectAll = getReplacement(d3.selectAll);\r\n            d3.selection.prototype.select = getReplacement(d3.selection.prototype.select);\r\n            d3.select = getReplacement(d3.select);\r\n\r\n            const origFilter = d3.selection.prototype.filter;\r\n            d3.selection.prototype.filter = function(selectorString: string) {\r\n                const elements = this._groups ? this._groups[0] : this[0];\r\n                if(typeof selectorString !== 'string') {\r\n                    return origFilter.apply(this, arguments);\r\n                }\r\n                let firstElement = elements[0];\r\n                let i = 1;\r\n                while(!firstElement && i < elements.length) {\r\n                    i++;\r\n                    firstElement = elements[i];\r\n                }\r\n\r\n                const parentNode = firstElement ? me.domHandler.getNodeFromElement(firstElement.parentNode) : null;\r\n                const nodes = elements.map(element => me.domHandler.getNodeFromElement(element));\r\n\r\n                const selectors = selectorString.split(',').map(sel => sel.trim());\r\n                const filteredNodes = [];\r\n\r\n                for(const selector of selectors) {\r\n                    const matchingNodes = me.vdom.filterNodesBySelector(parentNode, nodes, selector);\r\n\r\n                    for(const node of matchingNodes) {\r\n                        if(filteredNodes.indexOf(node) === -1) {\r\n                            filteredNodes.push(node);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const filteredElements = filteredNodes.map(node => me.domHandler.getElementFromNode(node));\r\n\r\n                const returnValue = origFilter.apply(this, arguments);\r\n\r\n                if(returnValue._groups) {\r\n                    returnValue._groups[0] = filteredElements;\r\n                } else {\r\n                    // Older d3 versions\r\n                    const parentNode = returnValue[0].parentNode;\r\n                    returnValue[0] = filteredElements;\r\n                    returnValue[0].parentNode = parentNode;\r\n                }\r\n                return returnValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    private replaceNativeGetComputedStyle() {\r\n        const origGetComputedStyle = window.getComputedStyle;\r\n        const me = this;\r\n\r\n        window.getComputedStyle = function(element: HTMLElement) {\r\n            if(element && !me.isWithinSvg(element) && (<Window> <any> element) !== window) {\r\n                return origGetComputedStyle.call(this, element);\r\n            }\r\n\r\n            const node = me.domHandler.getNodeFromElement(element);\r\n            if(!node) {\r\n                console.warn('node not found for ', this, element);\r\n                return origGetComputedStyle.call(this, element);\r\n            }\r\n            return {\r\n                getPropertyValue(propertyName: string): string {\r\n                    //console.log(propertyName, node, node.style[propertyName]);\r\n                    return node.style[propertyName];\r\n                }\r\n            } as CSSStyleDeclaration;\r\n        };\r\n    }\r\n\r\n    private replaceNativeSelect() {\r\n        const origQuerySelector = Element.prototype.querySelector;\r\n        const me = this;\r\n\r\n        Element.prototype.querySelector = function(selector: string) {\r\n            if(!me.isWithinSvg(this)) {\r\n                return origQuerySelector.apply(this, arguments);\r\n            }\r\n\r\n            const node = me.domHandler.getVisNode(this);\r\n            const childNodes = me.vdom.getVisNodesFromSelector(node, selector);\r\n            if(childNodes.length === 0) {\r\n                console.warn('could not find selection', this, node, node.globalElementIndex, selector);\r\n                return null;\r\n            }\r\n            return me.domHandler.getElementFromNode(childNodes[0]);\r\n        };\r\n    }\r\n    \r\n    private replaceD3Attr() {\r\n\r\n        const me = this;\r\n\r\n        function getReplacement(originalFct, prefix = '') {\r\n            return function(name, value) {\r\n                \r\n                if(value === undefined) {\r\n\r\n                    if(me.unassignedNodes.indexOf(this) !== -1) {\r\n                        return originalFct.apply(this, arguments);\r\n                    } else {\r\n                        // Dealing with d3 v3.\r\n                        const els = this._groups ? this._groups[0] : this[0];\r\n                        if(els[0] && !me.isWithinSvg(els[0])) {\r\n                            return originalFct.apply(this, arguments);\r\n                        }\r\n                        if(els.length > 1) {\r\n                            const returnVal = [];\r\n                            for(const el of els) {\r\n                                returnVal.push(me.domHandler.getAttributeFromSelector(el, name))\r\n                            }\r\n                            return returnVal;\r\n                        } else {\r\n                            return me.domHandler.getAttributeFromSelector(els[0], name);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if(name === 'class' || !me.svg) {\r\n                        return originalFct.apply(this, arguments);\r\n                    }\r\n                    // For d3 v4, this would just be this.groups[0]. The rest is for\r\n                    // earlier versions, where selectAll() returned other values.\r\n                    let elements = this._groups ? this._groups[0] : this[0];\r\n\r\n                    if(typeof elements === 'object' && Object.keys(elements).length === 1 && elements.parentNode) {\r\n                        const parentElement = elements.parentNode;\r\n                        let parentNode: VdomNode;\r\n                        if(parentElement !== document.children[0]) {\r\n                            const selector = me.domHandler.getElementSelector(parentElement);\r\n                            if(selector === null) {\r\n                                console.error('selector not found', parentElement, elements);\r\n                                throw Error('selector not found');\r\n                            }\r\n                            parentNode = me.vdom.getVisNodeFromSelector(selector);\r\n                        } else {\r\n                            parentNode = me.vdom.data;\r\n                        }\r\n\r\n                        elements = [];\r\n                        for(const child of parentNode.children) {\r\n                            elements.push(me.domHandler.getElementFromNode(child));\r\n                        }\r\n                    }\r\n                    if(!elements) {\r\n                        return originalFct.apply(this, arguments);\r\n                    }\r\n                    const filteredElements = [];\r\n                    try {\r\n                        for (const element of elements) {\r\n                            if (element) {\r\n                                filteredElements.push(element);\r\n                            }\r\n                        }\r\n                    } catch(e) {\r\n                        console.error(elements, this);\r\n                        console.error(e);\r\n                    }\r\n                    if(filteredElements.length === 1) {\r\n                        const element = filteredElements[0];\r\n                        if(!element) {\r\n                            console.warn('element not found', this, name, value);\r\n                            return this;\r\n                        }\r\n                        if(!me.isWithinSvg(element)) {\r\n                            return originalFct.apply(this, arguments);\r\n                        }\r\n                        me.domHandler.queueSetAttributeOnElement(element, prefix + name, value);\r\n                    } else {\r\n                        if(!me.isWithinSvg(elements[0])) {\r\n                            return originalFct.apply(this, arguments);\r\n                        }\r\n                        me.domHandler.queueSetAttributeOnSelection(filteredElements, prefix + name, value);\r\n                    }\r\n                    \r\n                    if(filteredElements[0] === me.svg && (name === 'width' || name === 'height')) {\r\n                        me.vdom.data[name] = parseInt(value);\r\n                        me.setCanvasSize();\r\n                    }\r\n                \r\n                    return this;\r\n                }\r\n            };\r\n        }\r\n    \r\n        if((window as any)['d3']) {\r\n            const d3 = (window as any)['d3'];\r\n\r\n            const origSelectionAttr = d3.selection.prototype.attr;\r\n            d3.selection.prototype.attr = getReplacement(origSelectionAttr);\r\n\r\n            const origSelectionStyle = d3.selection.prototype.style;\r\n            d3.selection.prototype.style = getReplacement(origSelectionStyle, 'style;');\r\n\r\n            const originalClassed = d3.selection.prototype.classed;\r\n            d3.selection.prototype.classed = function(className: string,\r\n                                                      value?: boolean|((data: any, index: number) => boolean)) {\r\n                if(value !== undefined) {\r\n                    me.domHandler.enableFrontendDesignProperties();\r\n                    let elements = this._groups ? this._groups[0] : this[0];\r\n                    let i = 0;\r\n                    for(let element of elements) {\r\n                        if(element) {\r\n                            const indexOfParent = element.childIndex;\r\n                            const parentSelector = element['parentSelector'];\r\n                            const parent = me.vdom.getParentNodeFromSelector(parentSelector);\r\n                            const node = parent.children[indexOfParent];\r\n                            if(!node) {\r\n                                console.warn('node not found', element, parent, indexOfParent, className);\r\n                                continue;\r\n                            }\r\n                            const prevClassNames = node.className || '';\r\n                            const evaluatedValue = typeof value === \"function\" ? value((<any> element).__data__, i) : value;\r\n                            if(evaluatedValue === true) {\r\n                                if(prevClassNames.indexOf(className) === -1) {\r\n                                    let newClassNames = (prevClassNames + ' ' + className).trim();\r\n\r\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\r\n                                }\r\n                            } else if(evaluatedValue === false) {\r\n                                const containedPreviously = prevClassNames.indexOf(className) !== -1;\r\n                                if(containedPreviously) {\r\n                                    const newClassNames = prevClassNames.replace(className, '').replace('  ', ' ');\r\n                                    me.domHandler.queueSetAttributeOnElement(element, 'class', newClassNames);\r\n\r\n                                    node['removedClass'] = className; // For removing associated styles.\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        i++;\r\n                    }\r\n                }\r\n                return originalClassed.apply(this, arguments);\r\n            };\r\n\r\n            const originalTransition = d3.selection.prototype.transition;\r\n            d3.selection.prototype.transition = function() {\r\n                me.domHandler.enableFrontendDesignProperties();\r\n                return originalTransition.apply(this, arguments);\r\n            };\r\n\r\n            const originalText = d3.selection.prototype.text;\r\n            d3.selection.prototype.text = function(value?: boolean|((data: any, index: number) => boolean)) {\r\n                if(value !== undefined) {\r\n                    let elements = this._groups ? this._groups[0] : this[0];\r\n                    let i = 0;\r\n                    for(let element of elements) {\r\n                        if(element && me.isWithinSvg(element)) {\r\n                            const evaluatedValue = typeof value === \"function\" ? value((<any> element).__data__, i) : value;\r\n                            me.domHandler.queueSetAttributeOnElement(element, 'text', evaluatedValue);\r\n                        }\r\n\r\n                        i++;\r\n                    }\r\n                }\r\n                return originalText.apply(this, arguments);\r\n            };\r\n        }\r\n    }\r\n\r\n    private replaceD3Remove() {\r\n        if(window['d3']) {\r\n            const d3 = window['d3'];\r\n            const me = this;\r\n\r\n            const newRemove = this.getNewRemoveChild(() => {}, true);\r\n            const d3Remove = function() {\r\n                let elements = this._groups ? this._groups[0] : this[0];\r\n\r\n                if(elements.length) {\r\n                    let parentElement: HTMLElement = null;\r\n                    for(let i = elements.length - 1; i > -1; i--) {\r\n                        const element = elements[i];\r\n                        if(element) {\r\n                            parentElement = element.parentNode;\r\n                            if(!parentElement) {\r\n                                console.error('element has no parent node', element);\r\n                            }\r\n                            newRemove.call(parentElement, element);\r\n                        }\r\n\r\n                    }\r\n                    if(parentElement) {\r\n                        me.updateChildSelectors(parentElement);\r\n                    }\r\n                }\r\n                return this;\r\n            };\r\n            d3.selection.prototype.remove = d3Remove;\r\n            //d3.transition.prototype.remove = d3Remove;\r\n        }\r\n    }\r\n    \r\n    private replaceNativeCreateElement() {\r\n        const origCreate = document.createElementNS;\r\n        const me = this;\r\n        \r\n        document.createElementNS = function() {\r\n            let newArgs = Array.from(arguments);\r\n            const el = origCreate.apply(this, newArgs);\r\n            \r\n            /*el.appendChild = () => {\r\n                console.log('hi!!', el, arguments);\r\n                //return el;\r\n            };*/\r\n    \r\n            el.appendChild = me.getNewAppendChild(el.appendChild);\r\n            \r\n            me.unassignedNodes.push(el);\r\n    \r\n            //console.log(me.unassignedNodes);\r\n            \r\n            return el;\r\n        }\r\n    }\r\n\r\n    private updateChildSelectors(parentElement: Element, parentNode?: VdomNode) {\r\n        const parentSelector = parentElement['selector'];\r\n        if(!parentSelector) {\r\n            console.error('this node has no selector', parentElement)\r\n        }\r\n        if(!parentNode) {\r\n            parentNode = this.vdom.getParentNodeFromSelector(parentSelector);\r\n        }\r\n        for(let i = 0; i < parentNode.children.length; i++) {\r\n            const childNode: VdomNode = parentNode.children[i];\r\n            const childElement = this.domHandler.getElementFromNode(childNode);\r\n            if(!childElement) {\r\n                console.error('element not found', childNode, parentNode.children.length, i);\r\n                continue;\r\n            }\r\n            const oldSelector = childElement['selector'];\r\n\r\n            childElement['childIndex'] = i;\r\n            childElement['parentSelector'] = parentSelector;\r\n            childElement['selector'] = this.domHandler.combineElementSelectors(parentSelector, childNode.type, i+1);\r\n\r\n            this.domHandler.updateNodeSelector(oldSelector, childElement['selector']);\r\n\r\n            this.updateChildSelectors(childElement, childNode);\r\n        }\r\n    }\r\n\r\n    private getNewRemoveChild(origRemoveChild: ((<T extends Node>(oldChild: T) => T)|(() => void)),\r\n        skipUpdateSelectors = false) {\r\n        const me = this;\r\n\r\n        return function<T extends Node>(this: Element, el: T) {\r\n            if(!this) {\r\n                console.error('context not defined');\r\n                return el;\r\n            }\r\n            if(!me.isWithinSvg(<Element> <any> el)) {\r\n                return origRemoveChild.apply(this, arguments);\r\n            }\r\n            const parentNode = me.domHandler.getNodeFromElement(<Element> <any> this);\r\n            const parentSelector = this['selector'];\r\n            const node = me.domHandler.getNodeFromElement(<Element> <any> el);\r\n\r\n            if(!node) {\r\n                console.error('node not found', node, el, this, parentNode);\r\n                return origRemoveChild.apply(this, arguments);\r\n            }\r\n\r\n            // Remove all child elements.\r\n            for(const childNode of node.children) {\r\n                const childEl = me.domHandler.getElementFromNode(childNode);\r\n                el.removeChild(childEl);\r\n            }\r\n\r\n            // Remove from current parent first.\r\n            Object.defineProperty(el, 'parentNode', {\r\n                writable: true,\r\n                value: undefined\r\n            });\r\n\r\n            //console.log('remove')\r\n            me.enterExitQueue.push({\r\n                cmd: 'EXIT',\r\n                childIndex: el['childIndex'],\r\n                parentNodeSelector: parentSelector\r\n            });\r\n\r\n            me.domHandler.removeNodeFromParent(<Element> <any> el, node);\r\n\r\n            // Fix child indices of all children.\r\n            if(!skipUpdateSelectors) {\r\n                if(!parentSelector) {\r\n                    console.error('parent not found', parentNode, parentSelector, this, el);\r\n                }\r\n                me.updateChildSelectors(this);\r\n            }\r\n\r\n            delete el['selector'];\r\n\r\n            return el;\r\n        };\r\n    }\r\n\r\n    private replaceNativeRemoveChild() {\r\n        Element.prototype.removeChild = this.getNewRemoveChild(Element.prototype.removeChild);\r\n    }\r\n    \r\n    private getNewAppendChild(origAppend) {\r\n        const me = this;\r\n        \r\n        return function<T extends Node>(this: Element, el: T) {\r\n            if(!me.svgAssignedAndSizeSet) {\r\n                if(!me.svg && el['tagName'] === 'svg') {\r\n                    const appended = origAppend.apply(this, arguments);\r\n                    me.setupElementsIfSvgExists(<SVGElement> <any> el);\r\n                    return appended;\r\n                    \r\n                } else {\r\n                    return origAppend.apply(this, arguments);\r\n                }\r\n            }\r\n            \r\n            if(!me.isWithinSvg(this)) {\r\n                return origAppend.apply(this, arguments);\r\n            }\r\n\r\n            Object.defineProperty(el, 'ownerSVGElement', {\r\n                writable: true,\r\n                value: me.svg\r\n            });\r\n            el['appendChild'] = <T extends Node>(el2: T) => {\r\n                return me.getNewAppendChild(origAppend).call(el, el2);\r\n            };\r\n            const parentSelector = me.domHandler.getElementSelector(this);\r\n            if(parentSelector === null) {\r\n                return origAppend.apply(this, arguments);\r\n            }\r\n\r\n            const parentNode = me.domHandler.getNodeFromElement(this);\r\n            if(!parentNode) {\r\n                return console.error('parent node not found', parentSelector, this);\r\n            }\r\n            let node: VdomNode;\r\n            let keepChildren = false;\r\n\r\n            if(el['parentSelector']) {\r\n                node = me.domHandler.getVisNode(<Element> <any> el);\r\n\r\n                me.getNewRemoveChild(() => {}).call(this, el);\r\n                keepChildren = true; // If the element is being moved around, keep children.\r\n            } else {\r\n                node = me.domHandler.getNodeDataFromEl(<HTMLElement><any> el);\r\n            }\r\n\r\n            (el as any)['parentSelector'] = parentSelector;\r\n            (el as any)['selector'] = me.domHandler.getElementSelector(<Element><any> el, parentNode);\r\n            (el as any)['childIndex'] = parentNode.children.length;\r\n\r\n            Object.defineProperty(el, 'style', {\r\n                writable: true,\r\n                value: {\r\n                    setProperty: function(styleProp: string, value: string) {\r\n                        me.domHandler.queueSetAttributeOnElement(el as any, 'style;' + styleProp, value);\r\n                    },\r\n                    getPropertyValue: function(styleProp) {\r\n                        me.domHandler.enableFrontendDesignProperties();\r\n                        return node.style[styleProp];\r\n                    }\r\n                }\r\n            });\r\n\r\n            Object.defineProperty(el, 'parentNode', {\r\n                writable: true,\r\n                value: this\r\n            });\r\n    \r\n            me.domHandler.linkNodeToElement(node, el);\r\n            me.domHandler.addNodeToParent(parentNode, node);\r\n            me.updateChildSelectors(el as unknown as Element, node);\r\n            \r\n            if(me.useWorker) {\r\n                me.enterExitQueue.push({\r\n                    cmd: 'ENTER',\r\n                    node: node,\r\n                    parentNodeSelector: parentSelector,\r\n                    keepChildren: keepChildren\r\n                });\r\n            } else {\r\n                if(me.renderer.addNode) {\r\n                    me.renderer.addNode(node);\r\n                }\r\n            }\r\n    \r\n            if(me.unassignedNodes.indexOf(el) !== -1) {\r\n                const index = me.unassignedNodes.indexOf(el);\r\n                me.unassignedNodes.splice(index, 1);\r\n            }\r\n    \r\n            return el;\r\n        };\r\n    }\r\n    \r\n    private replaceNativeAppendChild() {\r\n        const origAppendChild = Element.prototype.appendChild;\r\n        const newAppend = this.getNewAppendChild(origAppendChild);\r\n    \r\n        Element.prototype.appendChild = newAppend;\r\n        Element.prototype.insertBefore = function<T extends Node>(newChild: T, refChild: Node|null) {\r\n    \r\n            newAppend.call(this, newChild);\r\n            \r\n            return newChild;\r\n        };\r\n    }\r\n\r\n    private replaceNativePathFunctions() {\r\n        const me = this;\r\n        //const origGetPointAtLength = SVGPathElement.prototype.getPointAtLength;\r\n        const origGetTotalLength = SVGPathElement.prototype.getTotalLength;\r\n\r\n        /*SVGPathElement.prototype.getPointAtLength = function() {\r\n            if(me.isWithinSvg(this)) {\r\n                const d = this.getAttribute('d');\r\n                me.origSetAttribute.call(this, 'd', d);\r\n            }\r\n            return origGetPointAtLength.apply(this, arguments);\r\n        };*/\r\n        SVGPathElement.prototype.getTotalLength = function() {\r\n            if(me.isWithinSvg(this)) {\r\n                const d = this.getAttribute('d');\r\n                me.origSetAttribute.call(this, 'd', d);\r\n            }\r\n\r\n            return origGetTotalLength.apply(this, arguments);\r\n        };\r\n    }\r\n\r\n    private origSetAttribute;\r\n\r\n    private replaceNativeAttribute() {\r\n        const origSetAttr = Element.prototype.setAttribute;\r\n        this.origSetAttribute = origSetAttr;\r\n        const origSetAttrNS = Element.prototype.setAttributeNS;\r\n        const origGetAttr = Element.prototype.getAttribute;\r\n        const me = this;\r\n    \r\n        Element.prototype.setAttribute = function(name: string, value: any) {\r\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\r\n                // Update the original SVG\r\n                origSetAttr.apply(this, arguments);\r\n                return;\r\n            }\r\n            if(name === 'class') {\r\n                origSetAttr.apply(this, arguments);\r\n            }\r\n            if(!me.isWithinSvg(this)) {\r\n                return origSetAttr.apply(this, arguments);\r\n            }\r\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\r\n        };\r\n        //TODO: Figure out how to access the element when setting a style property.\r\n        /*CSSStyleDeclaration.prototype.setProperty = function(name: string, value: any) {\r\n            safeLog(this, arguments);\r\n            me.elementHandler.queueSetAttributeOnElement(this, 'style;' + name, value);\r\n        };*/\r\n        Element.prototype.setAttributeNS = function(name: string, value: any) {\r\n            if(name === 'easypz' || me.unassignedNodes.indexOf(this) !== -1) {\r\n                // Update the original SVG\r\n                origSetAttrNS.apply(this, arguments);\r\n                return;\r\n            }\r\n            if(name === 'class') {\r\n                origSetAttrNS.apply(this, arguments);\r\n            }\r\n            if(!me.isWithinSvg(this)) {\r\n                return origSetAttrNS.apply(this, arguments);\r\n            }\r\n            me.domHandler.queueSetAttributeOnElement(this, name, value);\r\n        };\r\n    \r\n        Element.prototype.getAttribute = function(name) {\r\n            if(me.unassignedNodes.indexOf(this) !== -1) {\r\n                return origGetAttr.apply(this, arguments);\r\n            } else {\r\n                try {\r\n                    return me.domHandler.getAttributeFromSelector(this, name);\r\n                } catch(e) {\r\n                    console.error(e);\r\n                    return origGetAttr.apply(this, arguments);\r\n                }\r\n            }\r\n        };\r\n    }\r\n    \r\n    private propagateMouseEvent(evt: MouseEvent, type?: string) {\r\n        return this.propagateEvent(new MouseEvent(type? type : evt.type, evt));\r\n    }\r\n    \r\n    private propagateWheelEvent(evt: WheelEvent) {\r\n        return this.propagateEvent(new WheelEvent(evt.type, evt));\r\n    }\r\n    \r\n    private propagateEvent(new_event: MouseEvent|WheelEvent): undefined|Element {\r\n        this.svg.dispatchEvent(new_event); // for EasyPZ\r\n\r\n        let triggeredElement: undefined|Element;\r\n\r\n        for(let interactionSel of this.interactionSelections)\r\n        {\r\n            let parentSelector = this.domHandler.getElementSelector(interactionSel);\r\n            let parentNode = this.vdom.getVisNodeFromSelector(parentSelector);\r\n            \r\n            //let matchingVisParent = selectedNodes[i];\r\n            let j = 1;\r\n            \r\n            if(!parentNode) {\r\n                //console.error(interactionSel, parentSelector, parentNode);\r\n            } else {\r\n                for(let vdomNode of parentNode.children)\r\n                {\r\n                    let childNode = this.nodeAtPosition(vdomNode, new_event.clientX, new_event.clientY);\r\n                    if(childNode)\r\n                    {\r\n                        /*let selector = parentSelector + ' > :nth-child(' + j + ')';\r\n                        let svgEl = this.svg.querySelector(selector);*/\r\n                        const svgEl = this.domHandler.getElementFromNode(vdomNode);\r\n                        const svgChildEl = this.domHandler.getElementFromNode(childNode);\r\n\r\n                        if(svgChildEl) {\r\n                            Object.defineProperty(new_event, 'target', {\r\n                                writable: true,\r\n                                value: svgChildEl\r\n                            });\r\n                        }\r\n\r\n                        if(svgChildEl) {\r\n                            triggeredElement = svgChildEl;\r\n                            svgChildEl.dispatchEvent(new_event);\r\n                        }\r\n\r\n                        if(svgEl) {\r\n                            if(!triggeredElement) {\r\n                                triggeredElement = svgEl;\r\n                                svgEl.dispatchEvent(new_event);\r\n                            }\r\n                        }\r\n                    }\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n        return triggeredElement;\r\n    }\r\n    \r\n    private nodeAtPosition(visNode: VdomNode, x: number, y: number): false|VdomNode {\r\n        if (visNode.type === 'circle') {\r\n            let cx = visNode.cx || 0;\r\n            let cy = visNode.cy || 0;\r\n            if (visNode.transform) {\r\n                const transform = DrawingUtils.parseTransform(visNode.transform);\r\n                if (transform.translateX) {\r\n                    cx += transform.translateX;\r\n                }\r\n                if (transform.translateY) {\r\n                    cy += transform.translateY;\r\n                }\r\n            }\r\n            const distance = Math.sqrt(Math.pow(cx - x, 2) + Math.pow(cy - y, 2));\r\n            return distance < visNode.r ? visNode : false;\r\n        } else if(visNode.type === 'rect' || visNode.type === 'image') {\r\n\r\n            let elX = visNode.x || 0;\r\n            let elY = visNode.y || 0;\r\n            const width = visNode.width;\r\n            const height = visNode.height;\r\n\r\n            if (visNode.transform) {\r\n                const transform = DrawingUtils.parseTransform(visNode.transform);\r\n                if (transform.translateX) {\r\n                    elX += transform.translateX;\r\n                }\r\n                if (transform.translateY) {\r\n                    elY += transform.translateY;\r\n                }\r\n            }\r\n\r\n            const centerX = elX + width / 2;\r\n            const centerY = elY + height / 2;\r\n\r\n            const distanceX = Math.abs(centerX - x);\r\n            const distanceY = Math.abs(centerY - y);\r\n\r\n            return distanceX < width / 2 && distanceY < height / 2 ? visNode : false;\r\n\r\n        }\r\n        else if(visNode.type === 'g') {\r\n\r\n            const transform = this.domHandler.getTotalTransformation(visNode);\r\n            if(transform.translateX) {\r\n                x -= transform.translateX;\r\n            }\r\n            if(transform.translateY) {\r\n                y -= transform.translateY;\r\n            }\r\n\r\n            let matchAny: false|VdomNode = false;\r\n            for(let i = 0; i < visNode.children.length; i++) {\r\n                if(this.nodeAtPosition(visNode.children[i], x, y)) {\r\n                    matchAny = visNode.children[i];\r\n                }\r\n            }\r\n            return matchAny;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    private logDrawn() {\r\n        this.lastTenCanvasDrawTimes.push(Date.now());\r\n        \r\n        if(this.lastTenCanvasDrawTimes.length > 100) {\r\n            this.lastTenCanvasDrawTimes.shift(); // Remove first item\r\n        }\r\n        this.onDrawn();\r\n    }\r\n    \r\n    private updateFps() {\r\n        if(this.lastTenCanvasDrawTimes.length) {\r\n            const timeForTenDrawsMs = Date.now() - this.lastTenCanvasDrawTimes[0];\r\n            const fps = Math.round(this.lastTenCanvasDrawTimes.length / timeForTenDrawsMs * 1000);\r\n            this.getFps(fps);\r\n        }\r\n    }\r\n\r\n    private sendUpdateToWorker(queue) {\r\n        const msg: CanvasUpdateWorkerMessage = {\r\n            cmd: 'UPDATE_NODES',\r\n            data: {\r\n                enterExit: this.enterExitQueue,\r\n                update: queue,\r\n            }\r\n        };\r\n\r\n        this.sendToWorker(msg);\r\n\r\n        this.enterExitQueue = [];\r\n    }\r\n\r\n    private sendToWorker(msg: CanvasWorkerMessage, data?: any) {\r\n        this.worker.postMessage(msg, data);\r\n        //console.log(roughSizeOfObject(msg));\r\n    }\r\n}\r\n\r\n\r\nlet safeLogCount = 0;\r\nfunction safeLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.log(...logContents);\r\n    }\r\n}\r\nfunction safeErrorLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.error(...logContents);\r\n    }\r\n}","import {VdomManager, VdomNode, VdomNodeType} from \"../util/vdomManager\";\r\nimport DrawingUtils, {Transformation} from \"../canvasworker/drawingUtils\";\r\nimport drawingUtils from \"../canvasworker/drawingUtils\";\r\n\r\nexport default class Domhandler {\r\n    \r\n    private vdom: VdomManager;\r\n    private sharedArrays: {[parentSelector: string]: { [attrName: string]: Int32Array}} = {};\r\n    private setAttrQueue: {[parentSelector: string]: { [attrName: string]: (string[]|SharedArrayBuffer)}} = {};\r\n    private nodesToElements: { nodes: VdomNode[], elements: Element[]} = { nodes: [], elements: []};\r\n    private nodesToRestyle: VdomNode[] = [];\r\n    \r\n    constructor(private svg: SVGElement, useWorker: boolean, private ignoreDesign = true) {\r\n        const visData: any = {\r\n            width: this.svg.getAttribute('width'),\r\n            height: this.svg.getAttribute('height'),\r\n            scale: 1,\r\n            children: []\r\n        };\r\n\r\n        this.vdom = new VdomManager(visData, ignoreDesign);\r\n        this.svg.style.display = 'none';\r\n        this.svg['selector'] = 'svg';\r\n\r\n        this.addChildNodesToVisData(this.svg.childNodes, this.vdom.data);\r\n\r\n        window.setTimeout(() => {\r\n            // Re-do the styles.\r\n            this.nodesToRestyle = [];\r\n            // Can not use this.nodesToRestyle = this.nodesToElements.nodes because this links the object and adding\r\n            // to this.nodesToRestyle would break the nodesToElements mapping.\r\n            for(const node of this.nodesToElements.nodes) {\r\n                this.nodesToRestyle.push(node);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    enableFrontendDesignProperties() {\r\n        this.ignoreDesign = false;\r\n        this.vdom.enableFrontendDesignProperties();\r\n    }\r\n    \r\n    getVDom() {\r\n        return this.vdom;\r\n    }\r\n    \r\n    queueSetAttributeOnElement(element: Element, attrName: string, value: any) {\r\n        //TODO: merge with updatePropertiesFromQueue from VdomManager?\r\n        const parent = element.parentNode;\r\n        let parentSelector = parent === this.svg ? \"svg\" : (element as any)['parentSelector'] as string;\r\n        let childIndex = (element as any)['childIndex'];\r\n    \r\n        if(!parentSelector && element === this.svg) {\r\n            parentSelector = 'SVG_PARENT';\r\n            childIndex = 0;\r\n        }\r\n    \r\n        if(!parentSelector) {\r\n            safeLog(element, parent);\r\n            console.error('selector not found');\r\n            return;\r\n        }\r\n\r\n        if(element === this.svg && attrName.indexOf('style;') === 0) {\r\n            attrName = attrName.substr('style;'.length);\r\n        }\r\n        attrName = this.checkAttrName(parentSelector, attrName, false);\r\n        const evaluatedValue = typeof value === \"function\" ? value.call(<any> element, (<any> element).__data__, childIndex) : value;\r\n        this.setAttrQueue[parentSelector][attrName][childIndex] = evaluatedValue;\r\n\r\n        \r\n        if(attrName === \"href\") {\r\n            try {\r\n                fetch(location.origin + evaluatedValue, {mode: 'cors'})\r\n                    .then(resp => resp.blob())\r\n                    .then(blob => createImageBitmap(blob))\r\n                    .then(bitmap => {\r\n                        this.checkAttrName(parentSelector, \"image\", false);\r\n                        this.setAttrQueue[parentSelector][\"image\"][childIndex] = bitmap;\r\n                    });\r\n            }\r\n            catch(e) {console.log(e);}\r\n        }\r\n\r\n        if(attrName === 'className' || attrName.indexOf('style') !== -1) {\r\n            // Apply classes immediately so styles can be applied correctly.\r\n            const node = this.getNodeFromElement(element);\r\n\r\n            if(attrName === 'className') {\r\n                node.className = evaluatedValue;\r\n                this.nodesToRestyle.push(node);\r\n            } else {\r\n                const styleName = attrName.substr(6);\r\n                if(!node.style) {\r\n                    console.error('no styles on node ', node);\r\n                }\r\n                node.style[styleName] = evaluatedValue;\r\n            }\r\n        }\r\n    }\r\n    \r\n    queueSetAttributeOnSelection(elements, attrName, value) {\r\n        if(!elements.length) return;\r\n        if(!elements[0]) {\r\n            //console.error('selection elements not found', elements);\r\n            return;\r\n        }\r\n        const useSharedArray = 'SharedArrayBuffer' in self;\r\n\r\n        let parentElement = elements[0].parentNode;\r\n        let parentNode = this.getNodeFromElement(parentElement);\r\n        let parentSelector = parentElement === this.svg ? \"svg\" : parentElement['selector'];\r\n        if(!parentSelector) {\r\n            safeLog(elements, parentElement);\r\n            console.error('selector not found');\r\n        }\r\n\r\n        attrName = this.checkAttrName(parentSelector, attrName, useSharedArray, parentNode);\r\n        \r\n        for(let i = 0; i < elements.length; i++) {\r\n            const svgEl = elements[i];\r\n            const indexOfParent = svgEl.childIndex;\r\n\r\n            if(svgEl.parentNode !== parentElement) {\r\n                parentElement = svgEl.parentNode;\r\n                parentNode = this.getNodeFromElement(parentElement);\r\n                parentSelector = parentElement === this.svg ? \"svg\" : parentElement['selector'];\r\n                attrName = this.checkAttrName(parentSelector, attrName, useSharedArray, parentNode);\r\n            }\r\n\r\n            const evaluatedValue = typeof value === \"function\" ? value(svgEl.__data__, i) : value;\r\n            if(this.useSharedArrayFor.indexOf(attrName) === -1 || !useSharedArray) {\r\n                this.setAttrQueue[parentSelector][attrName][indexOfParent] = evaluatedValue;\r\n            } else {\r\n                this.sharedArrays[parentSelector][attrName][indexOfParent] = evaluatedValue * 10; // For precision.\r\n            }\r\n\r\n            \r\n            if(attrName === \"href\") {\r\n                try {\r\n                    fetch(location.origin + evaluatedValue, {mode: 'cors'})\r\n                    .then(resp => resp.blob())\r\n                    .then(blob => createImageBitmap(blob))\r\n                    .then(bitmap => {\r\n                        this.checkAttrName(parentSelector, \"image\", useSharedArray, parentNode);\r\n                        this.setAttrQueue[parentSelector][\"image\"][indexOfParent] = bitmap;\r\n                    });\r\n                }\r\n                catch(e) {console.log(e);}\r\n            }\r\n        }\r\n\r\n        if(attrName === 'className' || attrName.indexOf('style') !== -1) {\r\n            // Apply classes immediately so styles can be applied correctly.\r\n            for(let i = 0; i < elements.length; i++) {\r\n                const node = this.getNodeFromElement(elements[i]);\r\n                const evaluatedValue = typeof value === \"function\" ? value(elements[i].__data__, i) : value;\r\n\r\n                if(attrName === 'className') {\r\n                    node.className = evaluatedValue;\r\n                    this.nodesToRestyle.push(node);\r\n                } else {\r\n                    const styleName = attrName.substr(6);\r\n                    node.style[styleName] = evaluatedValue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    private useSharedArrayFor = ['cx', 'cy', 'x1', 'x2', 'y1', 'y2', 'x', 'y'];\r\n    \r\n    private checkAttrName(parentSelector: string, attrName: string, useBuffer = false, parentNode?: VdomNode) {\r\n        if(attrName === 'class') {\r\n            attrName = 'className';\r\n        }\r\n\r\n        if(!this.setAttrQueue[parentSelector]) {\r\n            this.setAttrQueue[parentSelector] = {};\r\n            this.sharedArrays[parentSelector] = {};\r\n        }\r\n\r\n        if(!useBuffer || this.useSharedArrayFor.indexOf(attrName) === -1) {\r\n            if(!this.setAttrQueue[parentSelector][attrName]) {\r\n                this.setAttrQueue[parentSelector][attrName] = [];\r\n            }\r\n        } else {\r\n            if(!this.sharedArrays[parentSelector][attrName]) {\r\n                if(!parentNode) {\r\n                    parentNode = this.vdom.getParentNodeFromSelector(parentSelector)\r\n                }\r\n                const length = parentNode.children.length;\r\n                const buffer = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * length);\r\n\r\n                this.setAttrQueue[parentSelector][attrName] = buffer;\r\n                this.sharedArrays[parentSelector][attrName] = new Int32Array(buffer);\r\n            }\r\n        }\r\n\r\n        return attrName;\r\n    }\r\n    \r\n    useAttrQueue(cb: (data) => void = () => {}) {\r\n        if(this.nodesToRestyle) {\r\n            this.applyStyles();\r\n        }\r\n\r\n        cb(this.setAttrQueue);\r\n        this.vdom.updatePropertiesFromQueue(this.setAttrQueue);\r\n        \r\n        this.setAttrQueue = {};\r\n    }\r\n    \r\n    getAttributesFromSelector(selection, name: string) {\r\n        // Dealing with d3 v3.\r\n        const els = selection._groups ? selection._groups[0] : selection[0];\r\n        \r\n        return els.map(el => this.getAttributeFromSelector(el, name));\r\n    }\r\n    \r\n    getAttributeFromSelector(element: Element, name: string) {\r\n        const node = this.getNodeFromElement(element);\r\n        \r\n        if(!node) {\r\n            console.error('trying to get attribute for unfit selection', node, element, name);\r\n            throw Error('element not found');\r\n        }\r\n        \r\n        return node[name];\r\n    }\r\n    \r\n    getVisNode(element: Element): VdomNode|null {\r\n        const selector = this.getElementSelector(element);\r\n\r\n        if(selector === null) {\r\n            return null;\r\n        }\r\n        \r\n        return this.vdom.getVisNodeFromSelector(selector);\r\n    }\r\n    \r\n    getNodeDataFromEl(el: HTMLElement): VdomNode {\r\n        const getRoundedAttr = (el: Element, attrName: string) => {\r\n            const val = el.getAttribute(attrName);\r\n            return val ? parseFloat(val) : null;\r\n        };\r\n        \r\n        const node = {\r\n            type: el.tagName.toLowerCase() as VdomNodeType,\r\n            transform: el.getAttribute('transform'),\r\n            d: el.getAttribute('d'),\r\n            className: el.getAttribute('class'),\r\n            id: el.getAttribute('id'),\r\n            r: getRoundedAttr(el, 'r'),\r\n            fill: el.getAttribute('fill'),\r\n            cx: getRoundedAttr(el, 'cx'),\r\n            cy: getRoundedAttr(el, 'cy'),\r\n            x: getRoundedAttr(el, 'x'),\r\n            y: getRoundedAttr(el, 'y'),\r\n            x1: getRoundedAttr(el, 'x1'),\r\n            x2: getRoundedAttr(el, 'x2'),\r\n            y1: getRoundedAttr(el, 'y1'),\r\n            y2: getRoundedAttr(el, 'y2'),\r\n            \"stroke-width\": getRoundedAttr(el, 'stroke-width'),\r\n            text: !el.childNodes || (el.childNodes.length === 1 && !(el.childNodes[0] as HTMLElement).tagName) ? el.textContent : undefined,\r\n            'font-size': el.getAttribute('font-size'),\r\n            'font': el.getAttribute('font'),\r\n            'text-anchor': el.getAttribute('text-anchor'),\r\n            href: el.getAttribute('href'),\r\n            style: {},\r\n            children: [],\r\n            globalElementIndex: -1,\r\n        };\r\n        \r\n        const clean = obj => {\r\n            const propNames = Object.getOwnPropertyNames(obj);\r\n            for (let i = 0; i < propNames.length; i++) {\r\n                const propName = propNames[i];\r\n                if (obj[propName] === null || obj[propName] === undefined) {\r\n                    delete obj[propName];\r\n                }\r\n            }\r\n        };\r\n        \r\n        clean(node);\r\n        \r\n        return node;\r\n    }\r\n    \r\n    private applyStyles() {\r\n        for (let i = 0; i < document.styleSheets.length; i++) {\r\n            const sheet = document.styleSheets[i] as any;\r\n            const rules = (sheet.rules ? sheet.rules : sheet.cssRules) as CSSRuleList;\r\n        \r\n            for (let j = 0; j < rules.length; j++) {\r\n                const rule = rules[j] as any;\r\n                const selector = rule.selectorText as string;\r\n                if(!selector) {\r\n                    continue; // Skip @imports etc.\r\n                }\r\n                this.applyRuleToMatchingNodes(selector, rule);\r\n            }\r\n        }\r\n\r\n        this.nodesToRestyle = [];\r\n    }\r\n\r\n    updateNodeSelector(oldSelector: string, newSelector: string) {\r\n        if(oldSelector === newSelector) {\r\n            return;\r\n        }\r\n        if(this.setAttrQueue[newSelector]) {\r\n            console.warn('having problems rearranging the elements! old:', oldSelector, ', new:', newSelector,\r\n                this.setAttrQueue[oldSelector], this.setAttrQueue[newSelector]);\r\n            delete this.setAttrQueue[oldSelector];\r\n        } else {\r\n            this.setAttrQueue[newSelector] = this.setAttrQueue[oldSelector];\r\n            delete this.setAttrQueue[oldSelector];\r\n        }\r\n    }\r\n\r\n    private applyRuleToMatchingNodes(selectorString: string, rule: {style: {[settingName: string]: string}}): boolean {\r\n\r\n        selectorString = selectorString.trim();\r\n\r\n        const selector = selectorString\r\n            .replace(' >', '>')\r\n            .replace('> ', '>')\r\n            .replace('svg>', '');\r\n        \r\n        const selectorPartsLooseStrict = selector.split(' ')\r\n            .map(part => part.split('>'));\r\n\r\n\r\n        const parentsOfInterest = [];\r\n        for(const nodeToBeStyled of this.nodesToRestyle) {\r\n            let parent = this.getNodeParent(nodeToBeStyled);\r\n            while(parent && parentsOfInterest.indexOf(parent) === -1) {\r\n                parentsOfInterest.push(parent);\r\n                parent = this.getNodeParent(parent);\r\n            }\r\n        }\r\n\r\n        const checkNode = (currentNode: VdomNode, looseIndex = 0, strictIndex = 0): boolean => {\r\n            const selPart = selectorPartsLooseStrict[looseIndex][strictIndex];\r\n\r\n            for(let childIndex = 0; childIndex < currentNode.children.length; childIndex++) {\r\n                const child = currentNode.children[childIndex];\r\n                if(parentsOfInterest.indexOf(child) === -1 && this.nodesToRestyle.indexOf(child) === -1) {\r\n                    continue;\r\n                }\r\n                let partialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\r\n\r\n                if(partialMatch) {\r\n                    if(selectorPartsLooseStrict[looseIndex].length > strictIndex + 1) {\r\n                        checkNode(child, looseIndex, strictIndex + 1);\r\n                    } else if(selectorPartsLooseStrict.length > looseIndex + 1) {\r\n                        checkNode(child, looseIndex + 1, strictIndex);\r\n                    } else {\r\n                        const parentSelector = this.getNodeSelector(currentNode);\r\n\r\n                        if(rule.style.stroke) {\r\n                            this.checkAttrName(parentSelector, 'style;stroke');\r\n                            if(!this.setAttrQueue[parentSelector]['style;stroke'][childIndex] && !child.style.stroke) {\r\n                                this.setAttrQueue[parentSelector]['style;stroke'][childIndex] = rule.style.stroke;\r\n                            }\r\n                        }\r\n                        if(rule.style['stroke-opacity']) {\r\n                            this.checkAttrName(parentSelector, 'style;stroke-opacity');\r\n                            if(!this.setAttrQueue[parentSelector]['style;stroke-opacity'][childIndex] && !child.style['stroke-opacity']) {\r\n                                this.setAttrQueue[parentSelector]['style;stroke-opacity'][childIndex] = rule.style['stroke-opacity'];\r\n                            }\r\n                        }\r\n                        if(rule.style['stroke-width']) {\r\n                            this.checkAttrName(parentSelector, 'style;stroke-width');\r\n                            if(!this.setAttrQueue[parentSelector]['style;stroke-width'][childIndex] && !child.style['stroke-width']) {\r\n                                this.setAttrQueue[parentSelector]['style;stroke-width'][childIndex] = parseInt(rule.style['stroke-width']);\r\n                            }\r\n                        }\r\n                        if(rule.style['stroke-linejoin']) {\r\n                            this.checkAttrName(parentSelector, 'style;stroke-linejoin');\r\n                            if(!this.setAttrQueue[parentSelector]['style;stroke-linejoin'][childIndex] && !child.style['stroke-linejoin']) {\r\n                                this.setAttrQueue[parentSelector]['style;stroke-linejoin'][childIndex] = rule.style['stroke-linejoin'];\r\n                            }\r\n                        }\r\n                        if(rule.style['fill-opacity']) {\r\n                            this.checkAttrName(parentSelector, 'style;fill-opacity');\r\n                            if(!this.setAttrQueue[parentSelector]['style;fill-opacity'][childIndex] && !child.style['fill-opacity']) {\r\n                                this.setAttrQueue[parentSelector]['style;fill-opacity'][childIndex] = rule.style['fill-opacity'];\r\n                            }\r\n                        }\r\n                        if(rule.style['fill']) {\r\n                            this.checkAttrName(parentSelector, 'style;fill');\r\n                            if(!this.setAttrQueue[parentSelector]['style;fill'][childIndex] && !child.style['fill']) {\r\n                                this.setAttrQueue[parentSelector]['style;fill'][childIndex] = rule.style['fill'];\r\n                            }\r\n                        }\r\n                        if(rule.style['font']) {\r\n                            this.checkAttrName(parentSelector, 'style;font');\r\n                            if(!this.setAttrQueue[parentSelector]['style;font'][childIndex] && !child.style['font']) {\r\n                                this.setAttrQueue[parentSelector]['style;font'][childIndex] = rule.style['font'];\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if(child['removedClass']) {\r\n                        // temporarily add the class, see if it matches this rule, and if so, un-apply its stuff.\r\n                        child.className +=  ' ' + child['removedClass'];\r\n\r\n                        let newPartialMatch = VdomManager.isCssRulePartialMatch(selPart, child, currentNode);\r\n                        if(newPartialMatch) {\r\n                            const parentSelector = this.getNodeSelector(currentNode);\r\n                            this.removeRuleStylesFromNode(parentSelector, child, childIndex, rule);\r\n                        }\r\n\r\n                        child.className = child.className.substr(0, child.className.length -\r\n                           child['removedClass'].length - 1);\r\n                        delete child['removedClass'];\r\n                    }\r\n                    checkNode(child, looseIndex, strictIndex);\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        return checkNode(this.vdom.data);\r\n    }\r\n\r\n    removeRuleStylesFromNode(parentSelector: string, child: VdomNode, childIndex: number,\r\n                             rule: {style: {[settingName: string]: string}}) {\r\n        if(rule.style['stroke']) {\r\n            const color = drawingUtils.colorToRgba(rule.style['stroke']);\r\n            if(child.style['stroke'] === color || child.style['stroke-rgba'] === color) {\r\n                this.checkAttrName(parentSelector, 'style;stroke');\r\n                this.setAttrQueue[parentSelector]['style;stroke'][childIndex] = '';\r\n                this.checkAttrName(parentSelector, 'style;stroke-rgba');\r\n                this.setAttrQueue[parentSelector]['style;stroke-rgba'][childIndex] = '';\r\n            }\r\n        }\r\n        //TODO remove other styles.\r\n    }\r\n\r\n    removeNodeFromParent(element: Element, node: VdomNode) {\r\n        const parentSelector = element['parentSelector'];\r\n        const childIndex = element['childIndex'];\r\n        this.vdom.removeNode(childIndex, parentSelector);\r\n        let index = this.nodesToElements.nodes.indexOf(node);\r\n        if(index === -1) {\r\n            return console.error('node not found', node);\r\n        }\r\n\r\n        this.nodesToElements.nodes.splice(index, 1);\r\n        this.nodesToElements.elements.splice(index, 1);\r\n\r\n        // Remove all pending changes on this element\r\n        const selector = element['selector'];\r\n        delete this.setAttrQueue[selector];\r\n\r\n        // Update indices\r\n        for(let i = index; i < this.nodesToElements.nodes.length; i++) {\r\n            this.nodesToElements.nodes[i].globalElementIndex = i;\r\n        }\r\n\r\n        for(let attrName in this.setAttrQueue[parentSelector]) {\r\n            for(let i = childIndex + 1; i < this.setAttrQueue[parentSelector][attrName].length; i++) {\r\n                this.setAttrQueue[parentSelector][attrName][i-1] = this.setAttrQueue[parentSelector][attrName][i];\r\n            }\r\n        }\r\n    }\r\n\r\n    addNodeToParent(parentNode, node) {\r\n        parentNode.children.push(node);\r\n        this.nodesToRestyle.push(node);\r\n    }\r\n    \r\n    private addChildNodesToVisData(childEls: HTMLElement[]|NodeList, parentNode: VdomNode): void {\r\n        const parentEl = this.getElementFromNode(parentNode);\r\n\r\n        for(let i  = 0; i < childEls.length; i++) {\r\n            let el = childEls[i] as HTMLElement;\r\n            \r\n            try\r\n            {\r\n                const node = this.getNodeDataFromEl(el);\r\n\r\n                (el as any)['parentSelector'] = this.getElementSelector(parentEl);\r\n                (el as any)['selector'] = this.getElementSelector(<Element><any> el);\r\n                (el as any)['childIndex'] = parentNode.children.length;\r\n\r\n                parentNode.children.push(node);\r\n                this.linkNodeToElement(node, el);\r\n                this.nodesToRestyle.push(node);\r\n                \r\n                if(el.childNodes)\r\n                {\r\n                    this.addChildNodesToVisData(el.childNodes, node);\r\n                }\r\n                if(node.type === 'tspan')\r\n                {\r\n                    //console.log(node, el, el.childNodes, el.textContent);\r\n                    //console.log(el.childNodes[0])\r\n                    //console.log(node, style.textAnchor);\r\n                }\r\n                if(node.type === 'text')\r\n                {\r\n                    //console.log(node, el, el.childNodes, el.textContent);\r\n                }\r\n            }\r\n            catch(e)\r\n            {\r\n                //console.log(e);\r\n                //console.log(el);\r\n            }\r\n        }\r\n    }\r\n\r\n    getNodeSelector(node: VdomNode): string {\r\n        if(node === this.vdom.data) {\r\n            return 'svg';\r\n        }\r\n        const element = this.getElementFromNode(node);\r\n        if(!element) {\r\n            console.error('could not find element for node ', node);\r\n            return '';\r\n        }\r\n        return this.getElementSelector(element, undefined, node);\r\n    }\r\n    \r\n    getElementSelector(element: Element, parentNode?: VdomNode, node?: VdomNode): string|null {\r\n        let sel = (element as any)['selector'];\r\n        \r\n        if(sel)\r\n        {\r\n            return sel;\r\n        }\r\n        else\r\n        {\r\n            if(element === this.svg) {\r\n                sel = 'svg';\r\n            } else {\r\n                let parentSelector = (element as any)['parentSelector'] ?\r\n                    (element as any)['parentSelector'] as string : '';\r\n\r\n                if(!parentNode) {\r\n                    parentNode = this.vdom.getVisNodeFromSelector(parentSelector);\r\n                }\r\n                if(!parentNode) {\r\n                    console.warn('Element not found', element, parentSelector, parentSelector.length, this.vdom.data);\r\n                    return null;\r\n                }\r\n                let index = parentNode.children.length + 1;\r\n                if(node && parentNode.children.indexOf(node) !== -1) {\r\n                    index = parentNode.children.indexOf(node) + 1;\r\n                }\r\n                let name = element.localName;\r\n                if (!name) {\r\n                    console.error(parentNode);\r\n                    throw Error('name is null');\r\n                }\r\n                name = name.toLowerCase();\r\n                sel = this.combineElementSelectors(parentSelector, name, index);\r\n            }\r\n            \r\n            return sel;\r\n        }\r\n    }\r\n\r\n    combineElementSelectors(parentSelector: string, elementType: string, childIndex: number) {\r\n        return parentSelector + ' > ' + elementType + ':nth-child(' + childIndex + ')';\r\n    }\r\n\r\n    getNodeParent(node:VdomNode): VdomNode|null {\r\n        if(node === this.vdom.data) {\r\n            return null;\r\n        }\r\n        const el = this.getElementFromNode(node);\r\n        if(!el) {\r\n            return null;\r\n        }\r\n        const parentEl = el.parentNode as Element;\r\n        return this.getNodeFromElement(parentEl);\r\n    }\r\n\r\n    linkNodeToElement(node: VdomNode, element: Node) {\r\n        this.nodesToElements.nodes.push(node);\r\n        node.globalElementIndex = this.nodesToElements.elements.length;\r\n        this.nodesToElements.elements.push(element as Element);\r\n    }\r\n\r\n    getElementFromNode(node: VdomNode): Element {\r\n        if(node === this.vdom.data) {\r\n            return this.svg;\r\n        }\r\n        return this.nodesToElements.elements[node.globalElementIndex];\r\n    }\r\n\r\n    getNodeFromElement(element: Element): VdomNode {\r\n        if(element === this.svg) {\r\n            return this.vdom.data;\r\n        }\r\n        const elementIndex = this.nodesToElements.elements.indexOf(element);\r\n        return this.nodesToElements.nodes[elementIndex];\r\n    }\r\n\r\n    getParentNode(node: VdomNode): VdomNode|null {\r\n        const element = this.getElementFromNode(node);\r\n        const parentElement = element.parentNode as Element;\r\n        return this.getNodeFromElement(parentElement);\r\n    }\r\n\r\n    getTotalTransformation(node: VdomNode): Transformation {\r\n        let parent = this.getParentNode(node);\r\n        const parents = [node];\r\n\r\n        while(parent) {\r\n            parents.push(parent);\r\n            parent = this.getParentNode(parent);\r\n        }\r\n\r\n        parent = parents.pop();\r\n        let totalTransform: Transformation = {\r\n            translateX: 0,\r\n            translateY: 0,\r\n            scaleX: 0,\r\n            scaleY: 0,\r\n            rotate: 0,\r\n        };\r\n\r\n        while(parent) {\r\n            const transform = DrawingUtils.parseTransform(parent.transform);\r\n            totalTransform = DrawingUtils.addTransforms(totalTransform, transform);\r\n            parent = parents.pop();\r\n        }\r\n\r\n        return totalTransform;\r\n    }\r\n}\r\n\r\nlet safeLogCount = 0;\r\nfunction safeLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.log(...logContents);\r\n    }\r\n}\r\nfunction safeErrorLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.error(...logContents);\r\n    }\r\n}","import DrawingUtils from \"../canvasworker/drawingUtils\";\r\n\r\nexport class SetPropertyQueue {\r\n    [parentSelector: string]: {\r\n        [attrName: string]:\r\n            string[]|SharedArrayBuffer\r\n        \r\n    }\r\n}\r\n\r\nexport type VDOM = {\r\n    width: number;\r\n    height: number;\r\n    scale: number;\r\n} & VdomNode;\r\n\r\nexport type VdomNodeType = 'svg'|'g'|'rect'|'circle'|'path'|'title'|'tspan'|'text'|'image';\r\n\r\nexport type VdomNode = {\r\n    style: {[styleName: string]: string},\r\n    type: VdomNodeType,\r\n    children: VdomNode[],\r\n    globalElementIndex: number,\r\n    transform?: string,\r\n    fill?: string,\r\n    d?: string,\r\n    stroke?: string,\r\n    strokeWidth?: string,\r\n    cx?: number,\r\n    cy?: number,\r\n    r?: number,\r\n    x?: number,\r\n    y?: number,\r\n    x1?: number,\r\n    y1?: number,\r\n    x2?: number,\r\n    y2?: number,\r\n    dx?: string,\r\n    dy?: string,\r\n    width?: number,\r\n    height?: number,\r\n    textAlign?: string,\r\n    text?: string,\r\n    href?: string,\r\n    image?: ImageBitmap,\r\n    className?: string,\r\n    id?: string,\r\n}\r\n\r\nexport class VdomManager {\r\n    \r\n    constructor(public data: VDOM, private ignoreDesign = false) {\r\n        //console.log(data);\r\n    }\r\n\r\n    enableFrontendDesignProperties() {\r\n        this.ignoreDesign = false;\r\n    }\r\n    \r\n    addNode(nodeData: VdomNode, parentNodeSelector: string) {\r\n        let parentNode = this.getVisNodeFromSelector(parentNodeSelector);\r\n        if(!parentNode) {\r\n            if(parentNodeSelector === \"\") {\r\n                parentNode = this.data;\r\n            } else {\r\n                console.error(parentNode, parentNodeSelector);\r\n            }\r\n        }\r\n        this.applyParentStyles(parentNode, nodeData);\r\n        \r\n        if(!parentNode || !parentNode.children) {\r\n            console.error('parent node not found or no children: ', parentNode, parentNodeSelector, this.data);\r\n        }\r\n        \r\n        parentNode.children.push(nodeData);\r\n        return nodeData;\r\n    }\r\n\r\n    removeNode(childIndex: number, parentNodeSelector: string) {\r\n        let parentNode = this.getVisNodeFromSelector(parentNodeSelector);\r\n        if(!parentNode) {\r\n            if(parentNodeSelector === \"\") {\r\n                parentNode = this.data;\r\n            } else {\r\n                console.error(parentNode, parentNodeSelector);\r\n            }\r\n        }\r\n\r\n        parentNode.children.splice(childIndex, 1);\r\n        this.cachedListSelections = {}; //TODO only remove relevant cache.\r\n    }\r\n\r\n    applyParentStyles(parentNode: VdomNode, childNode: VdomNode) {\r\n        for(const style in parentNode.style) {\r\n            if(!childNode.style[style]) {\r\n                childNode.style[style] = parentNode.style[style];\r\n            }\r\n        }\r\n    }\r\n    \r\n    getParentNodeFromSelector(parentSelector: string) {\r\n        if(!parentSelector) {\r\n            console.error('no parent selector', parentSelector);\r\n        }\r\n        //if(setAttrQueue.hasOwnProperty(parentSelector)) {\r\n        let parentNode;\r\n        if(parentSelector === 'SVG_PARENT') {\r\n            parentNode = {children: [this.data]};\r\n        } else {\r\n            parentNode = this.getVisNodeFromSelector(parentSelector);\r\n        }\r\n        if(!parentNode) {\r\n            console.error('parent node not found with selector', parentSelector);\r\n        }\r\n        return parentNode;\r\n    }\r\n\r\n    applyStyleToNodeAndChildren(node: VdomNode, styleName: string, styleValue: string) {\r\n        node['style'][styleName] = styleValue;\r\n\r\n        if(node.children) {\r\n            for(let child of node.children) {\r\n                this.applyStyleToNodeAndChildren(child, styleName, styleValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static ROUNDED_ATTRS = ['cx', 'cy'];\r\n\r\n    updatePropertiesFromQueue(setAttrQueue: SetPropertyQueue) {\r\n        for(let parentSelector in setAttrQueue) {\r\n            if(!setAttrQueue[parentSelector]) {\r\n                continue;\r\n            }\r\n            const parentNode = this.getParentNodeFromSelector(parentSelector);\r\n            if(!parentNode) {\r\n                console.error('parent not found', parentSelector, setAttrQueue[parentSelector]);\r\n                continue;\r\n            }\r\n                \r\n            for(let attrName in setAttrQueue[parentSelector]) {\r\n                const attrNameStart = attrName.substr(0, 'style;'.length);\r\n\r\n                if(this.ignoreDesign && (attrNameStart === 'style;' ||\r\n                    ['fill', 'stroke', 'opacity', 'x1', 'x2', 'y1', 'y2'].indexOf(attrName) !== -1)) {\r\n                    continue;\r\n                }\r\n                \r\n                let values: string[]|Int32Array;\r\n                let factor: number;\r\n                \r\n                if('SharedArrayBuffer' in self &&\r\n                    setAttrQueue[parentSelector][attrName] instanceof SharedArrayBuffer) {\r\n                    values = new Int32Array(<ArrayBuffer> setAttrQueue[parentSelector][attrName]);\r\n                    factor = 0.1;\r\n                } else {\r\n                    values = setAttrQueue[parentSelector][attrName] as string[];\r\n                }\r\n                \r\n                for(let childIndex in values) {\r\n                    const childNode = parentNode.children[childIndex];\r\n                    if(!childNode) {\r\n                        continue;\r\n                    }\r\n                    let value = factor ? factor * <number> values[childIndex] : values[childIndex];\r\n                    if(attrNameStart === 'style;') {\r\n                        const styleName = attrName.substr('style;'.length);\r\n                        this.applyStyleToNodeAndChildren(childNode, styleName, <string> value);\r\n                        this.updateDeducedStyles(childNode, styleName, <string> value);\r\n                    } else {\r\n                        if(VdomManager.ROUNDED_ATTRS.indexOf(attrName) !== -1) {\r\n                            value = Math.round(<number> value);\r\n                        }\r\n                        childNode[attrName] = value;\r\n                        this.updateDeducedStyles(childNode, attrName, <string> value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateDeducedStyles(node: VdomNode, attrName: string, value: string) {\r\n        if(['opacity', 'fill-opacity', 'stroke-opacity', 'stroke', 'fill'].indexOf(attrName) !== -1) {\r\n            let stroke = node.style.stroke ? node.style.stroke : node.stroke;\r\n            if(stroke) {\r\n                let strokeOpacity = node.style['stroke-opacity'] === undefined ? node.style['opacity']\r\n                    : node.style['stroke-opacity'];\r\n                if(strokeOpacity === undefined) {\r\n                    strokeOpacity = node['stroke-opacity'] === undefined ? node['opacity'] : node['stroke-opacity'];\r\n                }\r\n\r\n                node.style['stroke-rgba'] = DrawingUtils.colorToRgba(stroke, strokeOpacity);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private cachedListSelections: {[selector: string]: {[index: number]: VdomNode}} = {};\r\n    public getVisNodeFromSelector(selector: string): VdomNode|null {\r\n        const lastSplitPos = selector.lastIndexOf('>');\r\n        const selectorWithoutLast = selector.substr(0, lastSplitPos);\r\n        const lastPart = selector.substr(lastSplitPos + 1);\r\n        const parentSel = selectorWithoutLast ? this.cachedListSelections[selectorWithoutLast] : null;\r\n        let index = -1;\r\n        const nthChildPosition = lastPart.indexOf(':nth-child(');\r\n        if(nthChildPosition !== -1) {\r\n            index = parseInt(lastPart.substr(nthChildPosition + 11)); // length of ':nth-child('\r\n            if(parentSel && parentSel[index]) {\r\n                return parentSel[index];\r\n            }\r\n        }\r\n        \r\n        const selectedNodes: VdomNode[] = [];\r\n        this.findMatchingChildren(this.data, selector, 0, selectedNodes);\r\n        \r\n        if(selectedNodes && selectedNodes.length === 1) {\r\n            const el = selectedNodes[0];\r\n            if(index !== -1) {\r\n                if(!this.cachedListSelections[selectorWithoutLast]) {\r\n                    this.cachedListSelections[selectorWithoutLast] = {};\r\n                }\r\n                this.cachedListSelections[selectorWithoutLast][index] = el;\r\n            }\r\n            return el;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    public getVisNodesFromSelector(visNode: VdomNode, selector: string) {\r\n        const selectedNodes = [];\r\n        this.findMatchingChildren(visNode, selector, 0, selectedNodes);\r\n        return selectedNodes;\r\n    }\r\n\r\n    private findChildrenOfType(visNode: VdomNode, type: string, selectedNodes: VdomNode[]) {\r\n        const addDirectChildrenIfMatch = (node: VdomNode) => {\r\n            for(const child of node.children) {\r\n                if(child.type === type) {\r\n                    selectedNodes.push(child);\r\n                }\r\n                if(node.children.length !== 0) {\r\n                    addDirectChildrenIfMatch(child);\r\n                }\r\n            }\r\n        };\r\n        addDirectChildrenIfMatch(visNode);\r\n    }\r\n\r\n    public filterNodesBySelector(parentNode: VdomNode, nodes: VdomNode[], selector: string) {\r\n        return nodes.filter(node => VdomManager.isCssRulePartialMatch(selector, node, parentNode));\r\n    }\r\n    \r\n    private findMatchingChildren(visNode: VdomNode, selector: string, matchIndex: number, selectedNodes: VdomNode[],\r\n                                 selectedNodeSelectors: string[] = []) {\r\n        if(!selector && selector !== '') {\r\n            console.error(visNode, selector, matchIndex, selectedNodes, selectedNodeSelectors);\r\n            throw Error('undefined selector');\r\n        }\r\n\r\n        let selParts = selector.split('>').map(s => s.trim());\r\n        let selPart = selParts[matchIndex];\r\n        \r\n        if(matchIndex === 0 && selPart === 'svg') {\r\n            matchIndex++;\r\n            selPart = selParts[matchIndex];\r\n            if(matchIndex === selParts.length) {\r\n                selectedNodes.push(visNode);\r\n                selectedNodeSelectors.push(selector);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if(selector.match(/^[a-z]+$/)) {\r\n            return this.findChildrenOfType(visNode, selector, selectedNodes);\r\n        }\r\n        \r\n        for(let i = 0; i < visNode.children.length; i++) {\r\n            let node = visNode.children[i];\r\n            let matching = false;\r\n            \r\n            if(VdomManager.isCssRulePartialMatch(selPart, node, visNode)) {\r\n                if(matchIndex === selParts.length - 1) {\r\n                    selectedNodes.push(node);\r\n                    selectedNodeSelectors.push(selector);\r\n                } else {\r\n                    matching = true;\r\n                }\r\n            }\r\n            \r\n            if(node.children && (matching || selParts.length < 2) && matchIndex + 1 < selParts.length) {\r\n                this.findMatchingChildren(node, selector, matchIndex + 1, selectedNodes, selectedNodeSelectors);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static isCssRulePartialMatch(cssRuleSelectorPart: string, node: VdomNode, parentNode: VdomNode): boolean {\r\n        if(cssRuleSelectorPart.substr(0, 5) === ':not(') {\r\n            const newSelPart = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.length - 1).substr(5);\r\n            return !VdomManager.isCssRulePartialMatch(newSelPart, node, parentNode);\r\n        }\r\n        if(cssRuleSelectorPart[0] === '.') { // Example: .className\r\n            if(node.className && node.className.split(' ').indexOf(cssRuleSelectorPart.substr(1)) !== -1) {\r\n                return true;\r\n            }\r\n        } else if(cssRuleSelectorPart[0] === '#') { // Example: #id\r\n            if(cssRuleSelectorPart.substr(1) === node.id) {\r\n                return true;\r\n            }\r\n        } else if(cssRuleSelectorPart.match(/^[a-z]+$/)) { // Example: rect\r\n            if(cssRuleSelectorPart === node.type) {\r\n                return true;\r\n            }\r\n        } else if(cssRuleSelectorPart.indexOf(':nth-child(') !== -1) {\r\n            let type = 'any';\r\n            let indexPart = cssRuleSelectorPart;\r\n\r\n            if(cssRuleSelectorPart[0] !== ':') {\r\n                type = cssRuleSelectorPart.substr(0, cssRuleSelectorPart.indexOf(':'));\r\n                indexPart = cssRuleSelectorPart.substr(cssRuleSelectorPart.indexOf(':'));\r\n            }\r\n\r\n            const targetIndex = parseInt(indexPart.substr(':nth-child('.length));\r\n            const index = parentNode.children.indexOf(node);\r\n\r\n            return (index === targetIndex - 1 && (type === 'any' || node.type === type));\r\n        }\r\n        else if(cssRuleSelectorPart.indexOf('.') !== -1) { // Example: rect.className\r\n            const cutoff = cssRuleSelectorPart.indexOf('.');\r\n            const typeName = cssRuleSelectorPart.substr(0, cutoff);\r\n            const className = cssRuleSelectorPart.substr(cutoff + 1);\r\n            if(typeName === node.type && node.className && node.className.split(' ').indexOf(className) !== -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nlet safeLogCount = 0;\r\nfunction safeLog(...logContents) {\r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.log(...logContents);\r\n    }\r\n}\r\nfunction safeErrorLog(...logContents) {\r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.error(...logContents);\r\n    }\r\n}","import {VdomManager, VdomNode} from \"../util/vdomManager\";\r\nimport DrawingUtils from \"./drawingUtils\";\r\nimport CanvasWorker from \"./canvasworker\";\r\n\r\nexport default class Canvasrenderer implements CanvasWorker {\r\n    \r\n    private ctx: CanvasRenderingContext2D;\r\n    \r\n    constructor(private vdom: VdomManager, private canvas: HTMLCanvasElement,\r\n                private forceSingle = false, private onDrawn = () => {}) {\r\n        const ctx = canvas.getContext('2d');\r\n        if(!ctx) throw new Error('could not create canvas context');\r\n        \r\n        this.ctx = ctx;\r\n        this.ctx.scale(this.vdom.data.scale, this.vdom.data.scale);\r\n        this.ctx.save();\r\n        \r\n        this.draw();\r\n        \r\n        setTimeout(() => {\r\n            //console.log(this.forceSingle, this.vdom.data);\r\n            this.draw();\r\n        }, 1000);\r\n    }\r\n    \r\n    //private lastDrawn: VdomNode = null;\r\n    private lastFullSecond = 0;\r\n    private countSinceLastFullSecond = 0;\r\n    \r\n    draw() {\r\n        const ctx = this.ctx;\r\n        \r\n        ctx.restore();\r\n        ctx.save();\r\n        \r\n        //ctx.fillStyle = '#fff';\r\n        //ctx.fillRect(0, 0, this.vdom.data.width, this.vdom.data.height);\r\n        ctx.clearRect(0, 0, this.vdom.data.width, this.vdom.data.height);\r\n    \r\n        //this.lastDrawn = null;\r\n        this.drawLine(null, 'start');\r\n        this.drawCircle(null, 'start');\r\n        this.drawRect(null, 'start');\r\n        this.drawText(null, 'start');\r\n        this.drawImage(null, 'start');\r\n\r\n        this.drawNodeAndChildren(this.vdom.data, this.forceSingle);\r\n\r\n        this.drawLine(null, 'end');\r\n        this.drawCircle(null, 'end');\r\n        this.drawRect(null, 'end');\r\n        this.drawText(null, 'end');\r\n        this.drawImage(null, 'end');\r\n        \r\n        this.onDrawn();\r\n    \r\n        const fullSecond = Math.round(performance.now() / 1000);\r\n        if(fullSecond !== this.lastFullSecond) {\r\n            this.lastFullSecond = fullSecond;\r\n            //console.log(this.countSinceLastFullSecond);\r\n            this.countSinceLastFullSecond = 0;\r\n        }\r\n        this.countSinceLastFullSecond++;\r\n    }\r\n    \r\n    private drawNodeAndChildren(elData: VdomNode, forceSingle: boolean) {\r\n        const ctx = this.ctx;\r\n\r\n        ctx.save();\r\n        const hasTransformed = this.applyTransform(elData.transform);\r\n\r\n        if(elData.transform) {\r\n            forceSingle = true;\r\n        }\r\n        \r\n        if(elData.type && elData.type !== 'g' && (!elData.style.display || elData.style.display !== 'none')) {\r\n            if(elData.type === 'title') {\r\n                return;\r\n            }\r\n            \r\n            if(!forceSingle) {\r\n                /*if(!this.lastDrawn || (this.lastDrawn && this.lastDrawn.type !== elData.type)) {\r\n                    if(this.lastDrawn) {\r\n                        this.drawSingleNode(this.lastDrawn, 'end');\r\n                    }\r\n                    this.drawSingleNode(elData, 'start');\r\n                }*/\r\n    \r\n                this.drawSingleNode(elData);\r\n            } else {\r\n                this.drawSingleNode(elData, 'forcesingle');\r\n            }\r\n            \r\n            //this.lastDrawn = elData;\r\n        }\r\n        \r\n        if(elData.children) {\r\n            for(let i = 0; i < elData.children.length; i++) {\r\n                this.drawNodeAndChildren(elData.children[i], forceSingle);\r\n            }\r\n        }\r\n        ctx.restore();\r\n        if(hasTransformed) {\r\n            //ctx.restore();\r\n        }\r\n    }\r\n    \r\n    private drawSingleNode(elData: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        const type: string = elData.type;\r\n        const drawFct = this['draw' + type.substr(0,1).toUpperCase() + type.substr(1)];\r\n        if(!drawFct) {\r\n            return console.error('no draw function yet for ', type);\r\n        }\r\n        drawFct.call(this, elData, mode);\r\n    }\r\n\r\n    private drawClippath(elData: VdomNode) {\r\n        console.warn('clippaths can not be rendered yet.')\r\n    }\r\n    \r\n    private circlesByColor: {[color: string]: VdomNode[]} = {};\r\n    private drawCircle(elData: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        if(mode === 'normal') {\r\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\r\n            let fillOpacity = elData.style['fill-opacity'] ? elData.style['fill-opacity'] : elData.style['opacity'];\r\n            if(!fill) fill = 'rgb(0,0,0)';\r\n            const fillRgba = DrawingUtils.colorToRgba(fill, fillOpacity);\r\n            const stroke = this.getStrokeStyle(elData);\r\n            const handle = fillRgba + ';' + stroke;\r\n            if(!this.circlesByColor[handle]) {\r\n                this.circlesByColor[handle] = [];\r\n            }\r\n            this.circlesByColor[handle].push(elData);\r\n        }\r\n        if(mode === 'start') {\r\n            this.circlesByColor = {};\r\n            return;\r\n        }\r\n        if(mode === 'end') {\r\n            for(let fillAndStrokeColor in this.circlesByColor) {\r\n                if(this.circlesByColor.hasOwnProperty(fillAndStrokeColor)) {\r\n                    const split = fillAndStrokeColor.split(';');\r\n                    const fillColor = split[0];\r\n                    const strokeColor = split[1];\r\n\r\n                    this.ctx.fillStyle = fillColor;\r\n                    let sampleData = this.circlesByColor[fillAndStrokeColor][0];\r\n                    const lineWidth = sampleData.style['stroke-width'] ?\r\n                        parseFloat(sampleData.style['stroke-width']) : parseFloat(sampleData.strokeWidth);\r\n                    this.ctx.lineWidth = lineWidth ? lineWidth : 1;\r\n                    this.ctx.strokeStyle = strokeColor;\r\n\r\n                    this.ctx.beginPath();\r\n                    for(let elData of this.circlesByColor[fillAndStrokeColor]) {\r\n                        const cx = elData.cx ? elData.cx : 0;\r\n                        const cy = elData.cy ? elData.cy : 0;\r\n                        const r = elData.r;\r\n                        this.ctx.save();\r\n                        this.applyTransform(elData.transform);\r\n                        this.ctx.moveTo(cx + r, cy);\r\n                        this.ctx.arc(cx, cy, r, 0, 2 * Math.PI);\r\n                        this.ctx.restore();\r\n                        //this.ctx.restore();\r\n                    }\r\n\r\n                    if(fillColor !== 'none'){\r\n                        this.ctx.fill();\r\n                    }\r\n\r\n                    if(sampleData.style['stroke-rgba'] && sampleData.style['stroke-rgba'] !== 'none') {\r\n                        this.ctx.stroke();\r\n                    }\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        if(mode === 'forcesingle') {\r\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\r\n            if(!fill) fill = '#000';\r\n            let fillOpacity = elData.style['fill-opacity'] ? elData.style['fill-opacity'] : elData.style['opacity'];\r\n\r\n            const cx = elData.cx || 0;\r\n            const cy = elData.cy || 0;\r\n\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = DrawingUtils.colorToRgba(fill, fillOpacity);\r\n            this.ctx.strokeStyle = this.getStrokeStyle(elData);\r\n            this.ctx.lineWidth = elData.style['stroke-width'] ?\r\n                parseFloat(elData.style['stroke-width']) : parseFloat(elData.strokeWidth);\r\n            this.ctx.arc(cx, cy, elData.r, 0, 2 * Math.PI);\r\n            if(fill !== 'none'){\r\n                this.ctx.fill();\r\n            }\r\n\r\n            if(elData.style['stroke-rgba'] && elData.style['stroke-rgba'] !== 'none') {\r\n                this.ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getFillStyle(node: VdomNode): string {\r\n        let fill = node.style.fill ? node.style.fill : node.fill;\r\n        let opacity = node.style['fill-opacity'] ? node.style['fill-opacity'] : node.style['opacity'];\r\n        fill = DrawingUtils.colorToRgba(fill, opacity);\r\n        return fill;\r\n    }\r\n\r\n    private getStrokeStyle(node: VdomNode): string {\r\n        if(node.style['stroke-rgba']) {\r\n            return node.style['stroke-rgba'];\r\n        }\r\n        let stroke = node.style.stroke ? node.style.stroke : node.stroke;\r\n        if(stroke) {\r\n            let strokeOpacity = node.style['stroke-opacity'] === undefined ? node.style['opacity']\r\n                : node.style['stroke-opacity'];\r\n            if(strokeOpacity === undefined) {\r\n                strokeOpacity = node['stroke-opacity'] === undefined ? node['opacity'] : node['stroke-opacity'];\r\n            }\r\n\r\n            node.style['stroke-rgba'] = DrawingUtils.colorToRgba(stroke, strokeOpacity);\r\n            return node.style['stroke-rgba'];\r\n        }\r\n        return 'none';\r\n    }\r\n\r\n    private rectsByColor = {};\r\n\r\n    private drawRect(elData: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n\r\n        if(mode === 'normal') {\r\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\r\n            let fillOpacity = elData['fill-opacity'] ? elData['fill-opacity'] : elData['opacity'];\r\n            let fillOpacityStyle = elData.style['fill-opacity'] ? elData.style['fill-opacity'] : elData.style['opacity'];\r\n\r\n            if(fillOpacityStyle !== undefined) {\r\n                fillOpacity = fillOpacityStyle;\r\n            }\r\n\r\n            //if(!fill) fill = '#000';\r\n            const fillRgba = DrawingUtils.colorToRgba(fill, fillOpacity);\r\n            const stroke = this.getStrokeStyle(elData);\r\n            const handle = fillRgba + ';' + stroke;\r\n            if(!this.rectsByColor[handle]) {\r\n                this.rectsByColor[handle] = [];\r\n            }\r\n            this.rectsByColor[handle].push(elData);\r\n        }\r\n        if(mode === 'start') {\r\n            this.rectsByColor = {};\r\n            return;\r\n        }\r\n        if(mode === 'end') {\r\n            for(let fillAndStrokeColor in this.rectsByColor) {\r\n                if(this.rectsByColor.hasOwnProperty(fillAndStrokeColor)) {\r\n                    const split = fillAndStrokeColor.split(';');\r\n                    const fillColor = split[0];\r\n                    const strokeColor = split[1];\r\n                    this.ctx.fillStyle = fillColor;\r\n\r\n                    let sampleData = this.rectsByColor[fillAndStrokeColor][0];\r\n                    const lineWidth = sampleData.style['stroke-width'] ?\r\n                        parseFloat(sampleData.style['stroke-width']) : parseFloat(sampleData.strokeWidth);\r\n                    this.ctx.lineWidth = lineWidth ? lineWidth : 1;\r\n                    this.ctx.strokeStyle = strokeColor;\r\n\r\n                    this.ctx.beginPath();\r\n                    for(let elData of this.rectsByColor[fillAndStrokeColor]) {\r\n                        const cx = elData.cx ? elData.cx : 0;\r\n                        const cy = elData.cy ? elData.cy : 0;\r\n                        const r = elData.r;\r\n                        this.ctx.save();\r\n                        this.applyTransform(elData.transform);\r\n                        this.ctx.moveTo(cx + r, cy);\r\n                        this.ctx.rect(elData.x, elData.y, elData.width, elData.height);\r\n                        this.ctx.restore();\r\n                        //this.ctx.restore();\r\n                    }\r\n                    if(fillColor !== 'none'){\r\n                        this.ctx.fill();\r\n                    }\r\n\r\n                    if(sampleData.style['stroke-rgba'] && sampleData.style['stroke-rgba'] !== 'none') {\r\n                        this.ctx.stroke();\r\n                    }\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        if(mode === 'forcesingle') {\r\n            let fill = elData.style.fill ? elData.style.fill : elData.fill;\r\n            if(fill) {\r\n                fill = DrawingUtils.colorToRgba(fill, elData.style['fill-opacity']);\r\n            }\r\n\r\n            if(fill && fill !== 'none') {\r\n                this.ctx.fillStyle = elData.style.fill ? elData.style.fill : elData.fill;\r\n                this.ctx.fillRect(elData.x, elData.y, elData.width, elData.height);\r\n            }\r\n\r\n            let stroke = elData.style.stroke ? elData.style.stroke : elData.stroke;\r\n            if(stroke) {\r\n                stroke = DrawingUtils.colorToRgba(stroke, elData.style['stroke-opacity']);\r\n                this.ctx.strokeStyle = stroke;\r\n                this.ctx.beginPath();\r\n                this.ctx.rect(elData.x, elData.y, elData.width, elData.height);\r\n                this.ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawTexts: VdomNode[] = [];\r\n\r\n    private drawText(node: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        const drawSingle = (elData: VdomNode) => {\r\n            if(elData.text === '') {\r\n                return;\r\n            }\r\n            const fontFamily = 'Arial';\r\n            const fontSize = elData['font-size'] ? DrawingUtils.convertSizeToPx(elData['font-size']) + 'px' : '30px';\r\n            let font = elData.style['font'] ? elData.style['font'] : elData['font'];\r\n            if(!font) {\r\n                font = fontSize + ' ' + fontFamily;\r\n            }\r\n            if(elData['text-anchor']) {\r\n                const align = elData['text-anchor'] === 'middle' ? 'center' : elData['text-anchor'];\r\n                this.ctx.textAlign = align;\r\n            }\r\n            let fill = elData['fill'] ? elData['fill'] : elData.style['fill'];\r\n            if(!fill) fill = '#000';\r\n            this.ctx.font = font;\r\n            this.ctx.fillStyle = fill;\r\n            let x = elData.x || 0;\r\n            let y = elData.y || 0;\r\n            let dx = DrawingUtils.convertSizeToPx(elData.dx, false) || 0;\r\n            let dy = DrawingUtils.convertSizeToPx(elData.dy, false) || 0;\r\n            this.ctx.fillText(elData.text, x + dx, y + dy);\r\n        };\r\n        if(mode === 'start') {\r\n            this.drawTexts = [];\r\n            return;\r\n        }\r\n        if(mode === 'normal') {\r\n            this.drawTexts.push(node);\r\n            return;\r\n        }\r\n        if(mode === 'forcesingle') {\r\n            return drawSingle(node);\r\n        }\r\n        if(mode === 'end') {\r\n            for(const currentNode of this.drawTexts) {\r\n                drawSingle(currentNode);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    private drawImages: VdomNode[] = [];\r\n\r\n    private drawImage(node: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        const drawSingle = (elData: VdomNode) => {\r\n            if(elData.href === '') {\r\n                return;\r\n            }\r\n            let fill = elData['fill'] ? elData['fill'] : elData.style['fill'];\r\n            if(!fill) fill = '#000';\r\n            this.ctx.fillStyle = fill;\r\n            let x = elData.x || 0;\r\n            let y = elData.y || 0;\r\n            let width = elData.width || 0;\r\n            let height = elData.height || 0;\r\n            if(elData.image) {\r\n                try {\r\n                    this.ctx.drawImage(elData.image, x, y, width, height);\r\n                } catch(e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n        };\r\n        if(mode === 'start') {\r\n            this.drawImages = [];\r\n            return;\r\n        }\r\n        if(mode === 'normal') {\r\n            this.drawImages.push(node);\r\n            return;\r\n        }\r\n        if(mode === 'forcesingle') {\r\n            return drawSingle(node);\r\n        }\r\n        if(mode === 'end') {\r\n            for(const currentNode of this.drawImages) {\r\n                drawSingle(currentNode);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    private drawPath(elData: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\r\n\r\n        const fill = this.getFillStyle(elData);\r\n        const stroke = this.getStrokeStyle(elData);\r\n        const strokeWidth = elData.style['stroke-width'] ? elData.style['stroke-width'] : elData['stroke-width'];\r\n\r\n        let p = new Path2D(elData.d);\r\n        this.ctx.fillStyle = fill;\r\n        if(stroke && stroke !== 'none') {\r\n            if(strokeWidth) {\r\n                this.ctx.lineWidth = strokeWidth;\r\n                this.ctx.strokeStyle = stroke;\r\n            } else {\r\n                this.ctx.strokeStyle = stroke;\r\n            }\r\n            if(elData.style['stroke-linejoin']) {\r\n                const lineJoin = elData.style['stroke-linejoin'];\r\n                if(lineJoin === 'bevel' || lineJoin === 'round' || lineJoin === 'miter') {\r\n                    this.ctx.lineJoin = lineJoin;\r\n                } else {\r\n                    console.error('unknown line join value:', lineJoin)\r\n                }\r\n            }\r\n            this.ctx.stroke(p);\r\n        }\r\n\r\n        if(fill && fill !== 'none') {\r\n            this.ctx.fill(p);\r\n        }\r\n    }\r\n    \r\n    private drawTspan(elData: VdomNode, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        if(mode !== 'normal' && mode !== 'forcesingle') return;\r\n        \r\n        this.ctx.font = \"10px Arial\";\r\n        this.ctx.fillStyle = \"#000000\";\r\n        const textAlign = <CanvasTextAlign> (elData.style.textAnchor === \"middle\" ? \"center\" : elData.style.textAnchor);\r\n        this.ctx.textAlign = textAlign;\r\n        this.ctx.fillText(elData.text, elData.x, elData.y);\r\n    }\r\n\r\n    private drawTextpath(elData: VdomNode) {\r\n        console.warn('no draw function yet for textpath');\r\n    }\r\n\r\n    private linesByColor: {[color: string]: VdomNode[]} = {};\r\n    private drawLine(elData, mode: ('start'|'normal'|'end'|'forcesingle') = 'normal') {\r\n        if(this.vdom.data.scale > 1) {\r\n            //mode = 'forcesingle';\r\n            // In my tests, drawing a long connected path is very slow for high DPI devices.\r\n        }\r\n        if(mode === 'normal') {\r\n            const stroke = this.getStrokeStyle(elData);\r\n            if(stroke === 'none') {\r\n                return;\r\n            }\r\n            if(!this.linesByColor[stroke]) {\r\n                this.linesByColor[stroke] = [];\r\n            }\r\n            this.linesByColor[stroke].push(elData);\r\n        }\r\n        if(mode === 'start') {\r\n            this.linesByColor = {};\r\n            return;\r\n        }\r\n        if(mode === 'end') {\r\n            for(let strokeColor in this.linesByColor) {\r\n                if(this.linesByColor.hasOwnProperty(strokeColor)) {\r\n                    this.ctx.strokeStyle = strokeColor;\r\n\r\n                    let sampleData = this.linesByColor[strokeColor][0];\r\n                    this.ctx.lineWidth = sampleData.style['stroke-width'] ?\r\n                        parseFloat(sampleData.style['stroke-width']) : parseFloat(sampleData['stroke-width']);\r\n\r\n                    this.ctx.beginPath();\r\n                    for(let elData of this.linesByColor[strokeColor]) {\r\n                        this.ctx.save();\r\n                        this.applyTransform(elData.transform);\r\n                        this.ctx.moveTo(elData.x1, elData.y1);\r\n                        this.ctx.lineTo(elData.x2, elData.y2);\r\n                        this.ctx.restore();\r\n                        //this.ctx.restore();\r\n                    }\r\n\r\n                    this.ctx.stroke();\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        if(mode === 'forcesingle') {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(elData.x1, elData.y1);\r\n            this.ctx.lineTo(elData.x2, elData.y2);\r\n\r\n            this.ctx.strokeStyle = elData.style['stroke-rgba'];\r\n            //safeLog(stroke, this.ctx.strokeStyle);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n\r\n    private drawDefs(node: VdomNode) {\r\n        //TODO figure out.\r\n    }\r\n\r\n    private drawMarker(node: VdomNode) {\r\n        //TODO figure out.\r\n    }\r\n    \r\n    private applyTransform(transformString: string) {\r\n        const transform = transformString ? DrawingUtils.parseTransform(transformString) : null;\r\n        if(transform) {\r\n            if(transform.rotate) {\r\n                //console.log(transform.rotate);\r\n            }\r\n            //console.log(transformString);\r\n            this.ctx.transform(transform.scaleX, 0, 0, transform.scaleY, transform.translateX, transform.translateY);\r\n            //ctx.rotate(transform.rotate / 2 / Math.PI);\r\n            this.ctx.rotate(transform.rotate * Math.PI / 180);\r\n            //console.log(transform.rotate);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nlet safeLogCount = 0;\r\nfunction safeLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.log(...logContents);\r\n    }\r\n}\r\nfunction safeErrorLog(...logContents) {\r\n    \r\n    if(safeLogCount < 50) {\r\n        safeLogCount++;\r\n        console.error(...logContents);\r\n    }\r\n}","import './custom';\r\nimport CanvasWorkerImporter = require('worker-loader?inline=true!./canvasworker');\r\n\r\nexport default CanvasWorkerImporter;","module.exports = function() {\n  return require(\"!!C:\\\\Users\\\\Tom Horak\\\\research\\\\wristvis\\\\code\\\\ssvg\\\\node_modules\\\\worker-loader\\\\dist\\\\workers\\\\InlineWorker.js\")(\"!function(t){var e={};function s(r){if(e[r])return e[r].exports;var l=e[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,s),l.l=!0,l.exports}s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&\\\"object\\\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,\\\"default\\\",{enumerable:!0,value:t}),2&e&&\\\"string\\\"!=typeof t)for(var l in t)s.d(r,l,function(e){return t[e]}.bind(null,l));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,\\\"a\\\",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p=\\\"\\\",s(s.s=1)}([function(t,e,s){\\\"use strict\\\";Object.defineProperty(e,\\\"__esModule\\\",{value:!0});class r{static parseTransform(t){const e={translateX:0,translateY:0,scaleX:1,scaleY:1,rotate:0,translateBeforeScale:!1};if(t){if(\\\"string\\\"!=typeof t)return e.scaleX=t.k,e.scaleY=t.k,e.translateX=t.x,e.translateY=t.y,e;let s=t;s=s.replace(/ /g,\\\"\\\");const r=/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);r&&(e.translateX=parseFloat(r[1]),e.translateY=parseFloat(r[2]));const l=/\\\\s*scale\\\\(([-0-9.]+)\\\\)/.exec(s);l&&(e.scaleX=parseFloat(l[1]),e.scaleY=parseFloat(l[1]));const o=/\\\\s*rotate\\\\(([-0-9.]+)\\\\)/.exec(s);o&&(e.rotate=parseFloat(o[1])),/\\\\s*translate\\\\(([-0-9.]+),([-0-9.]+)\\\\)scale\\\\(([-0-9.]+)\\\\)/.exec(s)&&(e.translateBeforeScale=!0);const i=/\\\\s*matrix\\\\(([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+),([-0-9.]+)\\\\)/.exec(s);i&&(e.scaleX=parseFloat(i[1]),e.scaleY=parseFloat(i[4]),e.translateX=parseFloat(i[5]),e.translateY=parseFloat(i[6]))}return e}static addTransforms(t,e){return{translateX:t.translateX+e.translateX,translateY:t.translateY+e.translateY,scaleX:t.scaleX*e.scaleX,scaleY:t.scaleY*e.scaleY,rotate:t.rotate+e.rotate}}static convertSizeToPx(t,e=!0){const s=e?14:void 0;return void 0===t?s:\\\"number\\\"==typeof t?t:\\\"em\\\"===t.substr(-2)?Math.round(12*parseFloat(t)):\\\"px\\\"===t.substr(-2)?parseInt(t):t.match(/^[0-9]+$/)?parseInt(t):(console.warn(\\\"size in unsupported format: \\\",t),s)}static colorToRgba(t,e=1){if(!t||\\\"none\\\"===t)return\\\"none\\\";if(t=r.CssNamedColorToHex(t),1===e&&\\\"string\\\"==typeof t)return t;if(\\\"string\\\"==typeof t&&\\\"#\\\"===t[0]){let s;if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(t))return 3==(s=t.substring(1)).length&&(s=s[0]+s[0]+s[1]+s[1]+s[2]+s[2]),\\\"rgba(\\\"+[(s=\\\"0x\\\"+s)>>16&255,s>>8&255,255&s].join(\\\",\\\")+\\\",\\\"+e+\\\")\\\";throw new Error(\\\"Bad Hex\\\")}if(\\\"object\\\"==typeof t){if(\\\"r\\\"in t)return\\\"rgba(\\\"+t.r+\\\",\\\"+t.g+\\\",\\\"+t.b+\\\",\\\"+e+\\\")\\\";if(\\\"h\\\"in t){const s=r.hslToRgb(t.h/360,t.s,t.l);return\\\"rgba(\\\"+s.r+\\\",\\\"+s.g+\\\",\\\"+s.b+\\\",\\\"+e+\\\")\\\"}}else if(\\\"rgb(\\\"===t.substr(0,4))return t.substr(0,t.length-1).replace(\\\"rgb\\\",\\\"rgba\\\")+\\\", \\\"+e+\\\")\\\";return t}static hslToRgb(t,e,s){var r,l,o;if(0==e)r=l=o=s;else{var i=function(t,e,s){return s<0&&(s+=1),s>1&&(s-=1),s<1/6?t+6*(e-t)*s:s<.5?e:s<2/3?t+(e-t)*(2/3-s)*6:t},n=s<.5?s*(1+e):s+e-s*e,a=2*s-n;r=i(a,n,t+1/3),l=i(a,n,t),o=i(a,n,t-1/3)}return{r:Math.round(255*r),g:Math.round(255*l),b:Math.round(255*o)}}static CssNamedColorToHex(t){return\\\"red\\\"===t?\\\"#ff0000\\\":\\\"steelblue\\\"===t?\\\"#4682b4\\\":\\\"black\\\"===t?\\\"#000000\\\":t}}e.default=r},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const l=s(2),o=r(s(3));let i;const n=self;let a;n.onmessage=function(t){const e=t.data;if(e&&e.cmd)switch(e.cmd){case\\\"INIT\\\":a=new l.VdomManager(e.data.visData);const t=!!e.data.safeMode;i=new o.default(a,e.data.canvas,t,()=>{n.postMessage({msg:\\\"DRAWN\\\"})});break;case\\\"UPDATE_NODES\\\":const s=e;for(let t of s.data.enterExit)if(\\\"ENTER\\\"===t.cmd){t.keepChildren||(t.node.children=[]);const e=a.addNode(t.node,t.parentNodeSelector);i.addNode&&i.addNode(e)}else\\\"EXIT\\\"===t.cmd&&a.removeNode(t.childIndex,t.parentNodeSelector);i.updatePropertiesFromQueue?i.updatePropertiesFromQueue(s.data.update):a.updatePropertiesFromQueue(s.data.update),i.draw();break;default:console.error(\\\"did not find command \\\",e.cmd)}}},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const l=r(s(0));e.SetPropertyQueue=class{};class o{constructor(t,e=!1){this.data=t,this.ignoreDesign=e,this.cachedListSelections={}}enableFrontendDesignProperties(){this.ignoreDesign=!1}addNode(t,e){let s=this.getVisNodeFromSelector(e);return s||(\\\"\\\"===e?s=this.data:console.error(s,e)),this.applyParentStyles(s,t),s&&s.children||console.error(\\\"parent node not found or no children: \\\",s,e,this.data),s.children.push(t),t}removeNode(t,e){let s=this.getVisNodeFromSelector(e);s||(\\\"\\\"===e?s=this.data:console.error(s,e)),s.children.splice(t,1),this.cachedListSelections={}}applyParentStyles(t,e){for(const s in t.style)e.style[s]||(e.style[s]=t.style[s])}getParentNodeFromSelector(t){let e;return t||console.error(\\\"no parent selector\\\",t),(e=\\\"SVG_PARENT\\\"===t?{children:[this.data]}:this.getVisNodeFromSelector(t))||console.error(\\\"parent node not found with selector\\\",t),e}applyStyleToNodeAndChildren(t,e,s){if(t.style[e]=s,t.children)for(let r of t.children)this.applyStyleToNodeAndChildren(r,e,s)}updatePropertiesFromQueue(t){for(let e in t){if(!t[e])continue;const s=this.getParentNodeFromSelector(e);if(s)for(let r in t[e]){const l=r.substr(0,\\\"style;\\\".length);if(this.ignoreDesign&&(\\\"style;\\\"===l||-1!==[\\\"fill\\\",\\\"stroke\\\",\\\"opacity\\\",\\\"x1\\\",\\\"x2\\\",\\\"y1\\\",\\\"y2\\\"].indexOf(r)))continue;let i,n;\\\"SharedArrayBuffer\\\"in self&&t[e][r]instanceof SharedArrayBuffer?(i=new Int32Array(t[e][r]),n=.1):i=t[e][r];for(let t in i){const e=s.children[t];if(!e)continue;let a=n?n*i[t]:i[t];if(\\\"style;\\\"===l){const t=r.substr(\\\"style;\\\".length);this.applyStyleToNodeAndChildren(e,t,a),this.updateDeducedStyles(e,t,a)}else-1!==o.ROUNDED_ATTRS.indexOf(r)&&(a=Math.round(a)),e[r]=a,this.updateDeducedStyles(e,r,a)}}else console.error(\\\"parent not found\\\",e,t[e])}}updateDeducedStyles(t,e,s){if(-1!==[\\\"opacity\\\",\\\"fill-opacity\\\",\\\"stroke-opacity\\\",\\\"stroke\\\",\\\"fill\\\"].indexOf(e)){let e=t.style.stroke?t.style.stroke:t.stroke;if(e){let s=void 0===t.style[\\\"stroke-opacity\\\"]?t.style.opacity:t.style[\\\"stroke-opacity\\\"];void 0===s&&(s=void 0===t[\\\"stroke-opacity\\\"]?t.opacity:t[\\\"stroke-opacity\\\"]),t.style[\\\"stroke-rgba\\\"]=l.default.colorToRgba(e,s)}}}getVisNodeFromSelector(t){const e=t.lastIndexOf(\\\">\\\"),s=t.substr(0,e),r=t.substr(e+1),l=s?this.cachedListSelections[s]:null;let o=-1;const i=r.indexOf(\\\":nth-child(\\\");if(-1!==i&&(o=parseInt(r.substr(i+11)),l&&l[o]))return l[o];const n=[];if(this.findMatchingChildren(this.data,t,0,n),n&&1===n.length){const t=n[0];return-1!==o&&(this.cachedListSelections[s]||(this.cachedListSelections[s]={}),this.cachedListSelections[s][o]=t),t}return null}getVisNodesFromSelector(t,e){const s=[];return this.findMatchingChildren(t,e,0,s),s}findChildrenOfType(t,e,s){const r=t=>{for(const l of t.children)l.type===e&&s.push(l),0!==t.children.length&&r(l)};r(t)}filterNodesBySelector(t,e,s){return e.filter(e=>o.isCssRulePartialMatch(s,e,t))}findMatchingChildren(t,e,s,r,l=[]){if(!e&&\\\"\\\"!==e)throw console.error(t,e,s,r,l),Error(\\\"undefined selector\\\");let i=e.split(\\\">\\\").map(t=>t.trim()),n=i[s];if(0===s&&\\\"svg\\\"===n&&(n=i[++s],s===i.length))return r.push(t),void l.push(e);if(e.match(/^[a-z]+$/))return this.findChildrenOfType(t,e,r);for(let a=0;a<t.children.length;a++){let c=t.children[a],h=!1;o.isCssRulePartialMatch(n,c,t)&&(s===i.length-1?(r.push(c),l.push(e)):h=!0),c.children&&(h||i.length<2)&&s+1<i.length&&this.findMatchingChildren(c,e,s+1,r,l)}}static isCssRulePartialMatch(t,e,s){if(\\\":not(\\\"===t.substr(0,5)){const r=t.substr(0,t.length-1).substr(5);return!o.isCssRulePartialMatch(r,e,s)}if(\\\".\\\"===t[0]){if(e.className&&-1!==e.className.split(\\\" \\\").indexOf(t.substr(1)))return!0}else if(\\\"#\\\"===t[0]){if(t.substr(1)===e.id)return!0}else if(t.match(/^[a-z]+$/)){if(t===e.type)return!0}else{if(-1!==t.indexOf(\\\":nth-child(\\\")){let r=\\\"any\\\",l=t;\\\":\\\"!==t[0]&&(r=t.substr(0,t.indexOf(\\\":\\\")),l=t.substr(t.indexOf(\\\":\\\")));const o=parseInt(l.substr(\\\":nth-child(\\\".length));return s.children.indexOf(e)===o-1&&(\\\"any\\\"===r||e.type===r)}if(-1!==t.indexOf(\\\".\\\")){const s=t.indexOf(\\\".\\\"),r=t.substr(0,s),l=t.substr(s+1);if(r===e.type&&e.className&&-1!==e.className.split(\\\" \\\").indexOf(l))return!0}}return!1}}o.ROUNDED_ATTRS=[\\\"cx\\\",\\\"cy\\\"],e.VdomManager=o},function(t,e,s){\\\"use strict\\\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,\\\"__esModule\\\",{value:!0});const l=r(s(0));e.default=class{constructor(t,e,s=!1,r=(()=>{})){this.vdom=t,this.canvas=e,this.forceSingle=s,this.onDrawn=r,this.lastFullSecond=0,this.countSinceLastFullSecond=0,this.circlesByColor={},this.rectsByColor={},this.drawTexts=[],this.drawImages=[],this.linesByColor={};const l=e.getContext(\\\"2d\\\");if(!l)throw new Error(\\\"could not create canvas context\\\");this.ctx=l,this.ctx.scale(this.vdom.data.scale,this.vdom.data.scale),this.ctx.save(),this.draw(),setTimeout(()=>{this.draw()},1e3)}draw(){const t=this.ctx;t.restore(),t.save(),t.clearRect(0,0,this.vdom.data.width,this.vdom.data.height),this.drawLine(null,\\\"start\\\"),this.drawCircle(null,\\\"start\\\"),this.drawRect(null,\\\"start\\\"),this.drawText(null,\\\"start\\\"),this.drawImage(null,\\\"start\\\"),this.drawNodeAndChildren(this.vdom.data,this.forceSingle),this.drawLine(null,\\\"end\\\"),this.drawCircle(null,\\\"end\\\"),this.drawRect(null,\\\"end\\\"),this.drawText(null,\\\"end\\\"),this.drawImage(null,\\\"end\\\"),this.onDrawn();const e=Math.round(performance.now()/1e3);e!==this.lastFullSecond&&(this.lastFullSecond=e,this.countSinceLastFullSecond=0),this.countSinceLastFullSecond++}drawNodeAndChildren(t,e){const s=this.ctx;if(s.save(),this.applyTransform(t.transform),t.transform&&(e=!0),t.type&&\\\"g\\\"!==t.type&&(!t.style.display||\\\"none\\\"!==t.style.display)){if(\\\"title\\\"===t.type)return;e?this.drawSingleNode(t,\\\"forcesingle\\\"):this.drawSingleNode(t)}if(t.children)for(let s=0;s<t.children.length;s++)this.drawNodeAndChildren(t.children[s],e);s.restore()}drawSingleNode(t,e=\\\"normal\\\"){const s=t.type,r=this[\\\"draw\\\"+s.substr(0,1).toUpperCase()+s.substr(1)];if(!r)return console.error(\\\"no draw function yet for \\\",s);r.call(this,t,e)}drawClippath(t){console.warn(\\\"clippaths can not be rendered yet.\\\")}drawCircle(t,e=\\\"normal\\\"){if(\\\"normal\\\"===e){let e=t.style.fill?t.style.fill:t.fill,s=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;e||(e=\\\"rgb(0,0,0)\\\");const r=l.default.colorToRgba(e,s)+\\\";\\\"+this.getStrokeStyle(t);this.circlesByColor[r]||(this.circlesByColor[r]=[]),this.circlesByColor[r].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=t.style.fill?t.style.fill:t.fill;e||(e=\\\"#000\\\");let s=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;const r=t.cx||0,o=t.cy||0;this.ctx.beginPath(),this.ctx.fillStyle=l.default.colorToRgba(e,s),this.ctx.strokeStyle=this.getStrokeStyle(t),this.ctx.lineWidth=t.style[\\\"stroke-width\\\"]?parseFloat(t.style[\\\"stroke-width\\\"]):parseFloat(t.strokeWidth),this.ctx.arc(r,o,t.r,0,2*Math.PI),\\\"none\\\"!==e&&this.ctx.fill(),t.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==t.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else for(let t in this.circlesByColor)if(this.circlesByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let l=this.circlesByColor[t][0];const o=l.style[\\\"stroke-width\\\"]?parseFloat(l.style[\\\"stroke-width\\\"]):parseFloat(l.strokeWidth);this.ctx.lineWidth=o||1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.circlesByColor[t]){const t=e.cx?e.cx:0,s=e.cy?e.cy:0,r=e.r;this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t+r,s),this.ctx.arc(t,s,r,0,2*Math.PI),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),l.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==l.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else this.circlesByColor={}}getFillStyle(t){let e=t.style.fill?t.style.fill:t.fill,s=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;return e=l.default.colorToRgba(e,s)}getStrokeStyle(t){if(t.style[\\\"stroke-rgba\\\"])return t.style[\\\"stroke-rgba\\\"];let e=t.style.stroke?t.style.stroke:t.stroke;if(e){let s=void 0===t.style[\\\"stroke-opacity\\\"]?t.style.opacity:t.style[\\\"stroke-opacity\\\"];return void 0===s&&(s=void 0===t[\\\"stroke-opacity\\\"]?t.opacity:t[\\\"stroke-opacity\\\"]),t.style[\\\"stroke-rgba\\\"]=l.default.colorToRgba(e,s),t.style[\\\"stroke-rgba\\\"]}return\\\"none\\\"}drawRect(t,e=\\\"normal\\\"){if(\\\"normal\\\"===e){let e=t.style.fill?t.style.fill:t.fill,s=t[\\\"fill-opacity\\\"]?t[\\\"fill-opacity\\\"]:t.opacity,r=t.style[\\\"fill-opacity\\\"]?t.style[\\\"fill-opacity\\\"]:t.style.opacity;void 0!==r&&(s=r);const o=l.default.colorToRgba(e,s)+\\\";\\\"+this.getStrokeStyle(t);this.rectsByColor[o]||(this.rectsByColor[o]=[]),this.rectsByColor[o].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e){if(\\\"forcesingle\\\"===e){let e=t.style.fill?t.style.fill:t.fill;e&&(e=l.default.colorToRgba(e,t.style[\\\"fill-opacity\\\"])),e&&\\\"none\\\"!==e&&(this.ctx.fillStyle=t.style.fill?t.style.fill:t.fill,this.ctx.fillRect(t.x,t.y,t.width,t.height));let s=t.style.stroke?t.style.stroke:t.stroke;s&&(s=l.default.colorToRgba(s,t.style[\\\"stroke-opacity\\\"]),this.ctx.strokeStyle=s,this.ctx.beginPath(),this.ctx.rect(t.x,t.y,t.width,t.height),this.ctx.stroke())}}else for(let t in this.rectsByColor)if(this.rectsByColor.hasOwnProperty(t)){const e=t.split(\\\";\\\"),s=e[0],r=e[1];this.ctx.fillStyle=s;let l=this.rectsByColor[t][0];const o=l.style[\\\"stroke-width\\\"]?parseFloat(l.style[\\\"stroke-width\\\"]):parseFloat(l.strokeWidth);this.ctx.lineWidth=o||1,this.ctx.strokeStyle=r,this.ctx.beginPath();for(let e of this.rectsByColor[t]){const t=e.cx?e.cx:0,s=e.cy?e.cy:0,r=e.r;this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(t+r,s),this.ctx.rect(e.x,e.y,e.width,e.height),this.ctx.restore()}\\\"none\\\"!==s&&this.ctx.fill(),l.style[\\\"stroke-rgba\\\"]&&\\\"none\\\"!==l.style[\\\"stroke-rgba\\\"]&&this.ctx.stroke()}}else this.rectsByColor={}}drawText(t,e=\\\"normal\\\"){const s=t=>{if(\\\"\\\"===t.text)return;const e=t[\\\"font-size\\\"]?l.default.convertSizeToPx(t[\\\"font-size\\\"])+\\\"px\\\":\\\"30px\\\";let s=t.style.font?t.style.font:t.font;if(s||(s=e+\\\" Arial\\\"),t[\\\"text-anchor\\\"]){const e=\\\"middle\\\"===t[\\\"text-anchor\\\"]?\\\"center\\\":t[\\\"text-anchor\\\"];this.ctx.textAlign=e}let r=t.fill?t.fill:t.style.fill;r||(r=\\\"#000\\\"),this.ctx.font=s,this.ctx.fillStyle=r;let o=t.x||0,i=t.y||0,n=l.default.convertSizeToPx(t.dx,!1)||0,a=l.default.convertSizeToPx(t.dy,!1)||0;this.ctx.fillText(t.text,o+n,i+a)};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return s(t);if(\\\"end\\\"!==e);else for(const t of this.drawTexts)s(t)}else this.drawTexts.push(t);else this.drawTexts=[]}drawImage(t,e=\\\"normal\\\"){const s=t=>{if(\\\"\\\"===t.href)return;let e=t.fill?t.fill:t.style.fill;e||(e=\\\"#000\\\"),this.ctx.fillStyle=e;let s=t.x||0,r=t.y||0,l=t.width||0,o=t.height||0;if(t.image)try{this.ctx.drawImage(t.image,s,r,l,o)}catch(t){console.log(t)}};if(\\\"start\\\"!==e)if(\\\"normal\\\"!==e){if(\\\"forcesingle\\\"===e)return s(t);if(\\\"end\\\"!==e);else for(const t of this.drawImages)s(t)}else this.drawImages.push(t);else this.drawImages=[]}drawPath(t,e=\\\"normal\\\"){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;const s=this.getFillStyle(t),r=this.getStrokeStyle(t),l=t.style[\\\"stroke-width\\\"]?t.style[\\\"stroke-width\\\"]:t[\\\"stroke-width\\\"];let o=new Path2D(t.d);if(this.ctx.fillStyle=s,r&&\\\"none\\\"!==r){if(l?(this.ctx.lineWidth=l,this.ctx.strokeStyle=r):this.ctx.strokeStyle=r,t.style[\\\"stroke-linejoin\\\"]){const e=t.style[\\\"stroke-linejoin\\\"];\\\"bevel\\\"===e||\\\"round\\\"===e||\\\"miter\\\"===e?this.ctx.lineJoin=e:console.error(\\\"unknown line join value:\\\",e)}this.ctx.stroke(o)}s&&\\\"none\\\"!==s&&this.ctx.fill(o)}drawTspan(t,e=\\\"normal\\\"){if(\\\"normal\\\"!==e&&\\\"forcesingle\\\"!==e)return;this.ctx.font=\\\"10px Arial\\\",this.ctx.fillStyle=\\\"#000000\\\";const s=\\\"middle\\\"===t.style.textAnchor?\\\"center\\\":t.style.textAnchor;this.ctx.textAlign=s,this.ctx.fillText(t.text,t.x,t.y)}drawTextpath(t){console.warn(\\\"no draw function yet for textpath\\\")}drawLine(t,e=\\\"normal\\\"){if(this.vdom.data.scale,\\\"normal\\\"===e){const e=this.getStrokeStyle(t);if(\\\"none\\\"===e)return;this.linesByColor[e]||(this.linesByColor[e]=[]),this.linesByColor[e].push(t)}if(\\\"start\\\"!==e){if(\\\"end\\\"!==e)\\\"forcesingle\\\"===e&&(this.ctx.beginPath(),this.ctx.moveTo(t.x1,t.y1),this.ctx.lineTo(t.x2,t.y2),this.ctx.strokeStyle=t.style[\\\"stroke-rgba\\\"],this.ctx.stroke());else for(let t in this.linesByColor)if(this.linesByColor.hasOwnProperty(t)){this.ctx.strokeStyle=t;let e=this.linesByColor[t][0];this.ctx.lineWidth=e.style[\\\"stroke-width\\\"]?parseFloat(e.style[\\\"stroke-width\\\"]):parseFloat(e[\\\"stroke-width\\\"]),this.ctx.beginPath();for(let e of this.linesByColor[t])this.ctx.save(),this.applyTransform(e.transform),this.ctx.moveTo(e.x1,e.y1),this.ctx.lineTo(e.x2,e.y2),this.ctx.restore();this.ctx.stroke()}}else this.linesByColor={}}drawDefs(t){}drawMarker(t){}applyTransform(t){const e=t?l.default.parseTransform(t):null;return!!e&&(e.rotate,this.ctx.transform(e.scaleX,0,0,e.scaleY,e.translateX,e.translateY),this.ctx.rotate(e.rotate*Math.PI/180),!0)}}}]);\\n//# sourceMappingURL=bcd3b8dc2f1596ea66df.worker.js.map\", __webpack_public_path__ + \"bcd3b8dc2f1596ea66df.worker.js\");\n};","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};"],"sourceRoot":""}